
wav-player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dca8  0800dca8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dca8  0800dca8  0001dca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcb0  0800dcb0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dcb0  0800dcb0  0001dcb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcb4  0800dcb4  0001dcb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800dcb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001e50  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20001ecc  20001ecc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b770  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004d02  00000000  00000000  0003b85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00040568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f5c  00000000  00000000  000419b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000260f2  00000000  00000000  0004290c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020576  00000000  00000000  000689fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb410  00000000  00000000  00088f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005558  00000000  00000000  00154384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001598dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800db24 	.word	0x0800db24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800db24 	.word	0x0800db24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	2194      	movs	r1, #148	; 0x94
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <write_register+0x30>)
 80004e8:	f003 fd3e 	bl	8003f68 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000098 	.word	0x20000098

080004f8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	4603      	mov	r3, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000508:	f107 020c 	add.w	r2, r7, #12
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2194      	movs	r1, #148	; 0x94
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <read_register+0x3c>)
 8000516:	f003 fd27 	bl	8003f68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <read_register+0x3c>)
 8000526:	f003 fe1d 	bl	8004164 <HAL_I2C_Master_Receive>
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000098 	.word	0x20000098

08000538 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000538:	b084      	sub	sp, #16
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	f107 0c10 	add.w	ip, r7, #16
 8000544:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000548:	4b7b      	ldr	r3, [pc, #492]	; (8000738 <CS43_Init+0x200>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000550:	4b79      	ldr	r3, [pc, #484]	; (8000738 <CS43_Init+0x200>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <CS43_Init+0x200>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055e:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4875      	ldr	r0, [pc, #468]	; (800073c <CS43_Init+0x204>)
 8000566:	f001 ff97 	bl	8002498 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056a:	4b75      	ldr	r3, [pc, #468]	; (8000740 <CS43_Init+0x208>)
 800056c:	4618      	mov	r0, r3
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2254      	movs	r2, #84	; 0x54
 8000574:	4619      	mov	r1, r3
 8000576:	f00d fa7b 	bl	800da70 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057a:	2301      	movs	r3, #1
 800057c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	2002      	movs	r0, #2
 8000584:	f7ff ff9e 	bl	80004c4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800058c:	797b      	ldrb	r3, [r7, #5]
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	b2db      	uxtb	r3, r3
 8000594:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	f043 030c 	orr.w	r3, r3, #12
 800059c:	b2db      	uxtb	r3, r3
 800059e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a0:	797b      	ldrb	r3, [r7, #5]
 80005a2:	f043 0303 	orr.w	r3, r3, #3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	3301      	adds	r3, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	2004      	movs	r0, #4
 80005b2:	f7ff ff87 	bl	80004c4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	3301      	adds	r3, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2005      	movs	r0, #5
 80005c2:	f7ff ff7f 	bl	80004c4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	2006      	movs	r0, #6
 80005cc:	f7ff ff94 	bl	80004f8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	f023 0310 	bic.w	r3, r3, #16
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	f023 0304 	bic.w	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	b2db      	uxtb	r3, r3
 800060a:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800060c:	797b      	ldrb	r3, [r7, #5]
 800060e:	f043 0303 	orr.w	r3, r3, #3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	3301      	adds	r3, #1
 800061a:	4619      	mov	r1, r3
 800061c:	2006      	movs	r0, #6
 800061e:	f7ff ff51 	bl	80004c4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	3301      	adds	r3, #1
 8000626:	4619      	mov	r1, r3
 8000628:	2008      	movs	r0, #8
 800062a:	f7ff ff65 	bl	80004f8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800062e:	797b      	ldrb	r3, [r7, #5]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	b2db      	uxtb	r3, r3
 8000636:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000638:	797b      	ldrb	r3, [r7, #5]
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	3301      	adds	r3, #1
 8000646:	4619      	mov	r1, r3
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff3b 	bl	80004c4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	3301      	adds	r3, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2009      	movs	r0, #9
 8000656:	f7ff ff4f 	bl	80004f8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	b2db      	uxtb	r3, r3
 8000662:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	3301      	adds	r3, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff25 	bl	80004c4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	3301      	adds	r3, #1
 800067e:	4619      	mov	r1, r3
 8000680:	200e      	movs	r0, #14
 8000682:	f7ff ff39 	bl	80004f8 <read_register>
	if(outputMode == MODE_ANALOG)
 8000686:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068a:	2b03      	cmp	r3, #3
 800068c:	d119      	bne.n	80006c2 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800068e:	797b      	ldrb	r3, [r7, #5]
 8000690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000694:	b2db      	uxtb	r3, r3
 8000696:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000698:	797b      	ldrb	r3, [r7, #5]
 800069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f023 0320 	bic.w	r3, r3, #32
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	f023 0310 	bic.w	r3, r3, #16
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	f023 0308 	bic.w	r3, r3, #8
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	717b      	strb	r3, [r7, #5]
 80006c0:	e005      	b.n	80006ce <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ca:	2302      	movs	r3, #2
 80006cc:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	3301      	adds	r3, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	200e      	movs	r0, #14
 80006d6:	f7ff fef5 	bl	80004c4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	3301      	adds	r3, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	200f      	movs	r0, #15
 80006e2:	f7ff ff09 	bl	80004f8 <read_register>
	iData[1] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	3301      	adds	r3, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	200f      	movs	r0, #15
 80006f2:	f7ff fee7 	bl	80004c4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	3301      	adds	r3, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	2014      	movs	r0, #20
 8000702:	f7ff fedf 	bl	80004c4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	3301      	adds	r3, #1
 800070a:	4619      	mov	r1, r3
 800070c:	2015      	movs	r0, #21
 800070e:	f7ff fed9 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	3301      	adds	r3, #1
 8000716:	4619      	mov	r1, r3
 8000718:	201a      	movs	r0, #26
 800071a:	f7ff fed3 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	201b      	movs	r0, #27
 8000726:	f7ff fecd 	bl	80004c4 <write_register>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr
 8000738:	20000144 	.word	0x20000144
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000098 	.word	0x20000098

08000744 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d82b      	bhi.n	80007ac <CS43_Enable_RightLeft+0x68>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <CS43_Enable_RightLeft+0x18>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800076d 	.word	0x0800076d
 8000760:	0800077d 	.word	0x0800077d
 8000764:	0800078d 	.word	0x0800078d
 8000768:	0800079d 	.word	0x0800079d
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800076c:	23c0      	movs	r3, #192	; 0xc0
 800076e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000770:	7b7b      	ldrb	r3, [r7, #13]
 8000772:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000776:	b2db      	uxtb	r3, r3
 8000778:	737b      	strb	r3, [r7, #13]
			break;
 800077a:	e018      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000780:	7b7b      	ldrb	r3, [r7, #13]
 8000782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000786:	b2db      	uxtb	r3, r3
 8000788:	737b      	strb	r3, [r7, #13]
			break;
 800078a:	e010      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800078c:	23c0      	movs	r3, #192	; 0xc0
 800078e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000790:	7b7b      	ldrb	r3, [r7, #13]
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	b2db      	uxtb	r3, r3
 8000798:	737b      	strb	r3, [r7, #13]
			break;
 800079a:	e008      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a0:	7b7b      	ldrb	r3, [r7, #13]
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	737b      	strb	r3, [r7, #13]
			break;
 80007aa:	e000      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007ac:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	f043 030c 	orr.w	r3, r3, #12
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	f043 0303 	orr.w	r3, r3, #3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	3301      	adds	r3, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	2004      	movs	r0, #4
 80007cc:	f7ff fe7a 	bl	80004c4 <write_register>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3319      	adds	r3, #25
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	3301      	adds	r3, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff fe66 	bl	80004c4 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	3301      	adds	r3, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	2021      	movs	r0, #33	; 0x21
 8000802:	f7ff fe5f 	bl	80004c4 <write_register>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d019      	beq.n	8000852 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	3301      	adds	r3, #1
 8000828:	4619      	mov	r1, r3
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff fe4a 	bl	80004c4 <write_register>
    iData[1] = 0x01;
 8000830:	2301      	movs	r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	3301      	adds	r3, #1
 800083a:	4619      	mov	r1, r3
 800083c:	2022      	movs	r0, #34	; 0x22
 800083e:	f7ff fe41 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	3301      	adds	r3, #1
 8000848:	4619      	mov	r1, r3
 800084a:	2023      	movs	r0, #35	; 0x23
 800084c:	f7ff fe3a 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000850:	e018      	b.n	8000884 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000852:	2300      	movs	r3, #0
 8000854:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	3301      	adds	r3, #1
 800085c:	4619      	mov	r1, r3
 800085e:	2022      	movs	r0, #34	; 0x22
 8000860:	f7ff fe30 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	3301      	adds	r3, #1
 800086a:	4619      	mov	r1, r3
 800086c:	2023      	movs	r0, #35	; 0x23
 800086e:	f7ff fe29 	bl	80004c4 <write_register>
    iData[1] = 0xAF;
 8000872:	23af      	movs	r3, #175	; 0xaf
 8000874:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	3301      	adds	r3, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2004      	movs	r0, #4
 8000880:	f7ff fe20 	bl	80004c4 <write_register>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffbb 	bl	800080e <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000898:	2399      	movs	r3, #153	; 0x99
 800089a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	3301      	adds	r3, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fe0e 	bl	80004c4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	3301      	adds	r3, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	2047      	movs	r0, #71	; 0x47
 80008b4:	f7ff fe06 	bl	80004c4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff fe1a 	bl	80004f8 <read_register>
	iData[1] |= 0x80;
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	3301      	adds	r3, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2032      	movs	r0, #50	; 0x32
 80008d6:	f7ff fdf5 	bl	80004c4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	3301      	adds	r3, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fe09 	bl	80004f8 <read_register>
	iData[1] &= ~(0x80);
 80008e6:	797b      	ldrb	r3, [r7, #5]
 80008e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f7ff fde4 	bl	80004c4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	3301      	adds	r3, #1
 8000904:	4619      	mov	r1, r3
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fddc 	bl	80004c4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090c:	239e      	movs	r3, #158	; 0x9e
 800090e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd4 	bl	80004c4 <write_register>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <CS43_Stop>:

void CS43_Stop(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff6f 	bl	800080e <CS43_SetMute>
  iData[1] = 0x04;
 8000930:	2304      	movs	r3, #4
 8000932:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	3301      	adds	r3, #1
 8000938:	4619      	mov	r1, r3
 800093a:	200e      	movs	r0, #14
 800093c:	f7ff fdc2 	bl	80004c4 <write_register>
	iData[1] = 0x9F;
 8000940:	239f      	movs	r3, #159	; 0x9f
 8000942:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fdba 	bl	80004c4 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000960:	2300      	movs	r3, #0
 8000962:	77fb      	strb	r3, [r7, #31]
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	e00b      	b.n	8000986 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <audioI2S_pllClockConfig+0x8c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	d101      	bne.n	8000980 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	3301      	adds	r3, #1
 8000984:	77fb      	strb	r3, [r7, #31]
 8000986:	7ffb      	ldrb	r3, [r7, #31]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d9f0      	bls.n	800096e <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f005 ff3d 	bl	8006810 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000996:	7fbb      	ldrb	r3, [r7, #30]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	2b00      	cmp	r3, #0
 800099e:	d111      	bne.n	80009c4 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a4:	7fbb      	ldrb	r3, [r7, #30]
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <audioI2S_pllClockConfig+0x90>)
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009ae:	7fbb      	ldrb	r3, [r7, #30]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <audioI2S_pllClockConfig+0x94>)
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 fe45 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c2:	e00b      	b.n	80009dc <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009c8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009cc:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fe38 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0800db94 	.word	0x0800db94
 80009e8:	0800dbb4 	.word	0x0800dbb4
 80009ec:	0800dbd4 	.word	0x0800dbd4

080009f0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <I2S3_freqUpdate+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x84>)
 80009fe:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a12:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f8d9 	bl	8004c0c <HAL_I2S_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e000      	b.n	8000a66 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a64:	2301      	movs	r3, #1
  }
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000ec 	.word	0x200000ec
 8000a74:	40003c00 	.word	0x40003c00

08000a78 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <audioI2S_setHandle+0x1c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000ec 	.word	0x200000ec

08000a98 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff59 	bl	8000958 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <I2S3_freqUpdate>
  return true;
 8000aac:	2301      	movs	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac2:	f7ff fee3 	bl	800088c <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <audioI2S_play+0x38>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad0:	d203      	bcs.n	8000ada <audioI2S_play+0x22>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	e001      	b.n	8000ade <audioI2S_play+0x26>
 8000ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ade:	461a      	mov	r2, r3
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	f004 f9d3 	bl	8004e8c <HAL_I2S_Transmit_DMA>
  return true;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000ec 	.word	0x200000ec

08000af4 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000af8:	f7ff ff14 	bl	8000924 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <audioI2S_pause+0x18>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fa6b 	bl	8004fdc <HAL_I2S_DMAPause>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ec 	.word	0x200000ec

08000b10 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b14:	f7ff feba 	bl	800088c <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <audioI2S_resume+0x18>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fabf 	bl	80050a0 <HAL_I2S_DMAResume>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000ec 	.word	0x200000ec

08000b2c <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b30:	f7ff fef8 	bl	8000924 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <audioI2S_stop+0x18>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fb45 	bl	80051c8 <HAL_I2S_DMAStop>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000ec 	.word	0x200000ec

08000b48 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_I2S_TxCpltCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5a:	f000 fd2b 	bl	80015b4 <audioI2S_fullTransfer_Callback>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40003c00 	.word	0x40003c00

08000b6c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b7e:	f000 fd0d 	bl	800159c <audioI2S_halfTransfer_Callback>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40003c00 	.word	0x40003c00

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b095      	sub	sp, #84	; 0x54
 8000b94:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fd43 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f8c9 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 f9ad 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ba2:	f000 f98b 	bl	8000ebc <MX_DMA_Init>
  MX_I2C1_Init();
 8000ba6:	f000 f92d 	bl	8000e04 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000baa:	f000 f959 	bl	8000e60 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000bae:	f006 fe9f 	bl	80078f0 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000bb2:	f00c fb4b 	bl	800d24c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000bb6:	4c55      	ldr	r4, [pc, #340]	; (8000d0c <main+0x17c>)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	9311      	str	r3, [sp, #68]	; 0x44
 8000bbc:	4668      	mov	r0, sp
 8000bbe:	f104 0310 	add.w	r3, r4, #16
 8000bc2:	2244      	movs	r2, #68	; 0x44
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f00c ff53 	bl	800da70 <memcpy>
 8000bca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000bce:	f7ff fcb3 	bl	8000538 <CS43_Init>
	CS43_SetVolume(255);//0-255
 8000bd2:	20ff      	movs	r0, #255	; 0xff
 8000bd4:	f7ff fe00 	bl	80007d8 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f7ff fdb3 	bl	8000744 <CS43_Enable_RightLeft>

	audioI2S_setHandle(&hi2s3);
 8000bde:	484c      	ldr	r0, [pc, #304]	; (8000d10 <main+0x180>)
 8000be0:	f7ff ff4a 	bl	8000a78 <audioI2S_setHandle>

	bool isSdCardMounted=0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	71bb      	strb	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000bec:	f00c fb54 	bl	800d298 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000bf0:	4b48      	ldr	r3, [pc, #288]	; (8000d14 <main+0x184>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <main+0x76>
        {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfe:	4846      	ldr	r0, [pc, #280]	; (8000d18 <main+0x188>)
 8000c00:	f001 fc4a 	bl	8002498 <HAL_GPIO_WritePin>
 8000c04:	e010      	b.n	8000c28 <main+0x98>
        }
        else if(Appli_state == APPLICATION_DISCONNECT)
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <main+0x184>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d10c      	bne.n	8000c28 <main+0x98>
        {
          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c14:	4840      	ldr	r0, [pc, #256]	; (8000d18 <main+0x188>)
 8000c16:	f001 fc3f 	bl	8002498 <HAL_GPIO_WritePin>
          f_mount(NULL, (TCHAR const*)"", 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	493f      	ldr	r1, [pc, #252]	; (8000d1c <main+0x18c>)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f00b fcc4 	bl	800c5ac <f_mount>
          isSdCardMounted = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	71fb      	strb	r3, [r7, #7]
        }

        if(Appli_state == APPLICATION_READY)
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <main+0x184>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d1dd      	bne.n	8000bec <main+0x5c>
        {
          if(!isSdCardMounted)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f083 0301 	eor.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d006      	beq.n	8000c4a <main+0xba>
          {
            f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4938      	ldr	r1, [pc, #224]	; (8000d20 <main+0x190>)
 8000c40:	4838      	ldr	r0, [pc, #224]	; (8000d24 <main+0x194>)
 8000c42:	f00b fcb3 	bl	800c5ac <f_mount>
            isSdCardMounted = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	71fb      	strb	r3, [r7, #7]
          }
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4836      	ldr	r0, [pc, #216]	; (8000d28 <main+0x198>)
 8000c4e:	f001 fc0b 	bl	8002468 <HAL_GPIO_ReadPin>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d0c9      	beq.n	8000bec <main+0x5c>
          {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	482e      	ldr	r0, [pc, #184]	; (8000d18 <main+0x188>)
 8000c60:	f001 fc1a 	bl	8002498 <HAL_GPIO_WritePin>
            HAL_Delay(500);
 8000c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c68:	f000 fd4c 	bl	8001704 <HAL_Delay>
            wavPlayer_fileSelect(WAV_FILE1);
 8000c6c:	482f      	ldr	r0, [pc, #188]	; (8000d2c <main+0x19c>)
 8000c6e:	f000 fba3 	bl	80013b8 <wavPlayer_fileSelect>
            wavPlayer_play();
 8000c72:	f000 fbcb 	bl	800140c <wavPlayer_play>

            while(!wavPlayer_isFinished())
 8000c76:	e035      	b.n	8000ce4 <main+0x154>
            {
              wavPlayer_process();
 8000c78:	f000 fbfa 	bl	8001470 <wavPlayer_process>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	482a      	ldr	r0, [pc, #168]	; (8000d28 <main+0x198>)
 8000c80:	f001 fbf2 	bl	8002468 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d02c      	beq.n	8000ce4 <main+0x154>
              {
                pauseResumeToggle^=1;
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	f083 0301 	eor.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	bf14      	ite	ne
 8000c96:	2301      	movne	r3, #1
 8000c98:	2300      	moveq	r3, #0
 8000c9a:	71bb      	strb	r3, [r7, #6]
                if(pauseResumeToggle)
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <main+0x12a>
                {
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca8:	481b      	ldr	r0, [pc, #108]	; (8000d18 <main+0x188>)
 8000caa:	f001 fbf5 	bl	8002498 <HAL_GPIO_WritePin>
                  wavPlayer_pause();
 8000cae:	f000 fc5d 	bl	800156c <wavPlayer_pause>
                  HAL_Delay(200);
 8000cb2:	20c8      	movs	r0, #200	; 0xc8
 8000cb4:	f000 fd26 	bl	8001704 <HAL_Delay>
 8000cb8:	e014      	b.n	8000ce4 <main+0x154>
                }
                else
                {
                  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc0:	4815      	ldr	r0, [pc, #84]	; (8000d18 <main+0x188>)
 8000cc2:	f001 fbe9 	bl	8002498 <HAL_GPIO_WritePin>
                  HAL_Delay(1000);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f000 fd1b 	bl	8001704 <HAL_Delay>
                  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000cce:	2101      	movs	r1, #1
 8000cd0:	4815      	ldr	r0, [pc, #84]	; (8000d28 <main+0x198>)
 8000cd2:	f001 fbc9 	bl	8002468 <HAL_GPIO_ReadPin>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <main+0x150>
                  {
                    wavPlayer_stop();
 8000cdc:	f000 fc3a 	bl	8001554 <wavPlayer_stop>
                  }
                  {
                    wavPlayer_resume();
 8000ce0:	f000 fc4a 	bl	8001578 <wavPlayer_resume>
            while(!wavPlayer_isFinished())
 8000ce4:	f000 fc4e 	bl	8001584 <wavPlayer_isFinished>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1c1      	bne.n	8000c78 <main+0xe8>
                  }
                }
              }
            }
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfa:	4807      	ldr	r0, [pc, #28]	; (8000d18 <main+0x188>)
 8000cfc:	f001 fbcc 	bl	8002498 <HAL_GPIO_WritePin>
            HAL_Delay(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f000 fcfe 	bl	8001704 <HAL_Delay>
    MX_USB_HOST_Process();
 8000d08:	e770      	b.n	8000bec <main+0x5c>
 8000d0a:	bf00      	nop
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	20000144 	.word	0x20000144
 8000d14:	20001a7c 	.word	0x20001a7c
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	0800db3c 	.word	0x0800db3c
 8000d20:	2000143c 	.word	0x2000143c
 8000d24:	20001440 	.word	0x20001440
 8000d28:	40020000 	.word	0x40020000
 8000d2c:	0800db40 	.word	0x0800db40

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	; 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	2230      	movs	r2, #48	; 0x30
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f00c fe52 	bl	800d9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a27      	ldr	r2, [pc, #156]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a21      	ldr	r2, [pc, #132]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7e:	6013      	str	r3, [r2, #0]
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d96:	2302      	movs	r3, #2
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000da0:	2308      	movs	r3, #8
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dae:	2307      	movs	r3, #7
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db2:	f107 0320 	add.w	r3, r7, #32
 8000db6:	4618      	mov	r0, r3
 8000db8:	f004 ffc4 	bl	8005d44 <HAL_RCC_OscConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc2:	f000 f92d 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	2105      	movs	r1, #5
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 fa25 	bl	8006234 <HAL_RCC_ClockConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000df0:	f000 f916 	bl	8001020 <Error_Handler>
  }
}
 8000df4:	bf00      	nop
 8000df6:	3750      	adds	r7, #80	; 0x50
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40007000 	.word	0x40007000

08000e04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_I2C1_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_I2C1_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_I2C1_Init+0x50>)
 8000e42:	f002 ff4d 	bl	8003ce0 <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 f8e8 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200000f0 	.word	0x200000f0
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <MX_I2S3_Init+0x58>)
 8000e68:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e6a:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e70:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e84:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e88:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e8c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <MX_I2S3_Init+0x54>)
 8000ea2:	f003 feb3 	bl	8004c0c <HAL_I2S_Init>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000eac:	f000 f8b8 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000144 	.word	0x20000144
 8000eb8:	40003c00 	.word	0x40003c00

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_DMA_Init+0x3c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2010      	movs	r0, #16
 8000ee4:	f000 fd0d 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f000 fd26 	bl	800193a <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	; 0x28
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b3b      	ldr	r3, [pc, #236]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a36      	ldr	r2, [pc, #216]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a28      	ldr	r2, [pc, #160]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a21      	ldr	r2, [pc, #132]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_GPIO_Init+0x114>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	481c      	ldr	r0, [pc, #112]	; (8001014 <MX_GPIO_Init+0x118>)
 8000fa4:	f001 fa78 	bl	8002498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fae:	481a      	ldr	r0, [pc, #104]	; (8001018 <MX_GPIO_Init+0x11c>)
 8000fb0:	f001 fa72 	bl	8002498 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <MX_GPIO_Init+0x118>)
 8000fcc:	f001 f8b0 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <MX_GPIO_Init+0x120>)
 8000fe4:	f001 f8a4 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000fe8:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000fec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_GPIO_Init+0x11c>)
 8001002:	f001 f895 	bl	8002130 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40020000 	.word	0x40020000

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	e7fe      	b.n	8001028 <Error_Handler+0x8>
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	4a0f      	ldr	r2, [pc, #60]	; (8001078 <HAL_MspInit+0x4c>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001040:	6453      	str	r3, [r2, #68]	; 0x44
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_MspInit+0x4c>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_I2C_MspInit+0x84>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d12c      	bne.n	80010f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80010ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010cc:	2304      	movs	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <HAL_I2C_MspInit+0x8c>)
 80010d8:	f001 f82a 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a07      	ldr	r2, [pc, #28]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_I2C_MspInit+0x88>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40005400 	.word	0x40005400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400

0800110c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08e      	sub	sp, #56	; 0x38
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_I2S_MspInit+0x164>)
 8001138:	4293      	cmp	r3, r2
 800113a:	f040 8094 	bne.w	8001266 <HAL_I2S_MspInit+0x15a>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001142:	23c8      	movs	r3, #200	; 0xc8
 8001144:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001146:	2302      	movs	r3, #2
 8001148:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4618      	mov	r0, r3
 8001150:	f005 fa7c 	bl	800664c <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800115a:	f7ff ff61 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <HAL_I2S_MspInit+0x168>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a43      	ldr	r2, [pc, #268]	; (8001274 <HAL_I2S_MspInit+0x168>)
 8001168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <HAL_I2S_MspInit+0x168>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_I2S_MspInit+0x168>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a3c      	ldr	r2, [pc, #240]	; (8001274 <HAL_I2S_MspInit+0x168>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <HAL_I2S_MspInit+0x168>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_I2S_MspInit+0x168>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a35      	ldr	r2, [pc, #212]	; (8001274 <HAL_I2S_MspInit+0x168>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_I2S_MspInit+0x168>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b2:	2310      	movs	r3, #16
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011c2:	2306      	movs	r3, #6
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	482a      	ldr	r0, [pc, #168]	; (8001278 <HAL_I2S_MspInit+0x16c>)
 80011ce:	f000 ffaf 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 80011d2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e4:	2306      	movs	r3, #6
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4823      	ldr	r0, [pc, #140]	; (800127c <HAL_I2S_MspInit+0x170>)
 80011f0:	f000 ff9e 	bl	8002130 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80011f4:	4b22      	ldr	r3, [pc, #136]	; (8001280 <HAL_I2S_MspInit+0x174>)
 80011f6:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_I2S_MspInit+0x178>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_I2S_MspInit+0x174>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001206:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120c:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800120e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001212:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001216:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121c:	4b18      	ldr	r3, [pc, #96]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800121e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001222:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122a:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800122c:	4b14      	ldr	r3, [pc, #80]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800122e:	2200      	movs	r2, #0
 8001230:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001234:	2204      	movs	r2, #4
 8001236:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800123a:	2203      	movs	r2, #3
 800123c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800124c:	f000 fb90 	bl	8001970 <HAL_DMA_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2S_MspInit+0x14e>
    {
      Error_Handler();
 8001256:	f7ff fee3 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_I2S_MspInit+0x174>)
 800125e:	639a      	str	r2, [r3, #56]	; 0x38
 8001260:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_I2S_MspInit+0x174>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3738      	adds	r7, #56	; 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40003c00 	.word	0x40003c00
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000
 800127c:	40020800 	.word	0x40020800
 8001280:	2000018c 	.word	0x2000018c
 8001284:	40026088 	.word	0x40026088

08001288 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800128c:	e7fe      	b.n	800128c <NMI_Handler+0x4>

0800128e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <MemManage_Handler+0x4>

0800129a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129e:	e7fe      	b.n	800129e <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d4:	f000 f9f6 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <DMA1_Stream5_IRQHandler+0x10>)
 80012e2:	f000 fcbb 	bl	8001c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000018c 	.word	0x2000018c

080012f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <OTG_FS_IRQHandler+0x10>)
 80012f6:	f001 fb53 	bl	80029a0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20001a80 	.word	0x20001a80

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f00c fb70 	bl	800da18 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20020000 	.word	0x20020000
 8001364:	00002000 	.word	0x00002000
 8001368:	200001ec 	.word	0x200001ec
 800136c:	20001ed0 	.word	0x20001ed0

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SystemInit+0x20>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <SystemInit+0x20>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <wavPlayer_reset+0x1c>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <wavPlayer_reset+0x20>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20001424 	.word	0x20001424
 80013b4:	2000142c 	.word	0x2000142c

080013b8 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08e      	sub	sp, #56	; 0x38
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80013c4:	2201      	movs	r2, #1
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <wavPlayer_fileSelect+0x48>)
 80013ca:	f00b f935 	bl	800c638 <f_open>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <wavPlayer_fileSelect+0x20>
  {
    return false;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e00e      	b.n	80013f6 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	f107 010c 	add.w	r1, r7, #12
 80013e0:	222c      	movs	r2, #44	; 0x2c
 80013e2:	4807      	ldr	r0, [pc, #28]	; (8001400 <wavPlayer_fileSelect+0x48>)
 80013e4:	f00b fae6 	bl	800c9b4 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4a06      	ldr	r2, [pc, #24]	; (8001404 <wavPlayer_fileSelect+0x4c>)
 80013ec:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	4a05      	ldr	r2, [pc, #20]	; (8001408 <wavPlayer_fileSelect+0x50>)
 80013f2:	6013      	str	r3, [r2, #0]
  return true;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3738      	adds	r7, #56	; 0x38
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001f0 	.word	0x200001f0
 8001404:	20000420 	.word	0x20000420
 8001408:	20001428 	.word	0x20001428

0800140c <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  isFinished = false;
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <wavPlayer_play+0x48>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <wavPlayer_play+0x4c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb3c 	bl	8000a98 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001420:	2100      	movs	r1, #0
 8001422:	480e      	ldr	r0, [pc, #56]	; (800145c <wavPlayer_play+0x50>)
 8001424:	f00b fcad 	bl	800cd82 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <wavPlayer_play+0x54>)
 800142a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <wavPlayer_play+0x58>)
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <wavPlayer_play+0x50>)
 8001432:	f00b fabf 	bl	800c9b4 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <wavPlayer_play+0x5c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <wavPlayer_play+0x54>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <wavPlayer_play+0x60>)
 8001442:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001444:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001448:	4806      	ldr	r0, [pc, #24]	; (8001464 <wavPlayer_play+0x58>)
 800144a:	f7ff fb35 	bl	8000ab8 <audioI2S_play>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20001430 	.word	0x20001430
 8001458:	20001428 	.word	0x20001428
 800145c:	200001f0 	.word	0x200001f0
 8001460:	2000142c 	.word	0x2000142c
 8001464:	20000424 	.word	0x20000424
 8001468:	20000420 	.word	0x20000420
 800146c:	20001424 	.word	0x20001424

08001470 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <wavPlayer_process+0xc8>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d859      	bhi.n	8001532 <wavPlayer_process+0xc2>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <wavPlayer_process+0x14>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	08001531 	.word	0x08001531
 8001488:	08001495 	.word	0x08001495
 800148c:	080014d7 	.word	0x080014d7
 8001490:	08001519 	.word	0x08001519
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <wavPlayer_process+0xcc>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800149a:	4b27      	ldr	r3, [pc, #156]	; (8001538 <wavPlayer_process+0xc8>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80014a0:	4b26      	ldr	r3, [pc, #152]	; (800153c <wavPlayer_process+0xcc>)
 80014a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a6:	4926      	ldr	r1, [pc, #152]	; (8001540 <wavPlayer_process+0xd0>)
 80014a8:	4826      	ldr	r0, [pc, #152]	; (8001544 <wavPlayer_process+0xd4>)
 80014aa:	f00b fa83 	bl	800c9b4 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <wavPlayer_process+0xd8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014b6:	d907      	bls.n	80014c8 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 80014b8:	4b23      	ldr	r3, [pc, #140]	; (8001548 <wavPlayer_process+0xd8>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <wavPlayer_process+0xcc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <wavPlayer_process+0xd8>)
 80014c4:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80014c6:	e034      	b.n	8001532 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <wavPlayer_process+0xd8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <wavPlayer_process+0xc8>)
 80014d0:	2203      	movs	r2, #3
 80014d2:	701a      	strb	r2, [r3, #0]
    break;
 80014d4:	e02d      	b.n	8001532 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80014d6:	4b19      	ldr	r3, [pc, #100]	; (800153c <wavPlayer_process+0xcc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <wavPlayer_process+0xc8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <wavPlayer_process+0xcc>)
 80014e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014e8:	4918      	ldr	r1, [pc, #96]	; (800154c <wavPlayer_process+0xdc>)
 80014ea:	4816      	ldr	r0, [pc, #88]	; (8001544 <wavPlayer_process+0xd4>)
 80014ec:	f00b fa62 	bl	800c9b4 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80014f0:	4b15      	ldr	r3, [pc, #84]	; (8001548 <wavPlayer_process+0xd8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014f8:	d907      	bls.n	800150a <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <wavPlayer_process+0xd8>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <wavPlayer_process+0xcc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	4a10      	ldr	r2, [pc, #64]	; (8001548 <wavPlayer_process+0xd8>)
 8001506:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001508:	e013      	b.n	8001532 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <wavPlayer_process+0xd8>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <wavPlayer_process+0xc8>)
 8001512:	2203      	movs	r2, #3
 8001514:	701a      	strb	r2, [r3, #0]
    break;
 8001516:	e00c      	b.n	8001532 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <wavPlayer_process+0xd4>)
 800151a:	f00b fc08 	bl	800cd2e <f_close>
    wavPlayer_reset();
 800151e:	f7ff ff39 	bl	8001394 <wavPlayer_reset>
    isFinished = true;
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <wavPlayer_process+0xe0>)
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <wavPlayer_process+0xc8>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
    break;
 800152e:	e000      	b.n	8001532 <wavPlayer_process+0xc2>
    break;
 8001530:	bf00      	nop
  }
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20001431 	.word	0x20001431
 800153c:	2000142c 	.word	0x2000142c
 8001540:	20000424 	.word	0x20000424
 8001544:	200001f0 	.word	0x200001f0
 8001548:	20001424 	.word	0x20001424
 800154c:	20000c24 	.word	0x20000c24
 8001550:	20001430 	.word	0x20001430

08001554 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8001558:	f7ff fae8 	bl	8000b2c <audioI2S_stop>
  isFinished = true;
 800155c:	4b02      	ldr	r3, [pc, #8]	; (8001568 <wavPlayer_stop+0x14>)
 800155e:	2201      	movs	r2, #1
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20001430 	.word	0x20001430

0800156c <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8001570:	f7ff fac0 	bl	8000af4 <audioI2S_pause>
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  audioI2S_resume();
 800157c:	f7ff fac8 	bl	8000b10 <audioI2S_resume>
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return isFinished;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <wavPlayer_isFinished+0x14>)
 800158a:	781b      	ldrb	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20001430 	.word	0x20001430

0800159c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <audioI2S_halfTransfer_Callback+0x14>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	20001431 	.word	0x20001431

080015b4 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <audioI2S_fullTransfer_Callback+0x14>)
 80015ba:	2202      	movs	r2, #2
 80015bc:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	20001431 	.word	0x20001431

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d0:	480d      	ldr	r0, [pc, #52]	; (8001608 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015d2:	490e      	ldr	r1, [pc, #56]	; (800160c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d8:	e002      	b.n	80015e0 <LoopCopyDataInit>

080015da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015de:	3304      	adds	r3, #4

080015e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e4:	d3f9      	bcc.n	80015da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e8:	4c0b      	ldr	r4, [pc, #44]	; (8001618 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ec:	e001      	b.n	80015f2 <LoopFillZerobss>

080015ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f0:	3204      	adds	r2, #4

080015f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f4:	d3fb      	bcc.n	80015ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015f6:	f7ff febb 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f00c fa13 	bl	800da24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fac7 	bl	8000b90 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001610:	0800dcb8 	.word	0x0800dcb8
  ldr r2, =_sbss
 8001614:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001618:	20001ecc 	.word	0x20001ecc

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	200f      	movs	r0, #15
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fcea 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	20001434 	.word	0x20001434

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20001434 	.word	0x20001434

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff feb6 	bl	80016ec <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e099      	b.n	8001ac0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ac:	e00f      	b.n	80019ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ae:	f7ff fe9d 	bl	80016ec <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d908      	bls.n	80019ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2220      	movs	r2, #32
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2203      	movs	r2, #3
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e078      	b.n	8001ac0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e8      	bne.n	80019ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	4b38      	ldr	r3, [pc, #224]	; (8001ac8 <HAL_DMA_Init+0x158>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d107      	bne.n	8001a38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4313      	orrs	r3, r2
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f023 0307 	bic.w	r3, r3, #7
 8001a4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d117      	bne.n	8001a92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fadf 	bl	8002038 <DMA_CheckFifoParam>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2240      	movs	r2, #64	; 0x40
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e016      	b.n	8001ac0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 fa96 	bl	8001fcc <DMA_CalcBaseAndBitshift>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa8:	223f      	movs	r2, #63	; 0x3f
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	f010803f 	.word	0xf010803f

08001acc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	2300      	movs	r3, #0
 8001adc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_DMA_Start_IT+0x26>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e040      	b.n	8001b74 <HAL_DMA_Start_IT+0xa8>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d12f      	bne.n	8001b66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	68f8      	ldr	r0, [r7, #12]
 8001b1c:	f000 fa28 	bl	8001f70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b24:	223f      	movs	r2, #63	; 0x3f
 8001b26:	409a      	lsls	r2, r3
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0216 	orr.w	r2, r2, #22
 8001b3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d007      	beq.n	8001b54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0208 	orr.w	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e005      	b.n	8001b72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b8a:	f7ff fdaf 	bl	80016ec <HAL_GetTick>
 8001b8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d008      	beq.n	8001bae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2280      	movs	r2, #128	; 0x80
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e052      	b.n	8001c54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0216 	bic.w	r2, r2, #22
 8001bbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <HAL_DMA_Abort+0x62>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0208 	bic.w	r2, r2, #8
 8001bec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bfe:	e013      	b.n	8001c28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c00:	f7ff fd74 	bl	80016ec <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	d90c      	bls.n	8001c28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2220      	movs	r2, #32
 8001c12:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e015      	b.n	8001c54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1e4      	bne.n	8001c00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3a:	223f      	movs	r2, #63	; 0x3f
 8001c3c:	409a      	lsls	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c68:	4b8e      	ldr	r3, [pc, #568]	; (8001ea4 <HAL_DMA_IRQHandler+0x248>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a8e      	ldr	r2, [pc, #568]	; (8001ea8 <HAL_DMA_IRQHandler+0x24c>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c86:	2208      	movs	r2, #8
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01a      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0204 	bic.w	r2, r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	2201      	movs	r2, #1
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00b      	beq.n	8001cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2201      	movs	r2, #1
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2204      	movs	r2, #4
 8001d04:	409a      	lsls	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d012      	beq.n	8001d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00b      	beq.n	8001d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2204      	movs	r2, #4
 8001d22:	409a      	lsls	r2, r3
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	f043 0204 	orr.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	2210      	movs	r2, #16
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d043      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d03c      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d56:	2210      	movs	r2, #16
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d018      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d108      	bne.n	8001d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d024      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	4798      	blx	r3
 8001d8a:	e01f      	b.n	8001dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
 8001d9c:	e016      	b.n	8001dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d107      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0208 	bic.w	r2, r2, #8
 8001dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 808f 	beq.w	8001efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8087 	beq.w	8001efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	2220      	movs	r2, #32
 8001df4:	409a      	lsls	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b05      	cmp	r3, #5
 8001e04:	d136      	bne.n	8001e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0216 	bic.w	r2, r2, #22
 8001e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <HAL_DMA_IRQHandler+0x1da>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0208 	bic.w	r2, r2, #8
 8001e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4a:	223f      	movs	r2, #63	; 0x3f
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d07e      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	4798      	blx	r3
        }
        return;
 8001e72:	e079      	b.n	8001f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01d      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10d      	bne.n	8001eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d031      	beq.n	8001efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	4798      	blx	r3
 8001ea0:	e02c      	b.n	8001efc <HAL_DMA_IRQHandler+0x2a0>
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	4798      	blx	r3
 8001ebc:	e01e      	b.n	8001efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10f      	bne.n	8001eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0210 	bic.w	r2, r2, #16
 8001eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d032      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d022      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2205      	movs	r2, #5
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d307      	bcc.n	8001f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f2      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x2cc>
 8001f42:	e000      	b.n	8001f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	4798      	blx	r3
 8001f66:	e000      	b.n	8001f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f68:	bf00      	nop
    }
  }
}
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d108      	bne.n	8001fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fae:	e007      	b.n	8001fc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	60da      	str	r2, [r3, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3b10      	subs	r3, #16
 8001fdc:	4a14      	ldr	r2, [pc, #80]	; (8002030 <DMA_CalcBaseAndBitshift+0x64>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	091b      	lsrs	r3, r3, #4
 8001fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fe6:	4a13      	ldr	r2, [pc, #76]	; (8002034 <DMA_CalcBaseAndBitshift+0x68>)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d909      	bls.n	800200e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002002:	f023 0303 	bic.w	r3, r3, #3
 8002006:	1d1a      	adds	r2, r3, #4
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	659a      	str	r2, [r3, #88]	; 0x58
 800200c:	e007      	b.n	800201e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002016:	f023 0303 	bic.w	r3, r3, #3
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	aaaaaaab 	.word	0xaaaaaaab
 8002034:	0800dc0c 	.word	0x0800dc0c

08002038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d11f      	bne.n	8002092 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d856      	bhi.n	8002106 <DMA_CheckFifoParam+0xce>
 8002058:	a201      	add	r2, pc, #4	; (adr r2, 8002060 <DMA_CheckFifoParam+0x28>)
 800205a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205e:	bf00      	nop
 8002060:	08002071 	.word	0x08002071
 8002064:	08002083 	.word	0x08002083
 8002068:	08002071 	.word	0x08002071
 800206c:	08002107 	.word	0x08002107
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d046      	beq.n	800210a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002080:	e043      	b.n	800210a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800208a:	d140      	bne.n	800210e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002090:	e03d      	b.n	800210e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209a:	d121      	bne.n	80020e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d837      	bhi.n	8002112 <DMA_CheckFifoParam+0xda>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <DMA_CheckFifoParam+0x70>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020bf 	.word	0x080020bf
 80020b0:	080020b9 	.word	0x080020b9
 80020b4:	080020d1 	.word	0x080020d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
      break;
 80020bc:	e030      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d025      	beq.n	8002116 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ce:	e022      	b.n	8002116 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d8:	d11f      	bne.n	800211a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020de:	e01c      	b.n	800211a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d903      	bls.n	80020ee <DMA_CheckFifoParam+0xb6>
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d003      	beq.n	80020f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020ec:	e018      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	73fb      	strb	r3, [r7, #15]
      break;
 80020f2:	e015      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00e      	beq.n	800211e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e00b      	b.n	800211e <DMA_CheckFifoParam+0xe6>
      break;
 8002106:	bf00      	nop
 8002108:	e00a      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
 800210c:	e008      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e006      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e004      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e002      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;   
 800211a:	bf00      	nop
 800211c:	e000      	b.n	8002120 <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
    }
  } 
  
  return status; 
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	; 0x24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e16b      	b.n	8002424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 815a 	bne.w	800241e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80b4 	beq.w	800241e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b60      	ldr	r3, [pc, #384]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a5f      	ldr	r2, [pc, #380]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b5d      	ldr	r3, [pc, #372]	; (800243c <HAL_GPIO_Init+0x30c>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d2:	4a5b      	ldr	r2, [pc, #364]	; (8002440 <HAL_GPIO_Init+0x310>)
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	089b      	lsrs	r3, r3, #2
 80022d8:	3302      	adds	r3, #2
 80022da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	220f      	movs	r2, #15
 80022ea:	fa02 f303 	lsl.w	r3, r2, r3
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_GPIO_Init+0x314>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d02b      	beq.n	8002356 <HAL_GPIO_Init+0x226>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a51      	ldr	r2, [pc, #324]	; (8002448 <HAL_GPIO_Init+0x318>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d025      	beq.n	8002352 <HAL_GPIO_Init+0x222>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a50      	ldr	r2, [pc, #320]	; (800244c <HAL_GPIO_Init+0x31c>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d01f      	beq.n	800234e <HAL_GPIO_Init+0x21e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a4f      	ldr	r2, [pc, #316]	; (8002450 <HAL_GPIO_Init+0x320>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d019      	beq.n	800234a <HAL_GPIO_Init+0x21a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a4e      	ldr	r2, [pc, #312]	; (8002454 <HAL_GPIO_Init+0x324>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_GPIO_Init+0x216>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <HAL_GPIO_Init+0x328>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00d      	beq.n	8002342 <HAL_GPIO_Init+0x212>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4c      	ldr	r2, [pc, #304]	; (800245c <HAL_GPIO_Init+0x32c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d007      	beq.n	800233e <HAL_GPIO_Init+0x20e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_GPIO_Init+0x330>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_GPIO_Init+0x20a>
 8002336:	2307      	movs	r3, #7
 8002338:	e00e      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800233a:	2308      	movs	r3, #8
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800233e:	2306      	movs	r3, #6
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x228>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x228>
 8002356:	2300      	movs	r3, #0
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002368:	4935      	ldr	r1, [pc, #212]	; (8002440 <HAL_GPIO_Init+0x310>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002376:	4b3b      	ldr	r3, [pc, #236]	; (8002464 <HAL_GPIO_Init+0x334>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239a:	4a32      	ldr	r2, [pc, #200]	; (8002464 <HAL_GPIO_Init+0x334>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a0:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ca:	4b26      	ldr	r3, [pc, #152]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f4:	4b1b      	ldr	r3, [pc, #108]	; (8002464 <HAL_GPIO_Init+0x334>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_GPIO_Init+0x334>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f ae90 	bls.w	800214c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40013800 	.word	0x40013800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40021c00 	.word	0x40021c00
 8002464:	40013c00 	.word	0x40013c00

08002468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	4013      	ands	r3, r2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
 8002484:	e001      	b.n	800248a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800248a:	7bfb      	ldrb	r3, [r7, #15]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	807b      	strh	r3, [r7, #2]
 80024a4:	4613      	mov	r3, r2
 80024a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ae:	887a      	ldrh	r2, [r7, #2]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024b4:	e003      	b.n	80024be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024b6:	887b      	ldrh	r3, [r7, #2]
 80024b8:	041a      	lsls	r2, r3, #16
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	619a      	str	r2, [r3, #24]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024cc:	b08f      	sub	sp, #60	; 0x3c
 80024ce:	af0a      	add	r7, sp, #40	; 0x28
 80024d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e054      	b.n	8002586 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f00a ff06 	bl	800d308 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f004 fa74 	bl	8006a08 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	687e      	ldr	r6, [r7, #4]
 8002528:	466d      	mov	r5, sp
 800252a:	f106 0410 	add.w	r4, r6, #16
 800252e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800253a:	e885 0003 	stmia.w	r5, {r0, r1}
 800253e:	1d33      	adds	r3, r6, #4
 8002540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	f004 f9ee 	bl	8006924 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f004 fa6b 	bl	8006a2a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	687e      	ldr	r6, [r7, #4]
 800255c:	466d      	mov	r5, sp
 800255e:	f106 0410 	add.w	r4, r6, #16
 8002562:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002564:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800256a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800256e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002572:	1d33      	adds	r3, r6, #4
 8002574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002576:	6838      	ldr	r0, [r7, #0]
 8002578:	f004 fbf4 	bl	8006d64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800258e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800258e:	b590      	push	{r4, r7, lr}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	af04      	add	r7, sp, #16
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4603      	mov	r3, r0
 800259e:	70fb      	strb	r3, [r7, #3]
 80025a0:	460b      	mov	r3, r1
 80025a2:	70bb      	strb	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_HCD_HC_Init+0x28>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e076      	b.n	80026a4 <HAL_HCD_HC_Init+0x116>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	212c      	movs	r1, #44	; 0x2c
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	333d      	adds	r3, #61	; 0x3d
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3338      	adds	r3, #56	; 0x38
 80025de:	787a      	ldrb	r2, [r7, #1]
 80025e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	212c      	movs	r1, #44	; 0x2c
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	4413      	add	r3, r2
 80025ee:	3340      	adds	r3, #64	; 0x40
 80025f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025f2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3339      	adds	r3, #57	; 0x39
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	333f      	adds	r3, #63	; 0x3f
 8002614:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002618:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	78ba      	ldrb	r2, [r7, #2]
 800261e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002622:	b2d0      	uxtb	r0, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	212c      	movs	r1, #44	; 0x2c
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	4413      	add	r3, r2
 800262e:	333a      	adds	r3, #58	; 0x3a
 8002630:	4602      	mov	r2, r0
 8002632:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002634:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002638:	2b00      	cmp	r3, #0
 800263a:	da09      	bge.n	8002650 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800263c:	78fb      	ldrb	r3, [r7, #3]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	333b      	adds	r3, #59	; 0x3b
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
 800264e:	e008      	b.n	8002662 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	212c      	movs	r1, #44	; 0x2c
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	333b      	adds	r3, #59	; 0x3b
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	212c      	movs	r1, #44	; 0x2c
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4413      	add	r3, r2
 800266e:	333c      	adds	r3, #60	; 0x3c
 8002670:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002674:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	787c      	ldrb	r4, [r7, #1]
 800267c:	78ba      	ldrb	r2, [r7, #2]
 800267e:	78f9      	ldrb	r1, [r7, #3]
 8002680:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	4623      	mov	r3, r4
 8002692:	f004 fced 	bl	8007070 <USB_HC_Init>
 8002696:	4603      	mov	r3, r0
 8002698:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}

080026ac <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_HCD_HC_Halt+0x1e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e00f      	b.n	80026ea <HAL_HCD_HC_Halt+0x3e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	4611      	mov	r1, r2
 80026da:	4618      	mov	r0, r3
 80026dc:	f004 ff3d 	bl	800755a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	4608      	mov	r0, r1
 80026fe:	4611      	mov	r1, r2
 8002700:	461a      	mov	r2, r3
 8002702:	4603      	mov	r3, r0
 8002704:	70fb      	strb	r3, [r7, #3]
 8002706:	460b      	mov	r3, r1
 8002708:	70bb      	strb	r3, [r7, #2]
 800270a:	4613      	mov	r3, r2
 800270c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	333b      	adds	r3, #59	; 0x3b
 800271c:	78ba      	ldrb	r2, [r7, #2]
 800271e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	333f      	adds	r3, #63	; 0x3f
 800272e:	787a      	ldrb	r2, [r7, #1]
 8002730:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002732:	7c3b      	ldrb	r3, [r7, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d112      	bne.n	800275e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	212c      	movs	r1, #44	; 0x2c
 800273e:	fb01 f303 	mul.w	r3, r1, r3
 8002742:	4413      	add	r3, r2
 8002744:	3342      	adds	r3, #66	; 0x42
 8002746:	2203      	movs	r2, #3
 8002748:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	212c      	movs	r1, #44	; 0x2c
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	4413      	add	r3, r2
 8002756:	333d      	adds	r3, #61	; 0x3d
 8002758:	7f3a      	ldrb	r2, [r7, #28]
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e008      	b.n	8002770 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	212c      	movs	r1, #44	; 0x2c
 8002764:	fb01 f303 	mul.w	r3, r1, r3
 8002768:	4413      	add	r3, r2
 800276a:	3342      	adds	r3, #66	; 0x42
 800276c:	2202      	movs	r2, #2
 800276e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b03      	cmp	r3, #3
 8002774:	f200 80c6 	bhi.w	8002904 <HAL_HCD_HC_SubmitRequest+0x210>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	08002791 	.word	0x08002791
 8002784:	080028f1 	.word	0x080028f1
 8002788:	080027f5 	.word	0x080027f5
 800278c:	08002873 	.word	0x08002873
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002790:	7c3b      	ldrb	r3, [r7, #16]
 8002792:	2b01      	cmp	r3, #1
 8002794:	f040 80b8 	bne.w	8002908 <HAL_HCD_HC_SubmitRequest+0x214>
 8002798:	78bb      	ldrb	r3, [r7, #2]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 80b4 	bne.w	8002908 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80027a0:	8b3b      	ldrh	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3355      	adds	r3, #85	; 0x55
 80027b4:	2201      	movs	r2, #1
 80027b6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	212c      	movs	r1, #44	; 0x2c
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3355      	adds	r3, #85	; 0x55
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d109      	bne.n	80027e0 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	212c      	movs	r1, #44	; 0x2c
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	3342      	adds	r3, #66	; 0x42
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027de:	e093      	b.n	8002908 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3342      	adds	r3, #66	; 0x42
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
      break;
 80027f2:	e089      	b.n	8002908 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027f4:	78bb      	ldrb	r3, [r7, #2]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d11d      	bne.n	8002836 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	3355      	adds	r3, #85	; 0x55
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	212c      	movs	r1, #44	; 0x2c
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	4413      	add	r3, r2
 800281a:	3342      	adds	r3, #66	; 0x42
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002820:	e073      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	212c      	movs	r1, #44	; 0x2c
 8002828:	fb01 f303 	mul.w	r3, r1, r3
 800282c:	4413      	add	r3, r2
 800282e:	3342      	adds	r3, #66	; 0x42
 8002830:	2202      	movs	r2, #2
 8002832:	701a      	strb	r2, [r3, #0]
      break;
 8002834:	e069      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3354      	adds	r3, #84	; 0x54
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3342      	adds	r3, #66	; 0x42
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
      break;
 800285c:	e055      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	3342      	adds	r3, #66	; 0x42
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]
      break;
 8002870:	e04b      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002872:	78bb      	ldrb	r3, [r7, #2]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11d      	bne.n	80028b4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3355      	adds	r3, #85	; 0x55
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3342      	adds	r3, #66	; 0x42
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800289e:	e034      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3342      	adds	r3, #66	; 0x42
 80028ae:	2202      	movs	r2, #2
 80028b0:	701a      	strb	r2, [r3, #0]
      break;
 80028b2:	e02a      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3354      	adds	r3, #84	; 0x54
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3342      	adds	r3, #66	; 0x42
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
      break;
 80028da:	e016      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	212c      	movs	r1, #44	; 0x2c
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	4413      	add	r3, r2
 80028e8:	3342      	adds	r3, #66	; 0x42
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]
      break;
 80028ee:	e00c      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3342      	adds	r3, #66	; 0x42
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
      break;
 8002902:	e002      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002908:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	3344      	adds	r3, #68	; 0x44
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	8b3a      	ldrh	r2, [r7, #24]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	202c      	movs	r0, #44	; 0x2c
 8002924:	fb00 f303 	mul.w	r3, r0, r3
 8002928:	440b      	add	r3, r1
 800292a:	334c      	adds	r3, #76	; 0x4c
 800292c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	3360      	adds	r3, #96	; 0x60
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3350      	adds	r3, #80	; 0x50
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3339      	adds	r3, #57	; 0x39
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	222c      	movs	r2, #44	; 0x2c
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	3338      	adds	r3, #56	; 0x38
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	18d1      	adds	r1, r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	f004 fc90 	bl	80072b4 <USB_HC_StartXfer>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop

080029a0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 f991 	bl	8006cde <USB_GetMode>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b01      	cmp	r3, #1
 80029c0:	f040 80f6 	bne.w	8002bb0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f004 f975 	bl	8006cb8 <USB_ReadInterrupts>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80ec 	beq.w	8002bae <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 f96c 	bl	8006cb8 <USB_ReadInterrupts>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ea:	d104      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f004 f95c 	bl	8006cb8 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0a:	d104      	bne.n	8002a16 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 f94c 	bl	8006cb8 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2a:	d104      	bne.n	8002a36 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 f93c 	bl	8006cb8 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d103      	bne.n	8002a52 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f004 f92e 	bl	8006cb8 <USB_ReadInterrupts>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a66:	d11c      	bne.n	8002aa2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a70:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a82:	2110      	movs	r1, #16
 8002a84:	6938      	ldr	r0, [r7, #16]
 8002a86:	f004 f81d 	bl	8006ac4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a8a:	6938      	ldr	r0, [r7, #16]
 8002a8c:	f004 f84e 	bl	8006b2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2101      	movs	r1, #1
 8002a96:	4618      	mov	r0, r3
 8002a98:	f004 fa24 	bl	8006ee4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f00a fcb1 	bl	800d404 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f906 	bl	8006cb8 <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab6:	d102      	bne.n	8002abe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f001 f89e 	bl	8003bfa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 f8f8 	bl	8006cb8 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d106      	bne.n	8002ae0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f00a fc7a 	bl	800d3cc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2208      	movs	r2, #8
 8002ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f004 f8e7 	bl	8006cb8 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d101      	bne.n	8002af8 <HAL_HCD_IRQHandler+0x158>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_HCD_IRQHandler+0x15a>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0210 	bic.w	r2, r2, #16
 8002b0c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 ffa1 	bl	8003a56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0210 	orr.w	r2, r2, #16
 8002b22:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f004 f8c5 	bl	8006cb8 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b38:	d13a      	bne.n	8002bb0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f004 fcfa 	bl	8007538 <USB_HC_ReadInterrupt>
 8002b44:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	e025      	b.n	8002b98 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b76:	d106      	bne.n	8002b86 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8ab 	bl	8002cda <HCD_HC_IN_IRQHandler>
 8002b84:	e005      	b.n	8002b92 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fbf9 	bl	8003384 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	3301      	adds	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3d4      	bcc.n	8002b4c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	e000      	b.n	8002bb0 <HAL_HCD_IRQHandler+0x210>
      return;
 8002bae:	bf00      	nop
    }
  }
}
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_HCD_Start+0x16>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e013      	b.n	8002bf4 <HAL_HCD_Start+0x3e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2101      	movs	r1, #1
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 f9e6 	bl	8006fac <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fefe 	bl	80069e6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_HCD_Stop+0x16>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e00d      	b.n	8002c2e <HAL_HCD_Stop+0x32>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f004 fdd4 	bl	80077cc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f004 f988 	bl	8006f58 <USB_ResetPort>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c5e:	78fb      	ldrb	r3, [r7, #3]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3360      	adds	r3, #96	; 0x60
 8002c6c:	781b      	ldrb	r3, [r3, #0]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3350      	adds	r3, #80	; 0x50
 8002c94:	681b      	ldr	r3, [r3, #0]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 f9cc 	bl	800704c <USB_GetCurrentFrame>
 8002cb4:	4603      	mov	r3, r0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 f9a7 	bl	800701e <USB_GetHostSpeed>
 8002cd0:	4603      	mov	r3, r0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d11a      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	015a      	lsls	r2, r3, #5
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d16:	461a      	mov	r2, r3
 8002d18:	2304      	movs	r3, #4
 8002d1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3361      	adds	r3, #97	; 0x61
 8002d2a:	2206      	movs	r2, #6
 8002d2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f004 fc0e 	bl	800755a <USB_HC_Halt>
 8002d3e:	e0af      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d56:	d11b      	bne.n	8002d90 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3361      	adds	r3, #97	; 0x61
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fbe6 	bl	800755a <USB_HC_Halt>
 8002d8e:	e087      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	d109      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	2320      	movs	r3, #32
 8002db6:	6093      	str	r3, [r2, #8]
 8002db8:	e072      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0308 	and.w	r3, r3, #8
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d11a      	bne.n	8002e06 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2308      	movs	r3, #8
 8002de0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3361      	adds	r3, #97	; 0x61
 8002df0:	2205      	movs	r2, #5
 8002df2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 fbab 	bl	800755a <USB_HC_Halt>
 8002e04:	e04c      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	d11b      	bne.n	8002e56 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3361      	adds	r3, #97	; 0x61
 8002e40:	2208      	movs	r2, #8
 8002e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f004 fb83 	bl	800755a <USB_HC_Halt>
 8002e54:	e024      	b.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b80      	cmp	r3, #128	; 0x80
 8002e6a:	d119      	bne.n	8002ea0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3361      	adds	r3, #97	; 0x61
 8002e8c:	2206      	movs	r2, #6
 8002e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fb5d 	bl	800755a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb6:	d112      	bne.n	8002ede <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f004 fb49 	bl	800755a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002eda:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002edc:	e24e      	b.n	800337c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	015a      	lsls	r2, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	f040 80df 	bne.w	80030b4 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d019      	beq.n	8002f32 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	212c      	movs	r1, #44	; 0x2c
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3348      	adds	r3, #72	; 0x48
 8002f0c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0159      	lsls	r1, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	440b      	add	r3, r1
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f20:	1ad2      	subs	r2, r2, r3
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	202c      	movs	r0, #44	; 0x2c
 8002f28:	fb00 f303 	mul.w	r3, r0, r3
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3361      	adds	r3, #97	; 0x61
 8002f40:	2201      	movs	r2, #1
 8002f42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	335c      	adds	r3, #92	; 0x5c
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2301      	movs	r3, #1
 8002f66:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	212c      	movs	r1, #44	; 0x2c
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	333f      	adds	r3, #63	; 0x3f
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	333f      	adds	r3, #63	; 0x3f
 8002f8a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d111      	bne.n	8002fb4 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	4611      	mov	r1, r2
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 fadd 	bl	800755a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	461a      	mov	r2, r3
 8002fae:	2310      	movs	r3, #16
 8002fb0:	6093      	str	r3, [r2, #8]
 8002fb2:	e03a      	b.n	800302a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	212c      	movs	r1, #44	; 0x2c
 8002fba:	fb01 f303 	mul.w	r3, r1, r3
 8002fbe:	4413      	add	r3, r2
 8002fc0:	333f      	adds	r3, #63	; 0x3f
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d009      	beq.n	8002fdc <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	333f      	adds	r3, #63	; 0x3f
 8002fd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d126      	bne.n	800302a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ffa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	b2d9      	uxtb	r1, r3
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	202c      	movs	r0, #44	; 0x2c
 8003018:	fb00 f303 	mul.w	r3, r0, r3
 800301c:	4413      	add	r3, r2
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f00a f9fb 	bl	800d420 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d12b      	bne.n	800308a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	212c      	movs	r1, #44	; 0x2c
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	4413      	add	r3, r2
 800303e:	3348      	adds	r3, #72	; 0x48
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f202 	mul.w	r2, r0, r2
 800304c:	440a      	add	r2, r1
 800304e:	3240      	adds	r2, #64	; 0x40
 8003050:	8812      	ldrh	r2, [r2, #0]
 8003052:	fbb3 f3f2 	udiv	r3, r3, r2
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 818e 	beq.w	800337c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3354      	adds	r3, #84	; 0x54
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2d8      	uxtb	r0, r3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	4602      	mov	r2, r0
 8003086:	701a      	strb	r2, [r3, #0]
}
 8003088:	e178      	b.n	800337c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3354      	adds	r3, #84	; 0x54
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	f083 0301 	eor.w	r3, r3, #1
 800309e:	b2d8      	uxtb	r0, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	212c      	movs	r1, #44	; 0x2c
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	4413      	add	r3, r2
 80030ac:	3354      	adds	r3, #84	; 0x54
 80030ae:	4602      	mov	r2, r0
 80030b0:	701a      	strb	r2, [r3, #0]
}
 80030b2:	e163      	b.n	800337c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	f040 80f6 	bne.w	80032b8 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3361      	adds	r3, #97	; 0x61
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d109      	bne.n	80030f4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3360      	adds	r3, #96	; 0x60
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	e0c9      	b.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3361      	adds	r3, #97	; 0x61
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b05      	cmp	r3, #5
 8003106:	d109      	bne.n	800311c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	2205      	movs	r2, #5
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e0b5      	b.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3361      	adds	r3, #97	; 0x61
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d009      	beq.n	8003144 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3361      	adds	r3, #97	; 0x61
 800313e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003140:	2b08      	cmp	r3, #8
 8003142:	d150      	bne.n	80031e6 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	212c      	movs	r1, #44	; 0x2c
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	4413      	add	r3, r2
 8003150:	335c      	adds	r3, #92	; 0x5c
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	202c      	movs	r0, #44	; 0x2c
 800315c:	fb00 f303 	mul.w	r3, r0, r3
 8003160:	440b      	add	r3, r1
 8003162:	335c      	adds	r3, #92	; 0x5c
 8003164:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	fb01 f303 	mul.w	r3, r1, r3
 8003170:	4413      	add	r3, r2
 8003172:	335c      	adds	r3, #92	; 0x5c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d912      	bls.n	80031a0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	335c      	adds	r3, #92	; 0x5c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2204      	movs	r2, #4
 800319c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800319e:	e073      	b.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3360      	adds	r3, #96	; 0x60
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031c8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031d0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031e4:	e050      	b.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	212c      	movs	r1, #44	; 0x2c
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	3361      	adds	r3, #97	; 0x61
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b03      	cmp	r3, #3
 80031f8:	d122      	bne.n	8003240 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3360      	adds	r3, #96	; 0x60
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003222:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800322a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e023      	b.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	212c      	movs	r1, #44	; 0x2c
 8003246:	fb01 f303 	mul.w	r3, r1, r3
 800324a:	4413      	add	r3, r2
 800324c:	3361      	adds	r3, #97	; 0x61
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b07      	cmp	r3, #7
 8003252:	d119      	bne.n	8003288 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	212c      	movs	r1, #44	; 0x2c
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	4413      	add	r3, r2
 8003260:	335c      	adds	r3, #92	; 0x5c
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	202c      	movs	r0, #44	; 0x2c
 800326c:	fb00 f303 	mul.w	r3, r0, r3
 8003270:	440b      	add	r3, r1
 8003272:	335c      	adds	r3, #92	; 0x5c
 8003274:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	212c      	movs	r1, #44	; 0x2c
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	4413      	add	r3, r2
 8003282:	3360      	adds	r3, #96	; 0x60
 8003284:	2204      	movs	r2, #4
 8003286:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2302      	movs	r3, #2
 8003298:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	b2d9      	uxtb	r1, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	202c      	movs	r0, #44	; 0x2c
 80032a4:	fb00 f303 	mul.w	r3, r0, r3
 80032a8:	4413      	add	r3, r2
 80032aa:	3360      	adds	r3, #96	; 0x60
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f00a f8b5 	bl	800d420 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032b6:	e061      	b.n	800337c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d156      	bne.n	800337c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	212c      	movs	r1, #44	; 0x2c
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	333f      	adds	r3, #63	; 0x3f
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d111      	bne.n	8003306 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f004 f92b 	bl	800755a <USB_HC_Halt>
 8003304:	e031      	b.n	800336a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	212c      	movs	r1, #44	; 0x2c
 800330c:	fb01 f303 	mul.w	r3, r1, r3
 8003310:	4413      	add	r3, r2
 8003312:	333f      	adds	r3, #63	; 0x3f
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	333f      	adds	r3, #63	; 0x3f
 8003328:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800332a:	2b02      	cmp	r3, #2
 800332c:	d11d      	bne.n	800336a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	335c      	adds	r3, #92	; 0x5c
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d110      	bne.n	800336a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	212c      	movs	r1, #44	; 0x2c
 800334e:	fb01 f303 	mul.w	r3, r1, r3
 8003352:	4413      	add	r3, r2
 8003354:	3361      	adds	r3, #97	; 0x61
 8003356:	2203      	movs	r2, #3
 8003358:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f004 f8f8 	bl	800755a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4413      	add	r3, r2
 8003372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003376:	461a      	mov	r2, r3
 8003378:	2310      	movs	r3, #16
 800337a:	6093      	str	r3, [r2, #8]
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11a      	bne.n	80033ea <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c0:	461a      	mov	r2, r3
 80033c2:	2304      	movs	r3, #4
 80033c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3361      	adds	r3, #97	; 0x61
 80033d4:	2206      	movs	r2, #6
 80033d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	4611      	mov	r1, r2
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 f8b9 	bl	800755a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80033e8:	e331      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0320 	and.w	r3, r3, #32
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d12e      	bne.n	800345e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	461a      	mov	r2, r3
 800340e:	2320      	movs	r3, #32
 8003410:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	212c      	movs	r1, #44	; 0x2c
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	333d      	adds	r3, #61	; 0x3d
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b01      	cmp	r3, #1
 8003424:	f040 8313 	bne.w	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	333d      	adds	r3, #61	; 0x3d
 8003436:	2200      	movs	r2, #0
 8003438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	2202      	movs	r2, #2
 800344a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f004 f87f 	bl	800755a <USB_HC_Halt>
}
 800345c:	e2f7      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003474:	d112      	bne.n	800349c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	461a      	mov	r2, r3
 8003484:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003488:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f004 f860 	bl	800755a <USB_HC_Halt>
}
 800349a:	e2d8      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d140      	bne.n	8003534 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	335c      	adds	r3, #92	; 0x5c
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	d111      	bne.n	80034fe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	212c      	movs	r1, #44	; 0x2c
 80034e0:	fb01 f303 	mul.w	r3, r1, r3
 80034e4:	4413      	add	r3, r2
 80034e6:	333d      	adds	r3, #61	; 0x3d
 80034e8:	2201      	movs	r2, #1
 80034ea:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f8:	461a      	mov	r2, r3
 80034fa:	2340      	movs	r3, #64	; 0x40
 80034fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	461a      	mov	r2, r3
 800350c:	2301      	movs	r3, #1
 800350e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3361      	adds	r3, #97	; 0x61
 800351e:	2201      	movs	r2, #1
 8003520:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f004 f814 	bl	800755a <USB_HC_Halt>
}
 8003532:	e28c      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b40      	cmp	r3, #64	; 0x40
 8003548:	d12c      	bne.n	80035a4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3361      	adds	r3, #97	; 0x61
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	333d      	adds	r3, #61	; 0x3d
 800356a:	2201      	movs	r2, #1
 800356c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	4611      	mov	r1, r2
 800358a:	4618      	mov	r0, r3
 800358c:	f003 ffe5 	bl	800755a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	2340      	movs	r3, #64	; 0x40
 80035a0:	6093      	str	r3, [r2, #8]
}
 80035a2:	e254      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11a      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2308      	movs	r3, #8
 80035ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	212c      	movs	r1, #44	; 0x2c
 80035d2:	fb01 f303 	mul.w	r3, r1, r3
 80035d6:	4413      	add	r3, r2
 80035d8:	3361      	adds	r3, #97	; 0x61
 80035da:	2205      	movs	r2, #5
 80035dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	4611      	mov	r1, r2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 ffb6 	bl	800755a <USB_HC_Halt>
}
 80035ee:	e22e      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	2b10      	cmp	r3, #16
 8003604:	d140      	bne.n	8003688 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	212c      	movs	r1, #44	; 0x2c
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	4413      	add	r3, r2
 8003612:	335c      	adds	r3, #92	; 0x5c
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3361      	adds	r3, #97	; 0x61
 8003626:	2203      	movs	r2, #3
 8003628:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	333d      	adds	r3, #61	; 0x3d
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d112      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	333c      	adds	r3, #60	; 0x3c
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d108      	bne.n	8003664 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	333d      	adds	r3, #61	; 0x3d
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f003 ff73 	bl	800755a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	2310      	movs	r3, #16
 8003684:	6093      	str	r3, [r2, #8]
}
 8003686:	e1e2      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d164      	bne.n	8003768 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d111      	bne.n	80036ca <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	212c      	movs	r1, #44	; 0x2c
 80036ac:	fb01 f303 	mul.w	r3, r1, r3
 80036b0:	4413      	add	r3, r2
 80036b2:	3361      	adds	r3, #97	; 0x61
 80036b4:	2206      	movs	r2, #6
 80036b6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f003 ff49 	bl	800755a <USB_HC_Halt>
 80036c8:	e044      	b.n	8003754 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	335c      	adds	r3, #92	; 0x5c
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	1c5a      	adds	r2, r3, #1
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	202c      	movs	r0, #44	; 0x2c
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	440b      	add	r3, r1
 80036e8:	335c      	adds	r3, #92	; 0x5c
 80036ea:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	335c      	adds	r3, #92	; 0x5c
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d920      	bls.n	8003742 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	335c      	adds	r3, #92	; 0x5c
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3360      	adds	r3, #96	; 0x60
 8003720:	2204      	movs	r2, #4
 8003722:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	b2d9      	uxtb	r1, r3
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	202c      	movs	r0, #44	; 0x2c
 800372e:	fb00 f303 	mul.w	r3, r0, r3
 8003732:	4413      	add	r3, r2
 8003734:	3360      	adds	r3, #96	; 0x60
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f009 fe70 	bl	800d420 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003740:	e008      	b.n	8003754 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	3360      	adds	r3, #96	; 0x60
 8003750:	2202      	movs	r2, #2
 8003752:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	6093      	str	r3, [r2, #8]
}
 8003766:	e172      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800377e:	d11b      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3361      	adds	r3, #97	; 0x61
 800378e:	2208      	movs	r2, #8
 8003790:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f003 fedc 	bl	800755a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b4:	6093      	str	r3, [r2, #8]
}
 80037b6:	e14a      	b.n	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	f040 813f 	bne.w	8003a4e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3361      	adds	r3, #97	; 0x61
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d17d      	bne.n	80038e0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3360      	adds	r3, #96	; 0x60
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	333f      	adds	r3, #63	; 0x3f
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d00a      	beq.n	8003820 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	212c      	movs	r1, #44	; 0x2c
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	4413      	add	r3, r2
 8003816:	333f      	adds	r3, #63	; 0x3f
 8003818:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800381a:	2b03      	cmp	r3, #3
 800381c:	f040 8100 	bne.w	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d113      	bne.n	8003850 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3355      	adds	r3, #85	; 0x55
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	f083 0301 	eor.w	r3, r3, #1
 800383c:	b2d8      	uxtb	r0, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	212c      	movs	r1, #44	; 0x2c
 8003844:	fb01 f303 	mul.w	r3, r1, r3
 8003848:	4413      	add	r3, r2
 800384a:	3355      	adds	r3, #85	; 0x55
 800384c:	4602      	mov	r2, r0
 800384e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	2b01      	cmp	r3, #1
 8003856:	f040 80e3 	bne.w	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	334c      	adds	r3, #76	; 0x4c
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 80d8 	beq.w	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	334c      	adds	r3, #76	; 0x4c
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	202c      	movs	r0, #44	; 0x2c
 8003886:	fb00 f202 	mul.w	r2, r0, r2
 800388a:	440a      	add	r2, r1
 800388c:	3240      	adds	r2, #64	; 0x40
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	4413      	add	r3, r2
 8003892:	3b01      	subs	r3, #1
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	202c      	movs	r0, #44	; 0x2c
 800389a:	fb00 f202 	mul.w	r2, r0, r2
 800389e:	440a      	add	r2, r1
 80038a0:	3240      	adds	r2, #64	; 0x40
 80038a2:	8812      	ldrh	r2, [r2, #0]
 80038a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 80b5 	beq.w	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3355      	adds	r3, #85	; 0x55
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2d8      	uxtb	r0, r3
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3355      	adds	r3, #85	; 0x55
 80038da:	4602      	mov	r2, r0
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e09f      	b.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	212c      	movs	r1, #44	; 0x2c
 80038e6:	fb01 f303 	mul.w	r3, r1, r3
 80038ea:	4413      	add	r3, r2
 80038ec:	3361      	adds	r3, #97	; 0x61
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d109      	bne.n	8003908 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	3360      	adds	r3, #96	; 0x60
 8003902:	2202      	movs	r2, #2
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e08b      	b.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3361      	adds	r3, #97	; 0x61
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d109      	bne.n	8003930 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3360      	adds	r3, #96	; 0x60
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e077      	b.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3361      	adds	r3, #97	; 0x61
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b05      	cmp	r3, #5
 8003942:	d109      	bne.n	8003958 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e063      	b.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3361      	adds	r3, #97	; 0x61
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b06      	cmp	r3, #6
 800396a:	d009      	beq.n	8003980 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3361      	adds	r3, #97	; 0x61
 800397a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800397c:	2b08      	cmp	r3, #8
 800397e:	d14f      	bne.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	335c      	adds	r3, #92	; 0x5c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	202c      	movs	r0, #44	; 0x2c
 8003998:	fb00 f303 	mul.w	r3, r0, r3
 800399c:	440b      	add	r3, r1
 800399e:	335c      	adds	r3, #92	; 0x5c
 80039a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	212c      	movs	r1, #44	; 0x2c
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	4413      	add	r3, r2
 80039ae:	335c      	adds	r3, #92	; 0x5c
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d912      	bls.n	80039dc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	335c      	adds	r3, #92	; 0x5c
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3360      	adds	r3, #96	; 0x60
 80039d6:	2204      	movs	r2, #4
 80039d8:	701a      	strb	r2, [r3, #0]
 80039da:	e021      	b.n	8003a20 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3360      	adds	r3, #96	; 0x60
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	015a      	lsls	r2, r3, #5
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a04:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a0c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2302      	movs	r3, #2
 8003a30:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	b2d9      	uxtb	r1, r3
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	202c      	movs	r0, #44	; 0x2c
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	3360      	adds	r3, #96	; 0x60
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f009 fce9 	bl	800d420 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a4e:	bf00      	nop
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b08a      	sub	sp, #40	; 0x28
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d004      	beq.n	8003a9c <HCD_RXQLVL_IRQHandler+0x46>
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b05      	cmp	r3, #5
 8003a96:	f000 80a9 	beq.w	8003bec <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a9a:	e0aa      	b.n	8003bf2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 80a6 	beq.w	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	212c      	movs	r1, #44	; 0x2c
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	3344      	adds	r3, #68	; 0x44
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 809b 	beq.w	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3350      	adds	r3, #80	; 0x50
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	441a      	add	r2, r3
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	202c      	movs	r0, #44	; 0x2c
 8003ad4:	fb00 f303 	mul.w	r3, r0, r3
 8003ad8:	440b      	add	r3, r1
 8003ada:	334c      	adds	r3, #76	; 0x4c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d87a      	bhi.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	3344      	adds	r3, #68	; 0x44
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	b292      	uxth	r2, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	f003 f884 	bl	8006c08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3344      	adds	r3, #68	; 0x44
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	441a      	add	r2, r3
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	202c      	movs	r0, #44	; 0x2c
 8003b1a:	fb00 f303 	mul.w	r3, r0, r3
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	; 0x44
 8003b22:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3350      	adds	r3, #80	; 0x50
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	441a      	add	r2, r3
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	202c      	movs	r0, #44	; 0x2c
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	440b      	add	r3, r1
 8003b44:	3350      	adds	r3, #80	; 0x50
 8003b46:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	0cdb      	lsrs	r3, r3, #19
 8003b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b5c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	212c      	movs	r1, #44	; 0x2c
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	4413      	add	r3, r2
 8003b6a:	3340      	adds	r3, #64	; 0x40
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d13c      	bne.n	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d039      	beq.n	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b92:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b9a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	212c      	movs	r1, #44	; 0x2c
 8003bb4:	fb01 f303 	mul.w	r3, r1, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	3354      	adds	r3, #84	; 0x54
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2d8      	uxtb	r0, r3
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3354      	adds	r3, #84	; 0x54
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	701a      	strb	r2, [r3, #0]
      break;
 8003bd6:	e00b      	b.n	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	212c      	movs	r1, #44	; 0x2c
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	3360      	adds	r3, #96	; 0x60
 8003be6:	2204      	movs	r2, #4
 8003be8:	701a      	strb	r2, [r3, #0]
      break;
 8003bea:	e001      	b.n	8003bf0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bec:	bf00      	nop
 8003bee:	e000      	b.n	8003bf2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bf0:	bf00      	nop
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b086      	sub	sp, #24
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c26:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d10b      	bne.n	8003c4a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d102      	bne.n	8003c42 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f009 fbd3 	bl	800d3e8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d132      	bne.n	8003cba <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f043 0308 	orr.w	r3, r3, #8
 8003c5a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d126      	bne.n	8003cb4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d113      	bne.n	8003c96 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c78:	d106      	bne.n	8003c88 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2102      	movs	r1, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f003 f92f 	bl	8006ee4 <USB_InitFSLSPClkSel>
 8003c86:	e011      	b.n	8003cac <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 f928 	bl	8006ee4 <USB_InitFSLSPClkSel>
 8003c94:	e00a      	b.n	8003cac <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d106      	bne.n	8003cac <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003caa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f009 fbc5 	bl	800d43c <HAL_HCD_PortEnabled_Callback>
 8003cb2:	e002      	b.n	8003cba <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f009 fbcf 	bl	800d458 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d103      	bne.n	8003ccc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f043 0320 	orr.w	r3, r3, #32
 8003cca:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	6013      	str	r3, [r2, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e12b      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd f9b8 	bl	800107c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	; 0x24
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d44:	f002 fc6e 	bl	8006624 <HAL_RCC_GetPCLK1Freq>
 8003d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a81      	ldr	r2, [pc, #516]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d807      	bhi.n	8003d64 <HAL_I2C_Init+0x84>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a80      	ldr	r2, [pc, #512]	; (8003f58 <HAL_I2C_Init+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e006      	b.n	8003d72 <HAL_I2C_Init+0x92>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a7d      	ldr	r2, [pc, #500]	; (8003f5c <HAL_I2C_Init+0x27c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0e7      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a78      	ldr	r2, [pc, #480]	; (8003f60 <HAL_I2C_Init+0x280>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9b      	lsrs	r3, r3, #18
 8003d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d802      	bhi.n	8003db4 <HAL_I2C_Init+0xd4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	e009      	b.n	8003dc8 <HAL_I2C_Init+0xe8>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	4a69      	ldr	r2, [pc, #420]	; (8003f64 <HAL_I2C_Init+0x284>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	495c      	ldr	r1, [pc, #368]	; (8003f54 <HAL_I2C_Init+0x274>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d819      	bhi.n	8003e1c <HAL_I2C_Init+0x13c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e59      	subs	r1, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_I2C_Init+0x138>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e59      	subs	r1, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	e051      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e04f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_I2C_Init+0x168>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e012      	b.n	8003e6e <HAL_I2C_Init+0x18e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x196>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_I2C_Init+0x1bc>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e58      	subs	r0, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6809      	ldr	r1, [r1, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6911      	ldr	r1, [r2, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	000186a0 	.word	0x000186a0
 8003f58:	001e847f 	.word	0x001e847f
 8003f5c:	003d08ff 	.word	0x003d08ff
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	460b      	mov	r3, r1
 8003f76:	817b      	strh	r3, [r7, #10]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f7c:	f7fd fbb6 	bl	80016ec <HAL_GetTick>
 8003f80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	f040 80e0 	bne.w	8004150 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2319      	movs	r3, #25
 8003f96:	2201      	movs	r2, #1
 8003f98:	4970      	ldr	r1, [pc, #448]	; (800415c <HAL_I2C_Master_Transmit+0x1f4>)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fc58 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0d3      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2C_Master_Transmit+0x50>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0cc      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d007      	beq.n	8003fde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	893a      	ldrh	r2, [r7, #8]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4a50      	ldr	r2, [pc, #320]	; (8004160 <HAL_I2C_Master_Transmit+0x1f8>)
 800401e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	6a3a      	ldr	r2, [r7, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fac2 	bl	80045b0 <I2C_MasterRequestWrite>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e08d      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004036:	2300      	movs	r3, #0
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800404c:	e066      	b.n	800411c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6a39      	ldr	r1, [r7, #32]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fcd2 	bl	80049fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00d      	beq.n	800407a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	2b04      	cmp	r3, #4
 8004064:	d107      	bne.n	8004076 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e06b      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	1c5a      	adds	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	3b01      	subs	r3, #1
 8004098:	b29a      	uxth	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d11b      	bne.n	80040f0 <HAL_I2C_Master_Transmit+0x188>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d017      	beq.n	80040f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	781a      	ldrb	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	6a39      	ldr	r1, [r7, #32]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fcc2 	bl	8004a7e <I2C_WaitOnBTFFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e01a      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d194      	bne.n	800404e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3718      	adds	r7, #24
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000

08004164 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	; 0x30
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	461a      	mov	r2, r3
 8004170:	460b      	mov	r3, r1
 8004172:	817b      	strh	r3, [r7, #10]
 8004174:	4613      	mov	r3, r2
 8004176:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004178:	f7fd fab8 	bl	80016ec <HAL_GetTick>
 800417c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	f040 820b 	bne.w	80045a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	2319      	movs	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	497c      	ldr	r1, [pc, #496]	; (8004388 <HAL_I2C_Master_Receive+0x224>)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 fb5a 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	e1fe      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2C_Master_Receive+0x50>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e1f7      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d007      	beq.n	80041da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f042 0201 	orr.w	r2, r2, #1
 80041d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2222      	movs	r2, #34	; 0x22
 80041ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2210      	movs	r2, #16
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	893a      	ldrh	r2, [r7, #8]
 800420a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a5c      	ldr	r2, [pc, #368]	; (800438c <HAL_I2C_Master_Receive+0x228>)
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa46 	bl	80046b4 <I2C_MasterRequestRead>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e1b8      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	2b00      	cmp	r3, #0
 8004238:	d113      	bne.n	8004262 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800423a:	2300      	movs	r3, #0
 800423c:	623b      	str	r3, [r7, #32]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	e18c      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004266:	2b01      	cmp	r3, #1
 8004268:	d11b      	bne.n	80042a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e16c      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d11b      	bne.n	80042e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	e14c      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	617b      	str	r3, [r7, #20]
 8004306:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004308:	e138      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b03      	cmp	r3, #3
 8004310:	f200 80f1 	bhi.w	80044f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b01      	cmp	r3, #1
 800431a:	d123      	bne.n	8004364 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fbed 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e139      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	3b01      	subs	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004362:	e10b      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b02      	cmp	r3, #2
 800436a:	d14e      	bne.n	800440a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	2200      	movs	r2, #0
 8004374:	4906      	ldr	r1, [pc, #24]	; (8004390 <HAL_I2C_Master_Receive+0x22c>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fa6a 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d008      	beq.n	8004394 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e10e      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
 8004386:	bf00      	nop
 8004388:	00100002 	.word	0x00100002
 800438c:	ffff0000 	.word	0xffff0000
 8004390:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	3b01      	subs	r3, #1
 80043d0:	b29a      	uxth	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	3b01      	subs	r3, #1
 8004402:	b29a      	uxth	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004408:	e0b8      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2200      	movs	r2, #0
 8004412:	4966      	ldr	r1, [pc, #408]	; (80045ac <HAL_I2C_Master_Receive+0x448>)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fa1b 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0bf      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691a      	ldr	r2, [r3, #16]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2200      	movs	r2, #0
 800446e:	494f      	ldr	r1, [pc, #316]	; (80045ac <HAL_I2C_Master_Receive+0x448>)
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f9ed 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e091      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	691a      	ldr	r2, [r3, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	1c5a      	adds	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044f4:	e042      	b.n	800457c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fb00 	bl	8004b00 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e04c      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d118      	bne.n	800457c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f aec2 	bne.w	800430a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3728      	adds	r7, #40	; 0x28
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	00010004 	.word	0x00010004

080045b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d006      	beq.n	80045da <I2C_MasterRequestWrite+0x2a>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d003      	beq.n	80045da <I2C_MasterRequestWrite+0x2a>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e00b      	b.n	8004604 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b12      	cmp	r3, #18
 80045f2:	d107      	bne.n	8004604 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f91d 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00d      	beq.n	8004638 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800462a:	d103      	bne.n	8004634 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e035      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004640:	d108      	bne.n	8004654 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004642:	897b      	ldrh	r3, [r7, #10]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004650:	611a      	str	r2, [r3, #16]
 8004652:	e01b      	b.n	800468c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	11db      	asrs	r3, r3, #7
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0306 	and.w	r3, r3, #6
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f063 030f 	orn	r3, r3, #15
 8004664:	b2da      	uxtb	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <I2C_MasterRequestWrite+0xfc>)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f943 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e010      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004682:	897b      	ldrh	r3, [r7, #10]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <I2C_MasterRequestWrite+0x100>)
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f933 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	00010008 	.word	0x00010008
 80046b0:	00010002 	.word	0x00010002

080046b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af02      	add	r7, sp, #8
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	460b      	mov	r3, r1
 80046c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d006      	beq.n	80046ee <I2C_MasterRequestRead+0x3a>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d003      	beq.n	80046ee <I2C_MasterRequestRead+0x3a>
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]
 80046fe:	e00b      	b.n	8004718 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	2b11      	cmp	r3, #17
 8004706:	d107      	bne.n	8004718 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004716:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f893 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00d      	beq.n	800474c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800473e:	d103      	bne.n	8004748 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004746:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e079      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004754:	d108      	bne.n	8004768 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004756:	897b      	ldrh	r3, [r7, #10]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	e05f      	b.n	8004828 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	11db      	asrs	r3, r3, #7
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0306 	and.w	r3, r3, #6
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f063 030f 	orn	r3, r3, #15
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4930      	ldr	r1, [pc, #192]	; (8004848 <I2C_MasterRequestRead+0x194>)
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f8b9 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e054      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004796:	897b      	ldrh	r3, [r7, #10]
 8004798:	b2da      	uxtb	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4929      	ldr	r1, [pc, #164]	; (800484c <I2C_MasterRequestRead+0x198>)
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 f8a9 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e044      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f831 	bl	8004850 <I2C_WaitOnFlagUntilTimeout>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00d      	beq.n	8004810 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	d103      	bne.n	800480c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f44f 7200 	mov.w	r2, #512	; 0x200
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e017      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004810:	897b      	ldrh	r3, [r7, #10]
 8004812:	11db      	asrs	r3, r3, #7
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0306 	and.w	r3, r3, #6
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f063 030e 	orn	r3, r3, #14
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4907      	ldr	r1, [pc, #28]	; (800484c <I2C_MasterRequestRead+0x198>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f865 	bl	80048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010008 	.word	0x00010008
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004860:	e025      	b.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d021      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fc ff3f 	bl	80016ec <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d116      	bne.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0220 	orr.w	r2, r3, #32
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e023      	b.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10d      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	43da      	mvns	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4013      	ands	r3, r2
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bf0c      	ite	eq
 80048ca:	2301      	moveq	r3, #1
 80048cc:	2300      	movne	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
 80048d2:	e00c      	b.n	80048ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	43da      	mvns	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4013      	ands	r3, r2
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d0b6      	beq.n	8004862 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	60f8      	str	r0, [r7, #12]
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800490c:	e051      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491c:	d123      	bne.n	8004966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004936:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e046      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d021      	beq.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fc febd 	bl	80016ec <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d116      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0220 	orr.w	r2, r3, #32
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e020      	b.n	80049f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	0c1b      	lsrs	r3, r3, #16
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d10c      	bne.n	80049d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	43da      	mvns	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bf14      	ite	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	2300      	moveq	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e00b      	b.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	43da      	mvns	r2, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4013      	ands	r3, r2
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d18d      	bne.n	800490e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a08:	e02d      	b.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f8ce 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e02d      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d021      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fc fe63 	bl	80016ec <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0220 	orr.w	r2, r3, #32
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e007      	b.n	8004a76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a70:	2b80      	cmp	r3, #128	; 0x80
 8004a72:	d1ca      	bne.n	8004a0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a8a:	e02d      	b.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f88d 	bl	8004bac <I2C_IsAcknowledgeFailed>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e02d      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa2:	d021      	beq.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa4:	f7fc fe22 	bl	80016ec <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d302      	bcc.n	8004aba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d116      	bne.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2220      	movs	r2, #32
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f043 0220 	orr.w	r2, r3, #32
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d1ca      	bne.n	8004a8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b0c:	e042      	b.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f003 0310 	and.w	r3, r3, #16
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d119      	bne.n	8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0210 	mvn.w	r2, #16
 8004b24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e029      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b50:	f7fc fdcc 	bl	80016ec <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d302      	bcc.n	8004b66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d116      	bne.n	8004b94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e007      	b.n	8004ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b40      	cmp	r3, #64	; 0x40
 8004ba0:	d1b5      	bne.n	8004b0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc2:	d11b      	bne.n	8004bfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	f043 0204 	orr.w	r2, r3, #4
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e128      	b.n	8004e70 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a90      	ldr	r2, [pc, #576]	; (8004e78 <HAL_I2S_Init+0x26c>)
 8004c36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fa67 	bl	800110c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6812      	ldr	r2, [r2, #0]
 8004c50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c54:	f023 030f 	bic.w	r3, r3, #15
 8004c58:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d060      	beq.n	8004d2c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d102      	bne.n	8004c78 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c72:	2310      	movs	r3, #16
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e001      	b.n	8004c7c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c78:	2320      	movs	r3, #32
 8004c7a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d802      	bhi.n	8004c8a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f001 fdec 	bl	8006868 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c90:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9a:	d125      	bne.n	8004ce8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	3305      	adds	r3, #5
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e01f      	b.n	8004d06 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	3305      	adds	r3, #5
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	e00e      	b.n	8004d06 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d02:	3305      	adds	r3, #5
 8004d04:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4a5c      	ldr	r2, [pc, #368]	; (8004e7c <HAL_I2S_Init+0x270>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	08db      	lsrs	r3, r3, #3
 8004d10:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	085b      	lsrs	r3, r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e003      	b.n	8004d34 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d902      	bls.n	8004d40 <HAL_I2S_Init+0x134>
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	2bff      	cmp	r3, #255	; 0xff
 8004d3e:	d907      	bls.n	8004d50 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	f043 0210 	orr.w	r2, r3, #16
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e08f      	b.n	8004e70 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	ea42 0103 	orr.w	r1, r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69fa      	ldr	r2, [r7, #28]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d6e:	f023 030f 	bic.w	r3, r3, #15
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6851      	ldr	r1, [r2, #4]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6892      	ldr	r2, [r2, #8]
 8004d7a:	4311      	orrs	r1, r2
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68d2      	ldr	r2, [r2, #12]
 8004d80:	4311      	orrs	r1, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6992      	ldr	r2, [r2, #24]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d92:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d161      	bne.n	8004e60 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <HAL_I2S_Init+0x274>)
 8004da0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a37      	ldr	r2, [pc, #220]	; (8004e84 <HAL_I2S_Init+0x278>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_I2S_Init+0x1a4>
 8004dac:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <HAL_I2S_Init+0x27c>)
 8004dae:	e001      	b.n	8004db4 <HAL_I2S_Init+0x1a8>
 8004db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	4932      	ldr	r1, [pc, #200]	; (8004e84 <HAL_I2S_Init+0x278>)
 8004dbc:	428a      	cmp	r2, r1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_I2S_Init+0x1b8>
 8004dc0:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_I2S_Init+0x27c>)
 8004dc2:	e001      	b.n	8004dc8 <HAL_I2S_Init+0x1bc>
 8004dc4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004dc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dcc:	f023 030f 	bic.w	r3, r3, #15
 8004dd0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a2b      	ldr	r2, [pc, #172]	; (8004e84 <HAL_I2S_Init+0x278>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_I2S_Init+0x1d4>
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <HAL_I2S_Init+0x27c>)
 8004dde:	e001      	b.n	8004de4 <HAL_I2S_Init+0x1d8>
 8004de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de4:	2202      	movs	r2, #2
 8004de6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HAL_I2S_Init+0x278>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d101      	bne.n	8004df6 <HAL_I2S_Init+0x1ea>
 8004df2:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_I2S_Init+0x27c>)
 8004df4:	e001      	b.n	8004dfa <HAL_I2S_Init+0x1ee>
 8004df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e06:	d003      	beq.n	8004e10 <HAL_I2S_Init+0x204>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d103      	bne.n	8004e18 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e001      	b.n	8004e1c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e26:	4313      	orrs	r3, r2
 8004e28:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e30:	4313      	orrs	r3, r2
 8004e32:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	897b      	ldrh	r3, [r7, #10]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e48:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <HAL_I2S_Init+0x278>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d101      	bne.n	8004e58 <HAL_I2S_Init+0x24c>
 8004e54:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <HAL_I2S_Init+0x27c>)
 8004e56:	e001      	b.n	8004e5c <HAL_I2S_Init+0x250>
 8004e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5c:	897a      	ldrh	r2, [r7, #10]
 8004e5e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	08005709 	.word	0x08005709
 8004e7c:	cccccccd 	.word	0xcccccccd
 8004e80:	08005891 	.word	0x08005891
 8004e84:	40003800 	.word	0x40003800
 8004e88:	40003400 	.word	0x40003400

08004e8c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d002      	beq.n	8004ea6 <HAL_I2S_Transmit_DMA+0x1a>
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e08e      	b.n	8004fc8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2S_Transmit_DMA+0x2e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e086      	b.n	8004fc8 <HAL_I2S_Transmit_DMA+0x13c>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d005      	beq.n	8004eda <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e076      	b.n	8004fc8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2203      	movs	r2, #3
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d002      	beq.n	8004f06 <HAL_I2S_Transmit_DMA+0x7a>
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d10a      	bne.n	8004f1c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8004f06:	88fb      	ldrh	r3, [r7, #6]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004f10:	88fb      	ldrh	r3, [r7, #6]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f1a:	e005      	b.n	8004f28 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	88fa      	ldrh	r2, [r7, #6]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	88fa      	ldrh	r2, [r7, #6]
 8004f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <HAL_I2S_Transmit_DMA+0x144>)
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	4a27      	ldr	r2, [pc, #156]	; (8004fd4 <HAL_I2S_Transmit_DMA+0x148>)
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	4a26      	ldr	r2, [pc, #152]	; (8004fd8 <HAL_I2S_Transmit_DMA+0x14c>)
 8004f3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004f48:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004f50:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f56:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8004f58:	f7fc fdb8 	bl	8001acc <HAL_DMA_Start_IT>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00f      	beq.n	8004f82 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e022      	b.n	8004fc8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d107      	bne.n	8004fa0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f9e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0202 	orr.w	r2, r2, #2
 8004fbc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	080055e7 	.word	0x080055e7
 8004fd4:	080055a5 	.word	0x080055a5
 8004fd8:	08005603 	.word	0x08005603

08004fdc <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2S_DMAPause+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e04a      	b.n	800508a <HAL_I2S_DMAPause+0xae>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b03      	cmp	r3, #3
 8005006:	d108      	bne.n	800501a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0202 	bic.w	r2, r2, #2
 8005016:	605a      	str	r2, [r3, #4]
 8005018:	e032      	b.n	8005080 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b04      	cmp	r3, #4
 8005024:	d108      	bne.n	8005038 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0201 	bic.w	r2, r2, #1
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e023      	b.n	8005080 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800503e:	b2db      	uxtb	r3, r3
 8005040:	2b05      	cmp	r3, #5
 8005042:	d11d      	bne.n	8005080 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0203 	bic.w	r2, r2, #3
 8005052:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <HAL_I2S_DMAPause+0xbc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d101      	bne.n	8005062 <HAL_I2S_DMAPause+0x86>
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <HAL_I2S_DMAPause+0xc0>)
 8005060:	e001      	b.n	8005066 <HAL_I2S_DMAPause+0x8a>
 8005062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	490a      	ldr	r1, [pc, #40]	; (8005098 <HAL_I2S_DMAPause+0xbc>)
 800506e:	428b      	cmp	r3, r1
 8005070:	d101      	bne.n	8005076 <HAL_I2S_DMAPause+0x9a>
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <HAL_I2S_DMAPause+0xc0>)
 8005074:	e001      	b.n	800507a <HAL_I2S_DMAPause+0x9e>
 8005076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800507a:	f022 0203 	bic.w	r2, r2, #3
 800507e:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40003800 	.word	0x40003800
 800509c:	40003400 	.word	0x40003400

080050a0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_I2S_DMAResume+0x18>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e07d      	b.n	80051b4 <HAL_I2S_DMAResume+0x114>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b03      	cmp	r3, #3
 80050ca:	d108      	bne.n	80050de <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0202 	orr.w	r2, r2, #2
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	e056      	b.n	800518c <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d108      	bne.n	80050fc <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f042 0201 	orr.w	r2, r2, #1
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	e047      	b.n	800518c <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b05      	cmp	r3, #5
 8005106:	d141      	bne.n	800518c <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0203 	orr.w	r2, r2, #3
 8005116:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a28      	ldr	r2, [pc, #160]	; (80051c0 <HAL_I2S_DMAResume+0x120>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_I2S_DMAResume+0x86>
 8005122:	4b28      	ldr	r3, [pc, #160]	; (80051c4 <HAL_I2S_DMAResume+0x124>)
 8005124:	e001      	b.n	800512a <HAL_I2S_DMAResume+0x8a>
 8005126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4923      	ldr	r1, [pc, #140]	; (80051c0 <HAL_I2S_DMAResume+0x120>)
 8005132:	428b      	cmp	r3, r1
 8005134:	d101      	bne.n	800513a <HAL_I2S_DMAResume+0x9a>
 8005136:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_I2S_DMAResume+0x124>)
 8005138:	e001      	b.n	800513e <HAL_I2S_DMAResume+0x9e>
 800513a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800513e:	f042 0203 	orr.w	r2, r2, #3
 8005142:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1d      	ldr	r2, [pc, #116]	; (80051c0 <HAL_I2S_DMAResume+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d101      	bne.n	8005152 <HAL_I2S_DMAResume+0xb2>
 800514e:	4b1d      	ldr	r3, [pc, #116]	; (80051c4 <HAL_I2S_DMAResume+0x124>)
 8005150:	e001      	b.n	8005156 <HAL_I2S_DMAResume+0xb6>
 8005152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005156:	69db      	ldr	r3, [r3, #28]
 8005158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800515c:	2b00      	cmp	r3, #0
 800515e:	d115      	bne.n	800518c <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_I2S_DMAResume+0x120>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d101      	bne.n	800516e <HAL_I2S_DMAResume+0xce>
 800516a:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <HAL_I2S_DMAResume+0x124>)
 800516c:	e001      	b.n	8005172 <HAL_I2S_DMAResume+0xd2>
 800516e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005172:	69da      	ldr	r2, [r3, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4911      	ldr	r1, [pc, #68]	; (80051c0 <HAL_I2S_DMAResume+0x120>)
 800517a:	428b      	cmp	r3, r1
 800517c:	d101      	bne.n	8005182 <HAL_I2S_DMAResume+0xe2>
 800517e:	4b11      	ldr	r3, [pc, #68]	; (80051c4 <HAL_I2S_DMAResume+0x124>)
 8005180:	e001      	b.n	8005186 <HAL_I2S_DMAResume+0xe6>
 8005182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005186:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800518a:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051a8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	40003800 	.word	0x40003800
 80051c4:	40003400 	.word	0x40003400

080051c8 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051dc:	d004      	beq.n	80051e8 <HAL_I2S_DMAStop+0x20>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 80d1 	bne.w	800538a <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00f      	beq.n	8005210 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc fcc1 	bl	8001b7c <HAL_DMA_Abort>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005204:	f043 0208 	orr.w	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005210:	2364      	movs	r3, #100	; 0x64
 8005212:	2201      	movs	r2, #1
 8005214:	2102      	movs	r1, #2
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb00 	bl	800581c <I2S_WaitFlagStateUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800523a:	2364      	movs	r3, #100	; 0x64
 800523c:	2200      	movs	r2, #0
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 faeb 	bl	800581c <I2S_WaitFlagStateUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005250:	f043 0201 	orr.w	r2, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005272:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005274:	2300      	movs	r3, #0
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0202 	bic.w	r2, r2, #2
 8005290:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b05      	cmp	r3, #5
 800529c:	f040 8165 	bne.w	800556a <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00f      	beq.n	80052c8 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fc fc65 	bl	8001b7c <HAL_DMA_Abort>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052bc:	f043 0208 	orr.w	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a8a      	ldr	r2, [pc, #552]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <HAL_I2S_DMAStop+0x10e>
 80052d2:	4b8a      	ldr	r3, [pc, #552]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80052d4:	e001      	b.n	80052da <HAL_I2S_DMAStop+0x112>
 80052d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052da:	69da      	ldr	r2, [r3, #28]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4985      	ldr	r1, [pc, #532]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80052e2:	428b      	cmp	r3, r1
 80052e4:	d101      	bne.n	80052ea <HAL_I2S_DMAStop+0x122>
 80052e6:	4b85      	ldr	r3, [pc, #532]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80052e8:	e001      	b.n	80052ee <HAL_I2S_DMAStop+0x126>
 80052ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f2:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a7e      	ldr	r2, [pc, #504]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d101      	bne.n	8005306 <HAL_I2S_DMAStop+0x13e>
 8005302:	4b7e      	ldr	r3, [pc, #504]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005304:	e001      	b.n	800530a <HAL_I2S_DMAStop+0x142>
 8005306:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a79      	ldr	r2, [pc, #484]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d101      	bne.n	800531c <HAL_I2S_DMAStop+0x154>
 8005318:	4b78      	ldr	r3, [pc, #480]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 800531a:	e001      	b.n	8005320 <HAL_I2S_DMAStop+0x158>
 800531c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a73      	ldr	r2, [pc, #460]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d101      	bne.n	8005334 <HAL_I2S_DMAStop+0x16c>
 8005330:	4b72      	ldr	r3, [pc, #456]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005332:	e001      	b.n	8005338 <HAL_I2S_DMAStop+0x170>
 8005334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	496e      	ldr	r1, [pc, #440]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 8005340:	428b      	cmp	r3, r1
 8005342:	d101      	bne.n	8005348 <HAL_I2S_DMAStop+0x180>
 8005344:	4b6d      	ldr	r3, [pc, #436]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005346:	e001      	b.n	800534c <HAL_I2S_DMAStop+0x184>
 8005348:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800534c:	f022 0201 	bic.w	r2, r2, #1
 8005350:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10c      	bne.n	8005374 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005372:	e0fa      	b.n	800556a <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a5f      	ldr	r2, [pc, #380]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d101      	bne.n	8005382 <HAL_I2S_DMAStop+0x1ba>
 800537e:	4b5f      	ldr	r3, [pc, #380]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005380:	e001      	b.n	8005386 <HAL_I2S_DMAStop+0x1be>
 8005382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005386:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005388:	e0ef      	b.n	800556a <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005392:	d005      	beq.n	80053a0 <HAL_I2S_DMAStop+0x1d8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	f040 80e5 	bne.w	800556a <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00f      	beq.n	80053c8 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fc fbe5 	bl	8001b7c <HAL_DMA_Abort>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053bc:	f043 0208 	orr.w	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b05      	cmp	r3, #5
 80053d2:	f040 809a 	bne.w	800550a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00f      	beq.n	80053fe <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fc fbca 	bl	8001b7c <HAL_DMA_Abort>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	f043 0208 	orr.w	r2, r3, #8
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80053fe:	f7fc f975 	bl	80016ec <HAL_GetTick>
 8005402:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005404:	e012      	b.n	800542c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005406:	f7fc f971 	bl	80016ec <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	2b64      	cmp	r3, #100	; 0x64
 8005412:	d90b      	bls.n	800542c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005418:	f043 0201 	orr.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a31      	ldr	r2, [pc, #196]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_I2S_DMAStop+0x272>
 8005436:	4b31      	ldr	r3, [pc, #196]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005438:	e001      	b.n	800543e <HAL_I2S_DMAStop+0x276>
 800543a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d1de      	bne.n	8005406 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005448:	e012      	b.n	8005470 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800544a:	f7fc f94f 	bl	80016ec <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b64      	cmp	r3, #100	; 0x64
 8005456:	d90b      	bls.n	8005470 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545c:	f043 0201 	orr.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_I2S_DMAStop+0x2b6>
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 800547c:	e001      	b.n	8005482 <HAL_I2S_DMAStop+0x2ba>
 800547e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005488:	2b80      	cmp	r3, #128	; 0x80
 800548a:	d0de      	beq.n	800544a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_I2S_DMAStop+0x2d2>
 8005496:	4b19      	ldr	r3, [pc, #100]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 8005498:	e001      	b.n	800549e <HAL_I2S_DMAStop+0x2d6>
 800549a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4914      	ldr	r1, [pc, #80]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80054a6:	428b      	cmp	r3, r1
 80054a8:	d101      	bne.n	80054ae <HAL_I2S_DMAStop+0x2e6>
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80054ac:	e001      	b.n	80054b2 <HAL_I2S_DMAStop+0x2ea>
 80054ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b6:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80054b8:	2300      	movs	r3, #0
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0d      	ldr	r2, [pc, #52]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_I2S_DMAStop+0x302>
 80054c6:	4b0d      	ldr	r3, [pc, #52]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80054c8:	e001      	b.n	80054ce <HAL_I2S_DMAStop+0x306>
 80054ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a07      	ldr	r2, [pc, #28]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_I2S_DMAStop+0x31a>
 80054de:	4b07      	ldr	r3, [pc, #28]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80054e0:	e001      	b.n	80054e6 <HAL_I2S_DMAStop+0x31e>
 80054e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4902      	ldr	r1, [pc, #8]	; (80054f8 <HAL_I2S_DMAStop+0x330>)
 80054ee:	428b      	cmp	r3, r1
 80054f0:	d106      	bne.n	8005500 <HAL_I2S_DMAStop+0x338>
 80054f2:	4b02      	ldr	r3, [pc, #8]	; (80054fc <HAL_I2S_DMAStop+0x334>)
 80054f4:	e006      	b.n	8005504 <HAL_I2S_DMAStop+0x33c>
 80054f6:	bf00      	nop
 80054f8:	40003800 	.word	0x40003800
 80054fc:	40003400 	.word	0x40003400
 8005500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005504:	f022 0202 	bic.w	r2, r2, #2
 8005508:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005518:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	60bb      	str	r3, [r7, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f022 0201 	bic.w	r2, r2, #1
 800553e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	d10c      	bne.n	8005564 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	77fb      	strb	r3, [r7, #31]
 8005562:	e002      	b.n	800556a <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 8005572:	7ffb      	ldrb	r3, [r7, #31]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10e      	bne.n	80055d8 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f022 0202 	bic.w	r2, r2, #2
 80055c8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7fb fab5 	bl	8000b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80055de:	bf00      	nop
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b084      	sub	sp, #16
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f7fb fab9 	bl	8000b6c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0203 	bic.w	r2, r2, #3
 800561e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005638:	f043 0208 	orr.w	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff ffa5 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565a:	881a      	ldrh	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10e      	bne.n	80056a2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005692:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7fb fa53 	bl	8000b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056bc:	b292      	uxth	r2, r2
 80056be:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c4:	1c9a      	adds	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	3b01      	subs	r3, #1
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056dc:	b29b      	uxth	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10e      	bne.n	8005700 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff ff3e 	bl	800557c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b04      	cmp	r3, #4
 8005722:	d13a      	bne.n	800579a <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b01      	cmp	r3, #1
 800572c:	d109      	bne.n	8005742 <I2S_IRQHandler+0x3a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d102      	bne.n	8005742 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ffb4 	bl	80056aa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d126      	bne.n	800579a <I2S_IRQHandler+0x92>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b20      	cmp	r3, #32
 8005758:	d11f      	bne.n	800579a <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005768:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	613b      	str	r3, [r7, #16]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	613b      	str	r3, [r7, #16]
 800577e:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578c:	f043 0202 	orr.w	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fefb 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d136      	bne.n	8005814 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d109      	bne.n	80057c4 <I2S_IRQHandler+0xbc>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ba:	2b80      	cmp	r3, #128	; 0x80
 80057bc:	d102      	bne.n	80057c4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7ff ff45 	bl	800564e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b08      	cmp	r3, #8
 80057cc:	d122      	bne.n	8005814 <I2S_IRQHandler+0x10c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d11b      	bne.n	8005814 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057ea:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005806:	f043 0204 	orr.w	r2, r3, #4
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f7ff febe 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005814:	bf00      	nop
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800582c:	f7fb ff5e 	bl	80016ec <HAL_GetTick>
 8005830:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005832:	e018      	b.n	8005866 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d014      	beq.n	8005866 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800583c:	f7fb ff56 	bl	80016ec <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d902      	bls.n	8005852 <I2S_WaitFlagStateUntilTimeout+0x36>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d109      	bne.n	8005866 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e00f      	b.n	8005886 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4013      	ands	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	429a      	cmp	r2, r3
 8005882:	d1d7      	bne.n	8005834 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a92      	ldr	r2, [pc, #584]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80058aa:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058ac:	e001      	b.n	80058b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80058ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a8b      	ldr	r2, [pc, #556]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80058c8:	4b8a      	ldr	r3, [pc, #552]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80058ca:	e001      	b.n	80058d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80058cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d004      	beq.n	80058e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 8099 	bne.w	8005a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d107      	bne.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f925 	bl	8005b4c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b01      	cmp	r3, #1
 800590a:	d107      	bne.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f9c8 	bl	8005cac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d13a      	bne.n	800599c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	2b00      	cmp	r3, #0
 800592e:	d035      	beq.n	800599c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a6e      	ldr	r2, [pc, #440]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800593a:	4b6e      	ldr	r3, [pc, #440]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800593c:	e001      	b.n	8005942 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800593e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4969      	ldr	r1, [pc, #420]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800594a:	428b      	cmp	r3, r1
 800594c:	d101      	bne.n	8005952 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800594e:	4b69      	ldr	r3, [pc, #420]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005950:	e001      	b.n	8005956 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800595a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800596a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	f043 0202 	orr.w	r2, r3, #2
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fdfa 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	f040 80c3 	bne.w	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80bd 	beq.w	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059c2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a49      	ldr	r2, [pc, #292]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80059ce:	4b49      	ldr	r3, [pc, #292]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059d0:	e001      	b.n	80059d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80059d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4944      	ldr	r1, [pc, #272]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059de:	428b      	cmp	r3, r1
 80059e0:	d101      	bne.n	80059e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80059e2:	4b44      	ldr	r3, [pc, #272]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059e4:	e001      	b.n	80059ea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80059e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059ee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80059f0:	2300      	movs	r3, #0
 80059f2:	60bb      	str	r3, [r7, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff fdbc 	bl	8005590 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a18:	e089      	b.n	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d107      	bne.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8be 	bl	8005bb0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f8fd 	bl	8005c48 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	d12f      	bne.n	8005ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0320 	and.w	r3, r3, #32
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d02a      	beq.n	8005ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005a70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d101      	bne.n	8005a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a7e:	e001      	b.n	8005a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4919      	ldr	r1, [pc, #100]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	d101      	bne.n	8005a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005a90:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a92:	e001      	b.n	8005a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	f043 0202 	orr.w	r2, r3, #2
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff fd6c 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f003 0308 	and.w	r3, r3, #8
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d136      	bne.n	8005b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d031      	beq.n	8005b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a07      	ldr	r2, [pc, #28]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d101      	bne.n	8005ada <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ad6:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ad8:	e001      	b.n	8005ade <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ada:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4902      	ldr	r1, [pc, #8]	; (8005af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d106      	bne.n	8005af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005aea:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aec:	e006      	b.n	8005afc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005aee:	bf00      	nop
 8005af0:	40003800 	.word	0x40003800
 8005af4:	40003400 	.word	0x40003400
 8005af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005afc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b00:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fd32 	bl	8005590 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b2c:	e000      	b.n	8005b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b2e:	bf00      	nop
}
 8005b30:	bf00      	nop
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	1c99      	adds	r1, r3, #2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6251      	str	r1, [r2, #36]	; 0x24
 8005b5e:	881a      	ldrh	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d113      	bne.n	8005ba6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d106      	bne.n	8005ba6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ffc9 	bl	8005b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	1c99      	adds	r1, r3, #2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6251      	str	r1, [r2, #36]	; 0x24
 8005bc2:	8819      	ldrh	r1, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <I2SEx_TxISR_I2SExt+0x90>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <I2SEx_TxISR_I2SExt+0x22>
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <I2SEx_TxISR_I2SExt+0x94>)
 8005bd0:	e001      	b.n	8005bd6 <I2SEx_TxISR_I2SExt+0x26>
 8005bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bd6:	460a      	mov	r2, r1
 8005bd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d121      	bne.n	8005c36 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a12      	ldr	r2, [pc, #72]	; (8005c40 <I2SEx_TxISR_I2SExt+0x90>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d101      	bne.n	8005c00 <I2SEx_TxISR_I2SExt+0x50>
 8005bfc:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <I2SEx_TxISR_I2SExt+0x94>)
 8005bfe:	e001      	b.n	8005c04 <I2SEx_TxISR_I2SExt+0x54>
 8005c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	490d      	ldr	r1, [pc, #52]	; (8005c40 <I2SEx_TxISR_I2SExt+0x90>)
 8005c0c:	428b      	cmp	r3, r1
 8005c0e:	d101      	bne.n	8005c14 <I2SEx_TxISR_I2SExt+0x64>
 8005c10:	4b0c      	ldr	r3, [pc, #48]	; (8005c44 <I2SEx_TxISR_I2SExt+0x94>)
 8005c12:	e001      	b.n	8005c18 <I2SEx_TxISR_I2SExt+0x68>
 8005c14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c1c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d106      	bne.n	8005c36 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff81 	bl	8005b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40003800 	.word	0x40003800
 8005c44:	40003400 	.word	0x40003400

08005c48 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68d8      	ldr	r0, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	1c99      	adds	r1, r3, #2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005c60:	b282      	uxth	r2, r0
 8005c62:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d113      	bne.n	8005ca4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c8a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff4a 	bl	8005b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a20      	ldr	r2, [pc, #128]	; (8005d3c <I2SEx_RxISR_I2SExt+0x90>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d101      	bne.n	8005cc2 <I2SEx_RxISR_I2SExt+0x16>
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <I2SEx_RxISR_I2SExt+0x94>)
 8005cc0:	e001      	b.n	8005cc6 <I2SEx_RxISR_I2SExt+0x1a>
 8005cc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cc6:	68d8      	ldr	r0, [r3, #12]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	1c99      	adds	r1, r3, #2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005cd2:	b282      	uxth	r2, r0
 8005cd4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d121      	bne.n	8005d32 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <I2SEx_RxISR_I2SExt+0x90>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d101      	bne.n	8005cfc <I2SEx_RxISR_I2SExt+0x50>
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <I2SEx_RxISR_I2SExt+0x94>)
 8005cfa:	e001      	b.n	8005d00 <I2SEx_RxISR_I2SExt+0x54>
 8005cfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	490d      	ldr	r1, [pc, #52]	; (8005d3c <I2SEx_RxISR_I2SExt+0x90>)
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	d101      	bne.n	8005d10 <I2SEx_RxISR_I2SExt+0x64>
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	; (8005d40 <I2SEx_RxISR_I2SExt+0x94>)
 8005d0e:	e001      	b.n	8005d14 <I2SEx_RxISR_I2SExt+0x68>
 8005d10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d18:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff03 	bl	8005b38 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40003800 	.word	0x40003800
 8005d40:	40003400 	.word	0x40003400

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e267      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d075      	beq.n	8005e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d62:	4b88      	ldr	r3, [pc, #544]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d00c      	beq.n	8005d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6e:	4b85      	ldr	r3, [pc, #532]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d112      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7a:	4b82      	ldr	r3, [pc, #520]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d86:	d10b      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	4b7e      	ldr	r3, [pc, #504]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05b      	beq.n	8005e4c <HAL_RCC_OscConfig+0x108>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d157      	bne.n	8005e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e242      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d106      	bne.n	8005db8 <HAL_RCC_OscConfig+0x74>
 8005daa:	4b76      	ldr	r3, [pc, #472]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a75      	ldr	r2, [pc, #468]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e01d      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x98>
 8005dc2:	4b70      	ldr	r3, [pc, #448]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6f      	ldr	r2, [pc, #444]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b6d      	ldr	r3, [pc, #436]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6c      	ldr	r2, [pc, #432]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e00b      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	4b69      	ldr	r3, [pc, #420]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a68      	ldr	r2, [pc, #416]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	4b66      	ldr	r3, [pc, #408]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a65      	ldr	r2, [pc, #404]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d013      	beq.n	8005e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fb fc76 	bl	80016ec <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fb fc72 	bl	80016ec <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e207      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b5b      	ldr	r3, [pc, #364]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0xc0>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fb fc62 	bl	80016ec <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fb fc5e 	bl	80016ec <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e1f3      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0xe8>
 8005e4a:	e000      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d063      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e5a:	4b4a      	ldr	r3, [pc, #296]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e66:	4b47      	ldr	r3, [pc, #284]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d11c      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e72:	4b44      	ldr	r3, [pc, #272]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e1c7      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	4b3b      	ldr	r3, [pc, #236]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4937      	ldr	r1, [pc, #220]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eaa:	e03a      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d020      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb4:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCC_OscConfig+0x244>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eba:	f7fb fc17 	bl	80016ec <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec2:	f7fb fc13 	bl	80016ec <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e1a8      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	4b2b      	ldr	r3, [pc, #172]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4925      	ldr	r1, [pc, #148]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
 8005ef4:	e015      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef6:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <HAL_RCC_OscConfig+0x244>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fb fbf6 	bl	80016ec <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fb fbf2 	bl	80016ec <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e187      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	4b1b      	ldr	r3, [pc, #108]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d036      	beq.n	8005f9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f36:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <HAL_RCC_OscConfig+0x248>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fb fbd6 	bl	80016ec <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fb fbd2 	bl	80016ec <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e167      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_OscConfig+0x240>)
 8005f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x200>
 8005f62:	e01b      	b.n	8005f9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <HAL_RCC_OscConfig+0x248>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fb fbbf 	bl	80016ec <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f70:	e00e      	b.n	8005f90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f72:	f7fb fbbb 	bl	80016ec <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d907      	bls.n	8005f90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e150      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
 8005f84:	40023800 	.word	0x40023800
 8005f88:	42470000 	.word	0x42470000
 8005f8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f90:	4b88      	ldr	r3, [pc, #544]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1ea      	bne.n	8005f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8097 	beq.w	80060d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005faa:	2300      	movs	r3, #0
 8005fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fae:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60bb      	str	r3, [r7, #8]
 8005fbe:	4b7d      	ldr	r3, [pc, #500]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	4a7c      	ldr	r2, [pc, #496]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8005fca:	4b7a      	ldr	r3, [pc, #488]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	60bb      	str	r3, [r7, #8]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fda:	4b77      	ldr	r3, [pc, #476]	; (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d118      	bne.n	8006018 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fe6:	4b74      	ldr	r3, [pc, #464]	; (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a73      	ldr	r2, [pc, #460]	; (80061b8 <HAL_RCC_OscConfig+0x474>)
 8005fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff2:	f7fb fb7b 	bl	80016ec <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ff8:	e008      	b.n	800600c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffa:	f7fb fb77 	bl	80016ec <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d901      	bls.n	800600c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e10c      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800600c:	4b6a      	ldr	r3, [pc, #424]	; (80061b8 <HAL_RCC_OscConfig+0x474>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0f0      	beq.n	8005ffa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d106      	bne.n	800602e <HAL_RCC_OscConfig+0x2ea>
 8006020:	4b64      	ldr	r3, [pc, #400]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a63      	ldr	r2, [pc, #396]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006026:	f043 0301 	orr.w	r3, r3, #1
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
 800602c:	e01c      	b.n	8006068 <HAL_RCC_OscConfig+0x324>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d10c      	bne.n	8006050 <HAL_RCC_OscConfig+0x30c>
 8006036:	4b5f      	ldr	r3, [pc, #380]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	4a5e      	ldr	r2, [pc, #376]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 800603c:	f043 0304 	orr.w	r3, r3, #4
 8006040:	6713      	str	r3, [r2, #112]	; 0x70
 8006042:	4b5c      	ldr	r3, [pc, #368]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	4a5b      	ldr	r2, [pc, #364]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6713      	str	r3, [r2, #112]	; 0x70
 800604e:	e00b      	b.n	8006068 <HAL_RCC_OscConfig+0x324>
 8006050:	4b58      	ldr	r3, [pc, #352]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006054:	4a57      	ldr	r2, [pc, #348]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006056:	f023 0301 	bic.w	r3, r3, #1
 800605a:	6713      	str	r3, [r2, #112]	; 0x70
 800605c:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006060:	4a54      	ldr	r2, [pc, #336]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d015      	beq.n	800609c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006070:	f7fb fb3c 	bl	80016ec <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006076:	e00a      	b.n	800608e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006078:	f7fb fb38 	bl	80016ec <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	f241 3288 	movw	r2, #5000	; 0x1388
 8006086:	4293      	cmp	r3, r2
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e0cb      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608e:	4b49      	ldr	r3, [pc, #292]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d0ee      	beq.n	8006078 <HAL_RCC_OscConfig+0x334>
 800609a:	e014      	b.n	80060c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800609c:	f7fb fb26 	bl	80016ec <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a2:	e00a      	b.n	80060ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060a4:	f7fb fb22 	bl	80016ec <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e0b5      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1ee      	bne.n	80060a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060cc:	4b39      	ldr	r3, [pc, #228]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	4a38      	ldr	r2, [pc, #224]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 80a1 	beq.w	8006224 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060e2:	4b34      	ldr	r3, [pc, #208]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 030c 	and.w	r3, r3, #12
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d05c      	beq.n	80061a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d141      	bne.n	800617a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	4b31      	ldr	r3, [pc, #196]	; (80061bc <HAL_RCC_OscConfig+0x478>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fb faf6 	bl	80016ec <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fb faf2 	bl	80016ec <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e087      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	4b27      	ldr	r3, [pc, #156]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69da      	ldr	r2, [r3, #28]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	019b      	lsls	r3, r3, #6
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	085b      	lsrs	r3, r3, #1
 800613a:	3b01      	subs	r3, #1
 800613c:	041b      	lsls	r3, r3, #16
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	061b      	lsls	r3, r3, #24
 8006146:	491b      	ldr	r1, [pc, #108]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 8006148:	4313      	orrs	r3, r2
 800614a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800614c:	4b1b      	ldr	r3, [pc, #108]	; (80061bc <HAL_RCC_OscConfig+0x478>)
 800614e:	2201      	movs	r2, #1
 8006150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006152:	f7fb facb 	bl	80016ec <HAL_GetTick>
 8006156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006158:	e008      	b.n	800616c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615a:	f7fb fac7 	bl	80016ec <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	2b02      	cmp	r3, #2
 8006166:	d901      	bls.n	800616c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e05c      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616c:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f0      	beq.n	800615a <HAL_RCC_OscConfig+0x416>
 8006178:	e054      	b.n	8006224 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <HAL_RCC_OscConfig+0x478>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006180:	f7fb fab4 	bl	80016ec <HAL_GetTick>
 8006184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006188:	f7fb fab0 	bl	80016ec <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e045      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCC_OscConfig+0x470>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x444>
 80061a6:	e03d      	b.n	8006224 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d107      	bne.n	80061c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e038      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	40007000 	.word	0x40007000
 80061bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061c0:	4b1b      	ldr	r3, [pc, #108]	; (8006230 <HAL_RCC_OscConfig+0x4ec>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d028      	beq.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d121      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d11a      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d111      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	085b      	lsrs	r3, r3, #1
 8006208:	3b01      	subs	r3, #1
 800620a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800620c:	429a      	cmp	r2, r3
 800620e:	d107      	bne.n	8006220 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40023800 	.word	0x40023800

08006234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0cc      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006248:	4b68      	ldr	r3, [pc, #416]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0307 	and.w	r3, r3, #7
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d90c      	bls.n	8006270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006256:	4b65      	ldr	r3, [pc, #404]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006258:	683a      	ldr	r2, [r7, #0]
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800625e:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d001      	beq.n	8006270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0b8      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d020      	beq.n	80062be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d005      	beq.n	8006294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006288:	4b59      	ldr	r3, [pc, #356]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	4a58      	ldr	r2, [pc, #352]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062a0:	4b53      	ldr	r3, [pc, #332]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	4a52      	ldr	r2, [pc, #328]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	494d      	ldr	r1, [pc, #308]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062ba:	4313      	orrs	r3, r2
 80062bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0301 	and.w	r3, r3, #1
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d044      	beq.n	8006354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d107      	bne.n	80062e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b47      	ldr	r3, [pc, #284]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d119      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d003      	beq.n	80062f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d107      	bne.n	8006302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062f2:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d109      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e06f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006302:	4b3b      	ldr	r3, [pc, #236]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e067      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006312:	4b37      	ldr	r3, [pc, #220]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f023 0203 	bic.w	r2, r3, #3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	4934      	ldr	r1, [pc, #208]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	4313      	orrs	r3, r2
 8006322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006324:	f7fb f9e2 	bl	80016ec <HAL_GetTick>
 8006328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632a:	e00a      	b.n	8006342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800632c:	f7fb f9de 	bl	80016ec <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	f241 3288 	movw	r2, #5000	; 0x1388
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e04f      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 020c 	and.w	r2, r3, #12
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	429a      	cmp	r2, r3
 8006352:	d1eb      	bne.n	800632c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006354:	4b25      	ldr	r3, [pc, #148]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	429a      	cmp	r2, r3
 8006360:	d20c      	bcs.n	800637c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006362:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636a:	4b20      	ldr	r3, [pc, #128]	; (80063ec <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d001      	beq.n	800637c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e032      	b.n	80063e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006388:	4b19      	ldr	r3, [pc, #100]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4916      	ldr	r1, [pc, #88]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0308 	and.w	r3, r3, #8
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d009      	beq.n	80063ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a6:	4b12      	ldr	r3, [pc, #72]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	490e      	ldr	r1, [pc, #56]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063ba:	f000 f821 	bl	8006400 <HAL_RCC_GetSysClockFreq>
 80063be:	4602      	mov	r2, r0
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	091b      	lsrs	r3, r3, #4
 80063c6:	f003 030f 	and.w	r3, r3, #15
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x1c0>)
 80063cc:	5ccb      	ldrb	r3, [r1, r3]
 80063ce:	fa22 f303 	lsr.w	r3, r2, r3
 80063d2:	4a09      	ldr	r2, [pc, #36]	; (80063f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063d6:	4b09      	ldr	r3, [pc, #36]	; (80063fc <HAL_RCC_ClockConfig+0x1c8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fb f942 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023c00 	.word	0x40023c00
 80063f0:	40023800 	.word	0x40023800
 80063f4:	0800dbf4 	.word	0x0800dbf4
 80063f8:	20000000 	.word	0x20000000
 80063fc:	20000004 	.word	0x20000004

08006400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006400:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006404:	b094      	sub	sp, #80	; 0x50
 8006406:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	647b      	str	r3, [r7, #68]	; 0x44
 800640c:	2300      	movs	r3, #0
 800640e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006410:	2300      	movs	r3, #0
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006418:	4b79      	ldr	r3, [pc, #484]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f003 030c 	and.w	r3, r3, #12
 8006420:	2b08      	cmp	r3, #8
 8006422:	d00d      	beq.n	8006440 <HAL_RCC_GetSysClockFreq+0x40>
 8006424:	2b08      	cmp	r3, #8
 8006426:	f200 80e1 	bhi.w	80065ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x34>
 800642e:	2b04      	cmp	r3, #4
 8006430:	d003      	beq.n	800643a <HAL_RCC_GetSysClockFreq+0x3a>
 8006432:	e0db      	b.n	80065ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006434:	4b73      	ldr	r3, [pc, #460]	; (8006604 <HAL_RCC_GetSysClockFreq+0x204>)
 8006436:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006438:	e0db      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800643a:	4b73      	ldr	r3, [pc, #460]	; (8006608 <HAL_RCC_GetSysClockFreq+0x208>)
 800643c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800643e:	e0d8      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006440:	4b6f      	ldr	r3, [pc, #444]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006448:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800644a:	4b6d      	ldr	r3, [pc, #436]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d063      	beq.n	800651e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006456:	4b6a      	ldr	r3, [pc, #424]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	099b      	lsrs	r3, r3, #6
 800645c:	2200      	movs	r2, #0
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006460:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	633b      	str	r3, [r7, #48]	; 0x30
 800646a:	2300      	movs	r3, #0
 800646c:	637b      	str	r3, [r7, #52]	; 0x34
 800646e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006472:	4622      	mov	r2, r4
 8006474:	462b      	mov	r3, r5
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	f04f 0100 	mov.w	r1, #0
 800647e:	0159      	lsls	r1, r3, #5
 8006480:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006484:	0150      	lsls	r0, r2, #5
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4621      	mov	r1, r4
 800648c:	1a51      	subs	r1, r2, r1
 800648e:	6139      	str	r1, [r7, #16]
 8006490:	4629      	mov	r1, r5
 8006492:	eb63 0301 	sbc.w	r3, r3, r1
 8006496:	617b      	str	r3, [r7, #20]
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064a4:	4659      	mov	r1, fp
 80064a6:	018b      	lsls	r3, r1, #6
 80064a8:	4651      	mov	r1, sl
 80064aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064ae:	4651      	mov	r1, sl
 80064b0:	018a      	lsls	r2, r1, #6
 80064b2:	4651      	mov	r1, sl
 80064b4:	ebb2 0801 	subs.w	r8, r2, r1
 80064b8:	4659      	mov	r1, fp
 80064ba:	eb63 0901 	sbc.w	r9, r3, r1
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064d2:	4690      	mov	r8, r2
 80064d4:	4699      	mov	r9, r3
 80064d6:	4623      	mov	r3, r4
 80064d8:	eb18 0303 	adds.w	r3, r8, r3
 80064dc:	60bb      	str	r3, [r7, #8]
 80064de:	462b      	mov	r3, r5
 80064e0:	eb49 0303 	adc.w	r3, r9, r3
 80064e4:	60fb      	str	r3, [r7, #12]
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064f2:	4629      	mov	r1, r5
 80064f4:	024b      	lsls	r3, r1, #9
 80064f6:	4621      	mov	r1, r4
 80064f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064fc:	4621      	mov	r1, r4
 80064fe:	024a      	lsls	r2, r1, #9
 8006500:	4610      	mov	r0, r2
 8006502:	4619      	mov	r1, r3
 8006504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006506:	2200      	movs	r2, #0
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
 800650a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800650c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006510:	f7f9 fe5a 	bl	80001c8 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4613      	mov	r3, r2
 800651a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800651c:	e058      	b.n	80065d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800651e:	4b38      	ldr	r3, [pc, #224]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	099b      	lsrs	r3, r3, #6
 8006524:	2200      	movs	r2, #0
 8006526:	4618      	mov	r0, r3
 8006528:	4611      	mov	r1, r2
 800652a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800652e:	623b      	str	r3, [r7, #32]
 8006530:	2300      	movs	r3, #0
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
 8006534:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006538:	4642      	mov	r2, r8
 800653a:	464b      	mov	r3, r9
 800653c:	f04f 0000 	mov.w	r0, #0
 8006540:	f04f 0100 	mov.w	r1, #0
 8006544:	0159      	lsls	r1, r3, #5
 8006546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800654a:	0150      	lsls	r0, r2, #5
 800654c:	4602      	mov	r2, r0
 800654e:	460b      	mov	r3, r1
 8006550:	4641      	mov	r1, r8
 8006552:	ebb2 0a01 	subs.w	sl, r2, r1
 8006556:	4649      	mov	r1, r9
 8006558:	eb63 0b01 	sbc.w	fp, r3, r1
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	f04f 0300 	mov.w	r3, #0
 8006564:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006568:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800656c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006570:	ebb2 040a 	subs.w	r4, r2, sl
 8006574:	eb63 050b 	sbc.w	r5, r3, fp
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	00eb      	lsls	r3, r5, #3
 8006582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006586:	00e2      	lsls	r2, r4, #3
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	4643      	mov	r3, r8
 800658e:	18e3      	adds	r3, r4, r3
 8006590:	603b      	str	r3, [r7, #0]
 8006592:	464b      	mov	r3, r9
 8006594:	eb45 0303 	adc.w	r3, r5, r3
 8006598:	607b      	str	r3, [r7, #4]
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065a6:	4629      	mov	r1, r5
 80065a8:	028b      	lsls	r3, r1, #10
 80065aa:	4621      	mov	r1, r4
 80065ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065b0:	4621      	mov	r1, r4
 80065b2:	028a      	lsls	r2, r1, #10
 80065b4:	4610      	mov	r0, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ba:	2200      	movs	r2, #0
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065c4:	f7f9 fe00 	bl	80001c8 <__aeabi_uldivmod>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4613      	mov	r3, r2
 80065ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065d0:	4b0b      	ldr	r3, [pc, #44]	; (8006600 <HAL_RCC_GetSysClockFreq+0x200>)
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	3301      	adds	r3, #1
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065ea:	e002      	b.n	80065f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <HAL_RCC_GetSysClockFreq+0x204>)
 80065ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3750      	adds	r7, #80	; 0x50
 80065f8:	46bd      	mov	sp, r7
 80065fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	40023800 	.word	0x40023800
 8006604:	00f42400 	.word	0x00f42400
 8006608:	007a1200 	.word	0x007a1200

0800660c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006610:	4b03      	ldr	r3, [pc, #12]	; (8006620 <HAL_RCC_GetHCLKFreq+0x14>)
 8006612:	681b      	ldr	r3, [r3, #0]
}
 8006614:	4618      	mov	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	20000000 	.word	0x20000000

08006624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006628:	f7ff fff0 	bl	800660c <HAL_RCC_GetHCLKFreq>
 800662c:	4602      	mov	r2, r0
 800662e:	4b05      	ldr	r3, [pc, #20]	; (8006644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	0a9b      	lsrs	r3, r3, #10
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	4903      	ldr	r1, [pc, #12]	; (8006648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800663a:	5ccb      	ldrb	r3, [r1, r3]
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	40023800 	.word	0x40023800
 8006648:	0800dc04 	.word	0x0800dc04

0800664c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006670:	2b00      	cmp	r3, #0
 8006672:	d035      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006674:	4b62      	ldr	r3, [pc, #392]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800667a:	f7fb f837 	bl	80016ec <HAL_GetTick>
 800667e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006682:	f7fb f833 	bl	80016ec <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e0b0      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006694:	4b5b      	ldr	r3, [pc, #364]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1f0      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	019a      	lsls	r2, r3, #6
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	071b      	lsls	r3, r3, #28
 80066ac:	4955      	ldr	r1, [pc, #340]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066b4:	4b52      	ldr	r3, [pc, #328]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ba:	f7fb f817 	bl	80016ec <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c0:	e008      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066c2:	f7fb f813 	bl	80016ec <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e090      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066d4:	4b4b      	ldr	r3, [pc, #300]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 8083 	beq.w	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
 80066f2:	4b44      	ldr	r3, [pc, #272]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	4a43      	ldr	r2, [pc, #268]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80066f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fc:	6413      	str	r3, [r2, #64]	; 0x40
 80066fe:	4b41      	ldr	r3, [pc, #260]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800670a:	4b3f      	ldr	r3, [pc, #252]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a3e      	ldr	r2, [pc, #248]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006714:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006716:	f7fa ffe9 	bl	80016ec <HAL_GetTick>
 800671a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800671c:	e008      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800671e:	f7fa ffe5 	bl	80016ec <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d901      	bls.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e062      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006730:	4b35      	ldr	r3, [pc, #212]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d0f0      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800673c:	4b31      	ldr	r3, [pc, #196]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006744:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d02f      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	429a      	cmp	r2, r3
 8006758:	d028      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006762:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006764:	4b29      	ldr	r3, [pc, #164]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800676a:	4b28      	ldr	r3, [pc, #160]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006770:	4a24      	ldr	r2, [pc, #144]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	2b01      	cmp	r3, #1
 8006780:	d114      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006782:	f7fa ffb3 	bl	80016ec <HAL_GetTick>
 8006786:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006788:	e00a      	b.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800678a:	f7fa ffaf 	bl	80016ec <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f241 3288 	movw	r2, #5000	; 0x1388
 8006798:	4293      	cmp	r3, r2
 800679a:	d901      	bls.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e02a      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a0:	4b18      	ldr	r3, [pc, #96]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d0ee      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b8:	d10d      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68db      	ldr	r3, [r3, #12]
 80067c6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80067ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ce:	490d      	ldr	r1, [pc, #52]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	608b      	str	r3, [r1, #8]
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067d6:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	4a0a      	ldr	r2, [pc, #40]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067dc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80067e0:	6093      	str	r3, [r2, #8]
 80067e2:	4b08      	ldr	r3, [pc, #32]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ee:	4905      	ldr	r1, [pc, #20]	; (8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	42470068 	.word	0x42470068
 8006804:	40023800 	.word	0x40023800
 8006808:	40007000 	.word	0x40007000
 800680c:	42470e40 	.word	0x42470e40

08006810 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2203      	movs	r2, #3
 800681c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800681e:	4b11      	ldr	r3, [pc, #68]	; (8006864 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006824:	099b      	lsrs	r3, r3, #6
 8006826:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006834:	0f1b      	lsrs	r3, r3, #28
 8006836:	f003 0207 	and.w	r2, r3, #7
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006846:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	431a      	orrs	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	40023800 	.word	0x40023800

08006868 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d13e      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d12f      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800689c:	4b1e      	ldr	r3, [pc, #120]	; (8006918 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800689e:	617b      	str	r3, [r7, #20]
          break;
 80068a0:	e02f      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068a2:	4b1c      	ldr	r3, [pc, #112]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ae:	d108      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068b0:	4b18      	ldr	r3, [pc, #96]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b8:	4a18      	ldr	r2, [pc, #96]	; (800691c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	e007      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80068c2:	4b14      	ldr	r3, [pc, #80]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068ca:	4a15      	ldr	r2, [pc, #84]	; (8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80068d2:	4b10      	ldr	r3, [pc, #64]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	fb02 f303 	mul.w	r3, r2, r3
 80068e4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80068e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ec:	0f1b      	lsrs	r3, r3, #28
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]
          break;
 80068fa:	e002      	b.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	617b      	str	r3, [r7, #20]
          break;
 8006900:	bf00      	nop
        }
      }
      break;
 8006902:	bf00      	nop
    }
  }
  return frequency;
 8006904:	697b      	ldr	r3, [r7, #20]
}
 8006906:	4618      	mov	r0, r3
 8006908:	371c      	adds	r7, #28
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40023800 	.word	0x40023800
 8006918:	00bb8000 	.word	0x00bb8000
 800691c:	007a1200 	.word	0x007a1200
 8006920:	00f42400 	.word	0x00f42400

08006924 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006924:	b084      	sub	sp, #16
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	f107 001c 	add.w	r0, r7, #28
 8006932:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	2b01      	cmp	r3, #1
 800693a:	d122      	bne.n	8006982 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006966:	2b01      	cmp	r3, #1
 8006968:	d105      	bne.n	8006976 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f9c0 	bl	8006cfc <USB_CoreReset>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
 8006980:	e01a      	b.n	80069b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9b4 	bl	8006cfc <USB_CoreReset>
 8006994:	4603      	mov	r3, r0
 8006996:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d106      	bne.n	80069ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
 80069aa:	e005      	b.n	80069b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10b      	bne.n	80069d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f043 0206 	orr.w	r2, r3, #6
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f043 0220 	orr.w	r2, r3, #32
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069e2:	b004      	add	sp, #16
 80069e4:	4770      	bx	lr

080069e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f043 0201 	orr.w	r2, r3, #1
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f023 0201 	bic.w	r2, r3, #1
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d115      	bne.n	8006a78 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a58:	2001      	movs	r0, #1
 8006a5a:	f7fa fe53 	bl	8001704 <HAL_Delay>
      ms++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f93a 	bl	8006cde <USB_GetMode>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d01e      	beq.n	8006aae <USB_SetCurrentMode+0x84>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b31      	cmp	r3, #49	; 0x31
 8006a74:	d9f0      	bls.n	8006a58 <USB_SetCurrentMode+0x2e>
 8006a76:	e01a      	b.n	8006aae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d115      	bne.n	8006aaa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	f7fa fe3a 	bl	8001704 <HAL_Delay>
      ms++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f921 	bl	8006cde <USB_GetMode>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <USB_SetCurrentMode+0x84>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b31      	cmp	r3, #49	; 0x31
 8006aa6:	d9f0      	bls.n	8006a8a <USB_SetCurrentMode+0x60>
 8006aa8:	e001      	b.n	8006aae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e005      	b.n	8006aba <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b32      	cmp	r3, #50	; 0x32
 8006ab2:	d101      	bne.n	8006ab8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <USB_FlushTxFifo+0x64>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d901      	bls.n	8006ae4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e01b      	b.n	8006b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	daf2      	bge.n	8006ad2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006aec:	2300      	movs	r3, #0
 8006aee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	019b      	lsls	r3, r3, #6
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	3301      	adds	r3, #1
 8006b00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <USB_FlushTxFifo+0x64>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e006      	b.n	8006b1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d0f0      	beq.n	8006afc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	00030d40 	.word	0x00030d40

08006b2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a11      	ldr	r2, [pc, #68]	; (8006b88 <USB_FlushRxFifo+0x5c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e018      	b.n	8006b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	daf2      	bge.n	8006b38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2210      	movs	r2, #16
 8006b5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <USB_FlushRxFifo+0x5c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d901      	bls.n	8006b6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e006      	b.n	8006b7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b10      	cmp	r3, #16
 8006b78:	d0f0      	beq.n	8006b5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	00030d40 	.word	0x00030d40

08006b8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b089      	sub	sp, #36	; 0x24
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	71fb      	strb	r3, [r7, #7]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006baa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d123      	bne.n	8006bfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006bb2:	88bb      	ldrh	r3, [r7, #4]
 8006bb4:	3303      	adds	r3, #3
 8006bb6:	089b      	lsrs	r3, r3, #2
 8006bb8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e018      	b.n	8006bf2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	031a      	lsls	r2, r3, #12
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bcc:	461a      	mov	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	61bb      	str	r3, [r7, #24]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3e2      	bcc.n	8006bc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3724      	adds	r7, #36	; 0x24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b08b      	sub	sp, #44	; 0x2c
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c1e:	88fb      	ldrh	r3, [r7, #6]
 8006c20:	089b      	lsrs	r3, r3, #2
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c26:	88fb      	ldrh	r3, [r7, #6]
 8006c28:	f003 0303 	and.w	r3, r3, #3
 8006c2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	e014      	b.n	8006c5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	3301      	adds	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	3301      	adds	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	3301      	adds	r3, #1
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	623b      	str	r3, [r7, #32]
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d3e6      	bcc.n	8006c34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c66:	8bfb      	ldrh	r3, [r7, #30]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d01e      	beq.n	8006caa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c76:	461a      	mov	r2, r3
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	701a      	strb	r2, [r3, #0]
      i++;
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	3301      	adds	r3, #1
 8006c96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ca4:	8bfb      	ldrh	r3, [r7, #30]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1ea      	bne.n	8006c80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	372c      	adds	r7, #44	; 0x2c
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0301 	and.w	r3, r3, #1
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <USB_CoreReset+0x64>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e01b      	b.n	8006d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	daf2      	bge.n	8006d08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f043 0201 	orr.w	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <USB_CoreReset+0x64>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d901      	bls.n	8006d44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e006      	b.n	8006d52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d0f0      	beq.n	8006d32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	00030d40 	.word	0x00030d40

08006d64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d64:	b084      	sub	sp, #16
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b086      	sub	sp, #24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d018      	beq.n	8006dec <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d10a      	bne.n	8006dd6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dce:	f043 0304 	orr.w	r3, r3, #4
 8006dd2:	6013      	str	r3, [r2, #0]
 8006dd4:	e014      	b.n	8006e00 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006de4:	f023 0304 	bic.w	r3, r3, #4
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	e009      	b.n	8006e00 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dfa:	f023 0304 	bic.w	r3, r3, #4
 8006dfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e00:	2110      	movs	r1, #16
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fe5e 	bl	8006ac4 <USB_FlushTxFifo>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7ff fe8a 	bl	8006b2c <USB_FlushRxFifo>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	e015      	b.n	8006e54 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 33ff 	mov.w	r3, #4294967295
 8006e3a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	3301      	adds	r3, #1
 8006e52:	613b      	str	r3, [r7, #16]
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d3e5      	bcc.n	8006e28 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f04f 32ff 	mov.w	r2, #4294967295
 8006e68:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e7c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a13      	ldr	r2, [pc, #76]	; (8006ed0 <USB_HostInit+0x16c>)
 8006e82:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a13      	ldr	r2, [pc, #76]	; (8006ed4 <USB_HostInit+0x170>)
 8006e88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006e8c:	e009      	b.n	8006ea2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2280      	movs	r2, #128	; 0x80
 8006e92:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <USB_HostInit+0x174>)
 8006e98:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a0f      	ldr	r2, [pc, #60]	; (8006edc <USB_HostInit+0x178>)
 8006e9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d105      	bne.n	8006eb4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f043 0210 	orr.w	r2, r3, #16
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <USB_HostInit+0x17c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3718      	adds	r7, #24
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ecc:	b004      	add	sp, #16
 8006ece:	4770      	bx	lr
 8006ed0:	01000200 	.word	0x01000200
 8006ed4:	00e00300 	.word	0x00e00300
 8006ed8:	00600080 	.word	0x00600080
 8006edc:	004000e0 	.word	0x004000e0
 8006ee0:	a3200008 	.word	0xa3200008

08006ee4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d107      	bne.n	8006f36 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f32:	6053      	str	r3, [r2, #4]
 8006f34:	e009      	b.n	8006f4a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f36:	78fb      	ldrb	r3, [r7, #3]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d106      	bne.n	8006f4a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f42:	461a      	mov	r2, r3
 8006f44:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f48:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f78:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f86:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006f88:	2064      	movs	r0, #100	; 0x64
 8006f8a:	f7fa fbbb 	bl	8001704 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f9a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006f9c:	200a      	movs	r0, #10
 8006f9e:	f7fa fbb1 	bl	8001704 <HAL_Delay>

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <USB_DriveVbus+0x44>
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d106      	bne.n	8006ff0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fee:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d109      	bne.n	8007010 <USB_DriveVbus+0x64>
 8006ffc:	78fb      	ldrb	r3, [r7, #3]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d106      	bne.n	8007010 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800700a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800700e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800702a:	2300      	movs	r3, #0
 800702c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	0c5b      	lsrs	r3, r3, #17
 800703c:	f003 0303 	and.w	r3, r3, #3
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	b29b      	uxth	r3, r3
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	4608      	mov	r0, r1
 800707a:	4611      	mov	r1, r2
 800707c:	461a      	mov	r2, r3
 800707e:	4603      	mov	r3, r0
 8007080:	70fb      	strb	r3, [r7, #3]
 8007082:	460b      	mov	r3, r1
 8007084:	70bb      	strb	r3, [r7, #2]
 8007086:	4613      	mov	r3, r2
 8007088:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007092:	78fb      	ldrb	r3, [r7, #3]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709e:	461a      	mov	r2, r3
 80070a0:	f04f 33ff 	mov.w	r3, #4294967295
 80070a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80070a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d87e      	bhi.n	80071ac <USB_HC_Init+0x13c>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <USB_HC_Init+0x44>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	0800716f 	.word	0x0800716f
 80070bc:	080070c5 	.word	0x080070c5
 80070c0:	08007131 	.word	0x08007131
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070c4:	78fb      	ldrb	r3, [r7, #3]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d0:	461a      	mov	r2, r3
 80070d2:	f240 439d 	movw	r3, #1181	; 0x49d
 80070d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80070d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da10      	bge.n	8007102 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	78fa      	ldrb	r2, [r7, #3]
 80070f0:	0151      	lsls	r1, r2, #5
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	440a      	add	r2, r1
 80070f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fe:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007100:	e057      	b.n	80071b2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d051      	beq.n	80071b2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4413      	add	r3, r2
 8007116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	440a      	add	r2, r1
 8007124:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007128:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800712c:	60d3      	str	r3, [r2, #12]
      break;
 800712e:	e040      	b.n	80071b2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800713c:	461a      	mov	r2, r3
 800713e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007142:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007144:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007148:	2b00      	cmp	r3, #0
 800714a:	da34      	bge.n	80071b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4413      	add	r3, r2
 8007154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	78fa      	ldrb	r2, [r7, #3]
 800715c:	0151      	lsls	r1, r2, #5
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	440a      	add	r2, r1
 8007162:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800716a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800716c:	e023      	b.n	80071b6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800716e:	78fb      	ldrb	r3, [r7, #3]
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	4413      	add	r3, r2
 8007176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717a:	461a      	mov	r2, r3
 800717c:	f240 2325 	movw	r3, #549	; 0x225
 8007180:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007182:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da17      	bge.n	80071ba <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071a4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80071a8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80071aa:	e006      	b.n	80071ba <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	77fb      	strb	r3, [r7, #31]
      break;
 80071b0:	e004      	b.n	80071bc <USB_HC_Init+0x14c>
      break;
 80071b2:	bf00      	nop
 80071b4:	e002      	b.n	80071bc <USB_HC_Init+0x14c>
      break;
 80071b6:	bf00      	nop
 80071b8:	e000      	b.n	80071bc <USB_HC_Init+0x14c>
      break;
 80071ba:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	78fa      	ldrb	r2, [r7, #3]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d6:	f043 0302 	orr.w	r3, r3, #2
 80071da:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	2101      	movs	r1, #1
 80071ec:	fa01 f303 	lsl.w	r3, r1, r3
 80071f0:	6939      	ldr	r1, [r7, #16]
 80071f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071f6:	4313      	orrs	r3, r2
 80071f8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007206:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800720a:	2b00      	cmp	r3, #0
 800720c:	da03      	bge.n	8007216 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800720e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e001      	b.n	800721a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff feff 	bl	800701e <USB_GetHostSpeed>
 8007220:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007222:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007226:	2b02      	cmp	r3, #2
 8007228:	d106      	bne.n	8007238 <USB_HC_Init+0x1c8>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d003      	beq.n	8007238 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007230:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e001      	b.n	800723c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800723c:	787b      	ldrb	r3, [r7, #1]
 800723e:	059b      	lsls	r3, r3, #22
 8007240:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007244:	78bb      	ldrb	r3, [r7, #2]
 8007246:	02db      	lsls	r3, r3, #11
 8007248:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800724c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800724e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007252:	049b      	lsls	r3, r3, #18
 8007254:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007258:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800725a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800725c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007260:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	0159      	lsls	r1, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	440b      	add	r3, r1
 800726e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007272:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007278:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800727a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800727e:	2b03      	cmp	r3, #3
 8007280:	d003      	beq.n	800728a <USB_HC_Init+0x21a>
 8007282:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007286:	2b01      	cmp	r3, #1
 8007288:	d10f      	bne.n	80072aa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	78fa      	ldrb	r2, [r7, #3]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	693a      	ldr	r2, [r7, #16]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072a8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80072aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3720      	adds	r7, #32
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08c      	sub	sp, #48	; 0x30
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	785b      	ldrb	r3, [r3, #1]
 80072ca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80072cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d02d      	beq.n	800733a <USB_HC_StartXfer+0x86>
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d129      	bne.n	800733a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d117      	bne.n	800731c <USB_HC_StartXfer+0x68>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	79db      	ldrb	r3, [r3, #7]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <USB_HC_StartXfer+0x48>
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	79db      	ldrb	r3, [r3, #7]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d10f      	bne.n	800731c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	0151      	lsls	r1, r2, #5
 800730e:	6a3a      	ldr	r2, [r7, #32]
 8007310:	440a      	add	r2, r1
 8007312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800731c:	79fb      	ldrb	r3, [r7, #7]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <USB_HC_StartXfer+0x86>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	795b      	ldrb	r3, [r3, #5]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d107      	bne.n	800733a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	4619      	mov	r1, r3
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f000 fa0f 	bl	8007754 <USB_DoPing>
      return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e0f8      	b.n	800752c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	8912      	ldrh	r2, [r2, #8]
 800734a:	4413      	add	r3, r2
 800734c:	3b01      	subs	r3, #1
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	8912      	ldrh	r2, [r2, #8]
 8007352:	fbb3 f3f2 	udiv	r3, r3, r2
 8007356:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007358:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800735a:	8b7b      	ldrh	r3, [r7, #26]
 800735c:	429a      	cmp	r2, r3
 800735e:	d90b      	bls.n	8007378 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007360:	8b7b      	ldrh	r3, [r7, #26]
 8007362:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	8912      	ldrh	r2, [r2, #8]
 800736a:	fb03 f202 	mul.w	r2, r3, r2
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	611a      	str	r2, [r3, #16]
 8007372:	e001      	b.n	8007378 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007374:	2301      	movs	r3, #1
 8007376:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	78db      	ldrb	r3, [r3, #3]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007380:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	8912      	ldrh	r2, [r2, #8]
 8007386:	fb03 f202 	mul.w	r2, r3, r2
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	611a      	str	r2, [r3, #16]
 800738e:	e003      	b.n	8007398 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	695a      	ldr	r2, [r3, #20]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80073a2:	04d9      	lsls	r1, r3, #19
 80073a4:	4b63      	ldr	r3, [pc, #396]	; (8007534 <USB_HC_StartXfer+0x280>)
 80073a6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073a8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	7a9b      	ldrb	r3, [r3, #10]
 80073ae:	075b      	lsls	r3, r3, #29
 80073b0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073b4:	69f9      	ldr	r1, [r7, #28]
 80073b6:	0148      	lsls	r0, r1, #5
 80073b8:	6a39      	ldr	r1, [r7, #32]
 80073ba:	4401      	add	r1, r0
 80073bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073c0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073c2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	68d9      	ldr	r1, [r3, #12]
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073da:	460a      	mov	r2, r1
 80073dc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80073de:	6a3b      	ldr	r3, [r7, #32]
 80073e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	bf0c      	ite	eq
 80073ee:	2301      	moveq	r3, #1
 80073f0:	2300      	movne	r3, #0
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	0151      	lsls	r1, r2, #5
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	440a      	add	r2, r1
 800740c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007410:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007414:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	015a      	lsls	r2, r3, #5
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	4413      	add	r3, r2
 800741e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	7e7b      	ldrb	r3, [r7, #25]
 8007426:	075b      	lsls	r3, r3, #29
 8007428:	69f9      	ldr	r1, [r7, #28]
 800742a:	0148      	lsls	r0, r1, #5
 800742c:	6a39      	ldr	r1, [r7, #32]
 800742e:	4401      	add	r1, r0
 8007430:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007434:	4313      	orrs	r3, r2
 8007436:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800744e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	78db      	ldrb	r3, [r3, #3]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d004      	beq.n	8007462 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	e003      	b.n	800746a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007468:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007470:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	4413      	add	r3, r2
 800747a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800747e:	461a      	mov	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800748a:	2300      	movs	r3, #0
 800748c:	e04e      	b.n	800752c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d149      	bne.n	800752a <USB_HC_StartXfer+0x276>
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d045      	beq.n	800752a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	79db      	ldrb	r3, [r3, #7]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d830      	bhi.n	8007508 <USB_HC_StartXfer+0x254>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USB_HC_StartXfer+0x1f8>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	080074bd 	.word	0x080074bd
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074bd 	.word	0x080074bd
 80074b8:	080074e1 	.word	0x080074e1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	3303      	adds	r3, #3
 80074c2:	089b      	lsrs	r3, r3, #2
 80074c4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80074c6:	8afa      	ldrh	r2, [r7, #22]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d91c      	bls.n	800750c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	f043 0220 	orr.w	r2, r3, #32
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80074de:	e015      	b.n	800750c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	3303      	adds	r3, #3
 80074e6:	089b      	lsrs	r3, r3, #2
 80074e8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80074ea:	8afa      	ldrh	r2, [r7, #22]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d90a      	bls.n	8007510 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	619a      	str	r2, [r3, #24]
        }
        break;
 8007506:	e003      	b.n	8007510 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007508:	bf00      	nop
 800750a:	e002      	b.n	8007512 <USB_HC_StartXfer+0x25e>
        break;
 800750c:	bf00      	nop
 800750e:	e000      	b.n	8007512 <USB_HC_StartXfer+0x25e>
        break;
 8007510:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68d9      	ldr	r1, [r3, #12]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	785a      	ldrb	r2, [r3, #1]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	b29b      	uxth	r3, r3
 8007520:	2000      	movs	r0, #0
 8007522:	9000      	str	r0, [sp, #0]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fb31 	bl	8006b8c <USB_WritePacket>
  }

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3728      	adds	r7, #40	; 0x28
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	1ff80000 	.word	0x1ff80000

08007538 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	b29b      	uxth	r3, r3
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800755a:	b480      	push	{r7}
 800755c:	b089      	sub	sp, #36	; 0x24
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	460b      	mov	r3, r1
 8007564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	015a      	lsls	r2, r3, #5
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	4413      	add	r3, r2
 800757a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	0c9b      	lsrs	r3, r3, #18
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	0fdb      	lsrs	r3, r3, #31
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0320 	and.w	r3, r3, #32
 80075a6:	2b20      	cmp	r3, #32
 80075a8:	d104      	bne.n	80075b4 <USB_HC_Halt+0x5a>
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e0c8      	b.n	8007746 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <USB_HC_Halt+0x66>
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d163      	bne.n	8007688 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	69fa      	ldr	r2, [r7, #28]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f040 80ab 	bne.w	8007744 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d133      	bne.n	8007662 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	4413      	add	r3, r2
 8007602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	440a      	add	r2, r1
 8007610:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007618:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007638:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007646:	d81d      	bhi.n	8007684 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800765a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800765e:	d0ec      	beq.n	800763a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007660:	e070      	b.n	8007744 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800767c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007680:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007682:	e05f      	b.n	8007744 <USB_HC_Halt+0x1ea>
            break;
 8007684:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007686:	e05d      	b.n	8007744 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	440a      	add	r2, r1
 800769e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076a6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d133      	bne.n	8007720 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	69fa      	ldr	r2, [r7, #28]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	69ba      	ldr	r2, [r7, #24]
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076f6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007704:	d81d      	bhi.n	8007742 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800771c:	d0ec      	beq.n	80076f8 <USB_HC_Halt+0x19e>
 800771e:	e011      	b.n	8007744 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	440a      	add	r2, r1
 8007736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800773a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	e000      	b.n	8007744 <USB_HC_Halt+0x1ea>
          break;
 8007742:	bf00      	nop
    }
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3724      	adds	r7, #36	; 0x24
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
	...

08007754 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007768:	2301      	movs	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	04da      	lsls	r2, r3, #19
 8007770:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <USB_DoPing+0x74>)
 8007772:	4013      	ands	r3, r2
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	0151      	lsls	r1, r2, #5
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	440a      	add	r2, r1
 800777c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007784:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800779c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b2:	461a      	mov	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	371c      	adds	r7, #28
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	1ff80000 	.word	0x1ff80000

080077cc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d4:	2300      	movs	r3, #0
 80077d6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff f911 	bl	8006a08 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077e6:	2110      	movs	r1, #16
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff f96b 	bl	8006ac4 <USB_FlushTxFifo>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f7ff f997 	bl	8006b2c <USB_FlushRxFifo>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	e01f      	b.n	800784e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007824:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800782c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007834:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	4413      	add	r3, r2
 800783e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007842:	461a      	mov	r2, r3
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	3301      	adds	r3, #1
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	2b0f      	cmp	r3, #15
 8007852:	d9dc      	bls.n	800780e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]
 8007858:	e034      	b.n	80078c4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007870:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007878:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007880:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788e:	461a      	mov	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078a0:	d80c      	bhi.n	80078bc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b8:	d0ec      	beq.n	8007894 <USB_StopHost+0xc8>
 80078ba:	e000      	b.n	80078be <USB_StopHost+0xf2>
        break;
 80078bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	2b0f      	cmp	r3, #15
 80078c8:	d9c7      	bls.n	800785a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078d0:	461a      	mov	r2, r3
 80078d2:	f04f 33ff 	mov.w	r3, #4294967295
 80078d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f04f 32ff 	mov.w	r2, #4294967295
 80078de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7ff f880 	bl	80069e6 <USB_EnableGlobalInt>

  return ret;
 80078e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80078f4:	4904      	ldr	r1, [pc, #16]	; (8007908 <MX_FATFS_Init+0x18>)
 80078f6:	4805      	ldr	r0, [pc, #20]	; (800790c <MX_FATFS_Init+0x1c>)
 80078f8:	f005 fc98 	bl	800d22c <FATFS_LinkDriver>
 80078fc:	4603      	mov	r3, r0
 80078fe:	461a      	mov	r2, r3
 8007900:	4b03      	ldr	r3, [pc, #12]	; (8007910 <MX_FATFS_Init+0x20>)
 8007902:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007904:	bf00      	nop
 8007906:	bd80      	pop	{r7, pc}
 8007908:	2000143c 	.word	0x2000143c
 800790c:	0800dc14 	.word	0x0800dc14
 8007910:	20001438 	.word	0x20001438

08007914 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007914:	b480      	push	{r7}
 8007916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007918:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800791a:	4618      	mov	r0, r3
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	4619      	mov	r1, r3
 800794e:	4808      	ldr	r0, [pc, #32]	; (8007970 <USBH_status+0x34>)
 8007950:	f000 fe32 	bl	80085b8 <USBH_MSC_UnitIsReady>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d002      	beq.n	8007960 <USBH_status+0x24>
  {
    res = RES_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	73fb      	strb	r3, [r7, #15]
 800795e:	e001      	b.n	8007964 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200016a4 	.word	0x200016a4

08007974 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b094      	sub	sp, #80	; 0x50
 8007978:	af02      	add	r7, sp, #8
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	4603      	mov	r3, r0
 8007982:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800798a:	7bf9      	ldrb	r1, [r7, #15]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	4813      	ldr	r0, [pc, #76]	; (80079e4 <USBH_read+0x70>)
 8007996:	f000 fe59 	bl	800864c <USBH_MSC_Read>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d103      	bne.n	80079a8 <USBH_read+0x34>
  {
    res = RES_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079a6:	e017      	b.n	80079d8 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80079a8:	f107 0210 	add.w	r2, r7, #16
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4619      	mov	r1, r3
 80079b0:	480c      	ldr	r0, [pc, #48]	; (80079e4 <USBH_read+0x70>)
 80079b2:	f000 fe27 	bl	8008604 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80079b6:	7f7b      	ldrb	r3, [r7, #29]
 80079b8:	2b3a      	cmp	r3, #58	; 0x3a
 80079ba:	d005      	beq.n	80079c8 <USBH_read+0x54>
 80079bc:	2b3a      	cmp	r3, #58	; 0x3a
 80079be:	dc07      	bgt.n	80079d0 <USBH_read+0x5c>
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d001      	beq.n	80079c8 <USBH_read+0x54>
 80079c4:	2b28      	cmp	r3, #40	; 0x28
 80079c6:	d103      	bne.n	80079d0 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80079c8:	2303      	movs	r3, #3
 80079ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80079ce:	e003      	b.n	80079d8 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80079d6:	bf00      	nop
    }
  }

  return res;
 80079d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3748      	adds	r7, #72	; 0x48
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	200016a4 	.word	0x200016a4

080079e8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b094      	sub	sp, #80	; 0x50
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	4603      	mov	r3, r0
 80079f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80079fe:	7bf9      	ldrb	r1, [r7, #15]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4817      	ldr	r0, [pc, #92]	; (8007a68 <USBH_write+0x80>)
 8007a0a:	f000 fe88 	bl	800871e <USBH_MSC_Write>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <USBH_write+0x34>
  {
    res = RES_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a1a:	e01f      	b.n	8007a5c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007a1c:	f107 0210 	add.w	r2, r7, #16
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	4619      	mov	r1, r3
 8007a24:	4810      	ldr	r0, [pc, #64]	; (8007a68 <USBH_write+0x80>)
 8007a26:	f000 fded 	bl	8008604 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007a2a:	7f7b      	ldrb	r3, [r7, #29]
 8007a2c:	2b3a      	cmp	r3, #58	; 0x3a
 8007a2e:	d00d      	beq.n	8007a4c <USBH_write+0x64>
 8007a30:	2b3a      	cmp	r3, #58	; 0x3a
 8007a32:	dc0f      	bgt.n	8007a54 <USBH_write+0x6c>
 8007a34:	2b28      	cmp	r3, #40	; 0x28
 8007a36:	d009      	beq.n	8007a4c <USBH_write+0x64>
 8007a38:	2b28      	cmp	r3, #40	; 0x28
 8007a3a:	dc0b      	bgt.n	8007a54 <USBH_write+0x6c>
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d005      	beq.n	8007a4c <USBH_write+0x64>
 8007a40:	2b27      	cmp	r3, #39	; 0x27
 8007a42:	d107      	bne.n	8007a54 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007a44:	2302      	movs	r3, #2
 8007a46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a4a:	e007      	b.n	8007a5c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a52:	e003      	b.n	8007a5c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007a5a:	bf00      	nop
    }
  }

  return res;
 8007a5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3748      	adds	r7, #72	; 0x48
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	200016a4 	.word	0x200016a4

08007a6c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b090      	sub	sp, #64	; 0x40
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	4603      	mov	r3, r0
 8007a74:	603a      	str	r2, [r7, #0]
 8007a76:	71fb      	strb	r3, [r7, #7]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007a82:	79bb      	ldrb	r3, [r7, #6]
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d852      	bhi.n	8007b2e <USBH_ioctl+0xc2>
 8007a88:	a201      	add	r2, pc, #4	; (adr r2, 8007a90 <USBH_ioctl+0x24>)
 8007a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8e:	bf00      	nop
 8007a90:	08007aa1 	.word	0x08007aa1
 8007a94:	08007aa9 	.word	0x08007aa9
 8007a98:	08007ad3 	.word	0x08007ad3
 8007a9c:	08007aff 	.word	0x08007aff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007aa6:	e045      	b.n	8007b34 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007aa8:	f107 0208 	add.w	r2, r7, #8
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4823      	ldr	r0, [pc, #140]	; (8007b40 <USBH_ioctl+0xd4>)
 8007ab2:	f000 fda7 	bl	8008604 <USBH_MSC_GetLUNInfo>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007ac8:	e034      	b.n	8007b34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007ad0:	e030      	b.n	8007b34 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007ad2:	f107 0208 	add.w	r2, r7, #8
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4819      	ldr	r0, [pc, #100]	; (8007b40 <USBH_ioctl+0xd4>)
 8007adc:	f000 fd92 	bl	8008604 <USBH_MSC_GetLUNInfo>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d107      	bne.n	8007af6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007ae6:	8a3b      	ldrh	r3, [r7, #16]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007af4:	e01e      	b.n	8007b34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007afc:	e01a      	b.n	8007b34 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007afe:	f107 0208 	add.w	r2, r7, #8
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	4619      	mov	r1, r3
 8007b06:	480e      	ldr	r0, [pc, #56]	; (8007b40 <USBH_ioctl+0xd4>)
 8007b08:	f000 fd7c 	bl	8008604 <USBH_MSC_GetLUNInfo>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007b12:	8a3b      	ldrh	r3, [r7, #16]
 8007b14:	0a5b      	lsrs	r3, r3, #9
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	461a      	mov	r2, r3
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007b24:	e006      	b.n	8007b34 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007b2c:	e002      	b.n	8007b34 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007b2e:	2304      	movs	r3, #4
 8007b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3740      	adds	r7, #64	; 0x40
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	200016a4 	.word	0x200016a4

08007b44 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b089      	sub	sp, #36	; 0x24
 8007b48:	af04      	add	r7, sp, #16
 8007b4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b52:	7919      	ldrb	r1, [r3, #4]
 8007b54:	2350      	movs	r3, #80	; 0x50
 8007b56:	2206      	movs	r2, #6
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 fc6b 	bl	8009434 <USBH_FindInterface>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	2bff      	cmp	r3, #255	; 0xff
 8007b66:	d002      	beq.n	8007b6e <USBH_MSC_InterfaceInit+0x2a>
 8007b68:	7bfb      	ldrb	r3, [r7, #15]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d901      	bls.n	8007b72 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e106      	b.n	8007d80 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f001 fc40 	bl	80093fc <USBH_SelectInterface>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007b86:	2302      	movs	r3, #2
 8007b88:	e0fa      	b.n	8007d80 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007b90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b94:	f005 fe6c 	bl	800d870 <malloc>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007bac:	2302      	movs	r3, #2
 8007bae:	e0e7      	b.n	8007d80 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	68b8      	ldr	r0, [r7, #8]
 8007bb8:	f005 ff16 	bl	800d9e8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	211a      	movs	r1, #26
 8007bc2:	fb01 f303 	mul.w	r3, r1, r3
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	b25b      	sxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da16      	bge.n	8007c02 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	211a      	movs	r1, #26
 8007bda:	fb01 f303 	mul.w	r3, r1, r3
 8007bde:	4413      	add	r3, r2
 8007be0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007be4:	781a      	ldrb	r2, [r3, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	211a      	movs	r1, #26
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007bfa:	881a      	ldrh	r2, [r3, #0]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	815a      	strh	r2, [r3, #10]
 8007c00:	e015      	b.n	8007c2e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	211a      	movs	r1, #26
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	211a      	movs	r1, #26
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007c28:	881a      	ldrh	r2, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	211a      	movs	r1, #26
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da16      	bge.n	8007c74 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	211a      	movs	r1, #26
 8007c4c:	fb01 f303 	mul.w	r3, r1, r3
 8007c50:	4413      	add	r3, r2
 8007c52:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c56:	781a      	ldrb	r2, [r3, #0]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	211a      	movs	r1, #26
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c6c:	881a      	ldrh	r2, [r3, #0]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	815a      	strh	r2, [r3, #10]
 8007c72:	e015      	b.n	8007ca0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	211a      	movs	r1, #26
 8007c7a:	fb01 f303 	mul.w	r3, r1, r3
 8007c7e:	4413      	add	r3, r2
 8007c80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	211a      	movs	r1, #26
 8007c90:	fb01 f303 	mul.w	r3, r1, r3
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007c9a:	881a      	ldrh	r2, [r3, #0]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	799b      	ldrb	r3, [r3, #6]
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f002 fed8 	bl	800aa6e <USBH_AllocPipe>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f002 fece 	bl	800aa6e <USBH_AllocPipe>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fdc4 	bl	8008868 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	799b      	ldrb	r3, [r3, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01e      	beq.n	8007d26 <USBH_MSC_InterfaceInit+0x1e2>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	891b      	ldrh	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01a      	beq.n	8007d26 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	7959      	ldrb	r1, [r3, #5]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	7998      	ldrb	r0, [r3, #6]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	8912      	ldrh	r2, [r2, #8]
 8007d08:	9202      	str	r2, [sp, #8]
 8007d0a:	2202      	movs	r2, #2
 8007d0c:	9201      	str	r2, [sp, #4]
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	4623      	mov	r3, r4
 8007d12:	4602      	mov	r2, r0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f002 fe7b 	bl	800aa10 <USBH_OpenPipe>
 8007d1a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	79db      	ldrb	r3, [r3, #7]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d02c      	beq.n	8007d7e <USBH_MSC_InterfaceInit+0x23a>
 8007d24:	e001      	b.n	8007d2a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e02a      	b.n	8007d80 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	895b      	ldrh	r3, [r3, #10]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d025      	beq.n	8007d7e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	7919      	ldrb	r1, [r3, #4]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	79d8      	ldrb	r0, [r3, #7]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	8952      	ldrh	r2, [r2, #10]
 8007d4a:	9202      	str	r2, [sp, #8]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	4623      	mov	r3, r4
 8007d54:	4602      	mov	r2, r0
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f002 fe5a 	bl	800aa10 <USBH_OpenPipe>
 8007d5c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	791b      	ldrb	r3, [r3, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f005 fceb 	bl	800d742 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	795b      	ldrb	r3, [r3, #5]
 8007d70:	2200      	movs	r2, #0
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f005 fce4 	bl	800d742 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	e000      	b.n	8007d80 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8007d7e:	2303      	movs	r3, #3
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd90      	pop	{r4, r7, pc}

08007d88 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	795b      	ldrb	r3, [r3, #5]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00e      	beq.n	8007dc0 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	795b      	ldrb	r3, [r3, #5]
 8007da6:	4619      	mov	r1, r3
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f002 fe50 	bl	800aa4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	795b      	ldrb	r3, [r3, #5]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f002 fe7b 	bl	800aab0 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	791b      	ldrb	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f002 fe3d 	bl	800aa4e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	791b      	ldrb	r3, [r3, #4]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f002 fe68 	bl	800aab0 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00b      	beq.n	8007e0a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f005 fd40 	bl	800d880 <free>
    phost->pActiveClass->pData = 0U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e06:	2200      	movs	r2, #0
 8007e08:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e22:	69db      	ldr	r3, [r3, #28]
 8007e24:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e26:	2301      	movs	r3, #1
 8007e28:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	7b9b      	ldrb	r3, [r3, #14]
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d041      	beq.n	8007eb6 <USBH_MSC_ClassRequest+0xa2>
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	dc4b      	bgt.n	8007ece <USBH_MSC_ClassRequest+0xba>
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <USBH_MSC_ClassRequest+0x2a>
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d147      	bne.n	8007ece <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 fcf1 	bl	800882a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d104      	bne.n	8007e5c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2200      	movs	r2, #0
 8007e56:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d137      	bne.n	8007ed2 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d804      	bhi.n	8007e74 <USBH_MSC_ClassRequest+0x60>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	e000      	b.n	8007e76 <USBH_MSC_ClassRequest+0x62>
 8007e74:	2202      	movs	r2, #2
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73bb      	strb	r3, [r7, #14]
 8007e7e:	e014      	b.n	8007eaa <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	2134      	movs	r1, #52	; 0x34
 8007e86:	fb01 f303 	mul.w	r3, r1, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3392      	adds	r3, #146	; 0x92
 8007e8e:	2202      	movs	r2, #2
 8007e90:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	2134      	movs	r1, #52	; 0x34
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	4413      	add	r3, r2
 8007e9e:	33c1      	adds	r3, #193	; 0xc1
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	73bb      	strb	r3, [r7, #14]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	7bba      	ldrb	r2, [r7, #14]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d3e5      	bcc.n	8007e80 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8007eb4:	e00d      	b.n	8007ed2 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f002 f888 	bl	8009fce <USBH_ClrFeature>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d108      	bne.n	8007ed6 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	7bda      	ldrb	r2, [r3, #15]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007ecc:	e003      	b.n	8007ed6 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007ece:	bf00      	nop
 8007ed0:	e002      	b.n	8007ed8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007ed2:	bf00      	nop
 8007ed4:	e000      	b.n	8007ed8 <USBH_MSC_ClassRequest+0xc4>
      break;
 8007ed6:	bf00      	nop
  }

  return status;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
	...

08007ee4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8007efa:	2301      	movs	r3, #1
 8007efc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8007efe:	2301      	movs	r3, #1
 8007f00:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	7b1b      	ldrb	r3, [r3, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <USBH_MSC_Process+0x2e>
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	f000 8271 	beq.w	80083f2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8007f10:	e272      	b.n	80083f8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	f080 824f 	bcs.w	80083c2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	2334      	movs	r3, #52	; 0x34
 8007f30:	fb01 f303 	mul.w	r3, r1, r3
 8007f34:	4413      	add	r3, r2
 8007f36:	3391      	adds	r3, #145	; 0x91
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f42:	4619      	mov	r1, r3
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	2334      	movs	r3, #52	; 0x34
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3390      	adds	r3, #144	; 0x90
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	f200 8243 	bhi.w	80083de <USBH_MSC_Process+0x4fa>
 8007f58:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <USBH_MSC_Process+0x7c>)
 8007f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5e:	bf00      	nop
 8007f60:	08007f85 	.word	0x08007f85
 8007f64:	080083df 	.word	0x080083df
 8007f68:	0800804d 	.word	0x0800804d
 8007f6c:	080081d1 	.word	0x080081d1
 8007f70:	08007fab 	.word	0x08007fab
 8007f74:	0800829d 	.word	0x0800829d
 8007f78:	080083df 	.word	0x080083df
 8007f7c:	080083df 	.word	0x080083df
 8007f80:	080083b1 	.word	0x080083b1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	2334      	movs	r3, #52	; 0x34
 8007f90:	fb01 f303 	mul.w	r3, r1, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	3390      	adds	r3, #144	; 0x90
 8007f98:	2204      	movs	r2, #4
 8007f9a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8007fa8:	e222      	b.n	80083f0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fb0:	b2d9      	uxtb	r1, r3
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2334      	movs	r3, #52	; 0x34
 8007fbc:	fb02 f303 	mul.w	r3, r2, r3
 8007fc0:	3398      	adds	r3, #152	; 0x98
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3307      	adds	r3, #7
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 ff6a 	bl	8008ea4 <USBH_MSC_SCSI_Inquiry>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10b      	bne.n	8007ff2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	2334      	movs	r3, #52	; 0x34
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	4413      	add	r3, r2
 8007fec:	3390      	adds	r3, #144	; 0x90
 8007fee:	2202      	movs	r2, #2
 8007ff0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d10c      	bne.n	8008012 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007ffe:	4619      	mov	r1, r3
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	2334      	movs	r3, #52	; 0x34
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	4413      	add	r3, r2
 800800a:	3390      	adds	r3, #144	; 0x90
 800800c:	2205      	movs	r2, #5
 800800e:	701a      	strb	r2, [r3, #0]
            break;
 8008010:	e1e7      	b.n	80083e2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b04      	cmp	r3, #4
 8008016:	f040 81e4 	bne.w	80083e2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008020:	4619      	mov	r1, r3
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	2334      	movs	r3, #52	; 0x34
 8008026:	fb01 f303 	mul.w	r3, r1, r3
 800802a:	4413      	add	r3, r2
 800802c:	3390      	adds	r3, #144	; 0x90
 800802e:	2201      	movs	r2, #1
 8008030:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008038:	4619      	mov	r1, r3
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	2334      	movs	r3, #52	; 0x34
 800803e:	fb01 f303 	mul.w	r3, r1, r3
 8008042:	4413      	add	r3, r2
 8008044:	3391      	adds	r3, #145	; 0x91
 8008046:	2202      	movs	r2, #2
 8008048:	701a      	strb	r2, [r3, #0]
            break;
 800804a:	e1ca      	b.n	80083e2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008052:	b2db      	uxtb	r3, r3
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fe66 	bl	8008d28 <USBH_MSC_SCSI_TestUnitReady>
 800805c:	4603      	mov	r3, r0
 800805e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008060:	7bbb      	ldrb	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d149      	bne.n	80080fa <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800806c:	4619      	mov	r1, r3
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	2334      	movs	r3, #52	; 0x34
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	3392      	adds	r3, #146	; 0x92
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00c      	beq.n	800809a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008086:	4619      	mov	r1, r3
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	2334      	movs	r3, #52	; 0x34
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	33c1      	adds	r3, #193	; 0xc1
 8008094:	2201      	movs	r2, #1
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e00b      	b.n	80080b2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080a0:	4619      	mov	r1, r3
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	2334      	movs	r3, #52	; 0x34
 80080a6:	fb01 f303 	mul.w	r3, r1, r3
 80080aa:	4413      	add	r3, r2
 80080ac:	33c1      	adds	r3, #193	; 0xc1
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080b8:	4619      	mov	r1, r3
 80080ba:	693a      	ldr	r2, [r7, #16]
 80080bc:	2334      	movs	r3, #52	; 0x34
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	3390      	adds	r3, #144	; 0x90
 80080c6:	2203      	movs	r2, #3
 80080c8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080d0:	4619      	mov	r1, r3
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	2334      	movs	r3, #52	; 0x34
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	4413      	add	r3, r2
 80080dc:	3391      	adds	r3, #145	; 0x91
 80080de:	2200      	movs	r2, #0
 80080e0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080e8:	4619      	mov	r1, r3
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	2334      	movs	r3, #52	; 0x34
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	4413      	add	r3, r2
 80080f4:	3392      	adds	r3, #146	; 0x92
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d14a      	bne.n	8008196 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008106:	4619      	mov	r1, r3
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	2334      	movs	r3, #52	; 0x34
 800810c:	fb01 f303 	mul.w	r3, r1, r3
 8008110:	4413      	add	r3, r2
 8008112:	3392      	adds	r3, #146	; 0x92
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d00c      	beq.n	8008134 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008120:	4619      	mov	r1, r3
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	2334      	movs	r3, #52	; 0x34
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	33c1      	adds	r3, #193	; 0xc1
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e00b      	b.n	800814c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800813a:	4619      	mov	r1, r3
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	2334      	movs	r3, #52	; 0x34
 8008140:	fb01 f303 	mul.w	r3, r1, r3
 8008144:	4413      	add	r3, r2
 8008146:	33c1      	adds	r3, #193	; 0xc1
 8008148:	2200      	movs	r2, #0
 800814a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008152:	4619      	mov	r1, r3
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	2334      	movs	r3, #52	; 0x34
 8008158:	fb01 f303 	mul.w	r3, r1, r3
 800815c:	4413      	add	r3, r2
 800815e:	3390      	adds	r3, #144	; 0x90
 8008160:	2205      	movs	r2, #5
 8008162:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800816a:	4619      	mov	r1, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	2334      	movs	r3, #52	; 0x34
 8008170:	fb01 f303 	mul.w	r3, r1, r3
 8008174:	4413      	add	r3, r2
 8008176:	3391      	adds	r3, #145	; 0x91
 8008178:	2201      	movs	r2, #1
 800817a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008182:	4619      	mov	r1, r3
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	2334      	movs	r3, #52	; 0x34
 8008188:	fb01 f303 	mul.w	r3, r1, r3
 800818c:	4413      	add	r3, r2
 800818e:	3392      	adds	r3, #146	; 0x92
 8008190:	2202      	movs	r2, #2
 8008192:	701a      	strb	r2, [r3, #0]
            break;
 8008194:	e127      	b.n	80083e6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008196:	7bbb      	ldrb	r3, [r7, #14]
 8008198:	2b04      	cmp	r3, #4
 800819a:	f040 8124 	bne.w	80083e6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081a4:	4619      	mov	r1, r3
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	2334      	movs	r3, #52	; 0x34
 80081aa:	fb01 f303 	mul.w	r3, r1, r3
 80081ae:	4413      	add	r3, r2
 80081b0:	3390      	adds	r3, #144	; 0x90
 80081b2:	2201      	movs	r2, #1
 80081b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081bc:	4619      	mov	r1, r3
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	2334      	movs	r3, #52	; 0x34
 80081c2:	fb01 f303 	mul.w	r3, r1, r3
 80081c6:	4413      	add	r3, r2
 80081c8:	3391      	adds	r3, #145	; 0x91
 80081ca:	2202      	movs	r2, #2
 80081cc:	701a      	strb	r2, [r3, #0]
            break;
 80081ce:	e10a      	b.n	80083e6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081de:	461a      	mov	r2, r3
 80081e0:	2334      	movs	r3, #52	; 0x34
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	3390      	adds	r3, #144	; 0x90
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4413      	add	r3, r2
 80081ec:	3304      	adds	r3, #4
 80081ee:	461a      	mov	r2, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fddc 	bl	8008dae <USBH_MSC_SCSI_ReadCapacity>
 80081f6:	4603      	mov	r3, r0
 80081f8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d120      	bne.n	8008242 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008206:	4619      	mov	r1, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	2334      	movs	r3, #52	; 0x34
 800820c:	fb01 f303 	mul.w	r3, r1, r3
 8008210:	4413      	add	r3, r2
 8008212:	3390      	adds	r3, #144	; 0x90
 8008214:	2201      	movs	r2, #1
 8008216:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800821e:	4619      	mov	r1, r3
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	2334      	movs	r3, #52	; 0x34
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	3391      	adds	r3, #145	; 0x91
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008236:	3301      	adds	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008240:	e0d3      	b.n	80083ea <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d10c      	bne.n	8008262 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800824e:	4619      	mov	r1, r3
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	2334      	movs	r3, #52	; 0x34
 8008254:	fb01 f303 	mul.w	r3, r1, r3
 8008258:	4413      	add	r3, r2
 800825a:	3390      	adds	r3, #144	; 0x90
 800825c:	2205      	movs	r2, #5
 800825e:	701a      	strb	r2, [r3, #0]
            break;
 8008260:	e0c3      	b.n	80083ea <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008262:	7bfb      	ldrb	r3, [r7, #15]
 8008264:	2b04      	cmp	r3, #4
 8008266:	f040 80c0 	bne.w	80083ea <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008270:	4619      	mov	r1, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	2334      	movs	r3, #52	; 0x34
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	3390      	adds	r3, #144	; 0x90
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008288:	4619      	mov	r1, r3
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	2334      	movs	r3, #52	; 0x34
 800828e:	fb01 f303 	mul.w	r3, r1, r3
 8008292:	4413      	add	r3, r2
 8008294:	3391      	adds	r3, #145	; 0x91
 8008296:	2202      	movs	r2, #2
 8008298:	701a      	strb	r2, [r3, #0]
            break;
 800829a:	e0a6      	b.n	80083ea <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082a2:	b2d9      	uxtb	r1, r3
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082aa:	461a      	mov	r2, r3
 80082ac:	2334      	movs	r3, #52	; 0x34
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	3398      	adds	r3, #152	; 0x98
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	4413      	add	r3, r2
 80082b8:	3304      	adds	r3, #4
 80082ba:	461a      	mov	r2, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fe96 	bl	8008fee <USBH_MSC_SCSI_RequestSense>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d145      	bne.n	8008358 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082d2:	4619      	mov	r1, r3
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	2334      	movs	r3, #52	; 0x34
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	4413      	add	r3, r2
 80082de:	339c      	adds	r3, #156	; 0x9c
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b06      	cmp	r3, #6
 80082e4:	d00c      	beq.n	8008300 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ec:	4619      	mov	r1, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	2334      	movs	r3, #52	; 0x34
 80082f2:	fb01 f303 	mul.w	r3, r1, r3
 80082f6:	4413      	add	r3, r2
 80082f8:	339c      	adds	r3, #156	; 0x9c
 80082fa:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d117      	bne.n	8008330 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008312:	4293      	cmp	r3, r2
 8008314:	d80c      	bhi.n	8008330 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800831c:	4619      	mov	r1, r3
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	2334      	movs	r3, #52	; 0x34
 8008322:	fb01 f303 	mul.w	r3, r1, r3
 8008326:	4413      	add	r3, r2
 8008328:	3390      	adds	r3, #144	; 0x90
 800832a:	2202      	movs	r2, #2
 800832c:	701a      	strb	r2, [r3, #0]
                  break;
 800832e:	e05f      	b.n	80083f0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008336:	4619      	mov	r1, r3
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	2334      	movs	r3, #52	; 0x34
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	4413      	add	r3, r2
 8008342:	3390      	adds	r3, #144	; 0x90
 8008344:	2201      	movs	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800834e:	3301      	adds	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d10c      	bne.n	8008378 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008364:	4619      	mov	r1, r3
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	2334      	movs	r3, #52	; 0x34
 800836a:	fb01 f303 	mul.w	r3, r1, r3
 800836e:	4413      	add	r3, r2
 8008370:	3390      	adds	r3, #144	; 0x90
 8008372:	2208      	movs	r2, #8
 8008374:	701a      	strb	r2, [r3, #0]
            break;
 8008376:	e03a      	b.n	80083ee <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d137      	bne.n	80083ee <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008384:	4619      	mov	r1, r3
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	2334      	movs	r3, #52	; 0x34
 800838a:	fb01 f303 	mul.w	r3, r1, r3
 800838e:	4413      	add	r3, r2
 8008390:	3390      	adds	r3, #144	; 0x90
 8008392:	2201      	movs	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839c:	4619      	mov	r1, r3
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	2334      	movs	r3, #52	; 0x34
 80083a2:	fb01 f303 	mul.w	r3, r1, r3
 80083a6:	4413      	add	r3, r2
 80083a8:	3391      	adds	r3, #145	; 0x91
 80083aa:	2202      	movs	r2, #2
 80083ac:	701a      	strb	r2, [r3, #0]
            break;
 80083ae:	e01e      	b.n	80083ee <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083b6:	3301      	adds	r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80083c0:	e016      	b.n	80083f0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2201      	movs	r2, #1
 80083ce:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80083d6:	2102      	movs	r1, #2
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	4798      	blx	r3
      break;
 80083dc:	e00c      	b.n	80083f8 <USBH_MSC_Process+0x514>
            break;
 80083de:	bf00      	nop
 80083e0:	e00a      	b.n	80083f8 <USBH_MSC_Process+0x514>
            break;
 80083e2:	bf00      	nop
 80083e4:	e008      	b.n	80083f8 <USBH_MSC_Process+0x514>
            break;
 80083e6:	bf00      	nop
 80083e8:	e006      	b.n	80083f8 <USBH_MSC_Process+0x514>
            break;
 80083ea:	bf00      	nop
 80083ec:	e004      	b.n	80083f8 <USBH_MSC_Process+0x514>
            break;
 80083ee:	bf00      	nop
      break;
 80083f0:	e002      	b.n	80083f8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	bf00      	nop
  }
  return error;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop

08008404 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b088      	sub	sp, #32
 800841e:	af02      	add	r7, sp, #8
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008430:	2301      	movs	r3, #1
 8008432:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008434:	2301      	movs	r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	2134      	movs	r1, #52	; 0x34
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	3390      	adds	r3, #144	; 0x90
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b07      	cmp	r3, #7
 800844a:	d03c      	beq.n	80084c6 <USBH_MSC_RdWrProcess+0xac>
 800844c:	2b07      	cmp	r3, #7
 800844e:	f300 80a7 	bgt.w	80085a0 <USBH_MSC_RdWrProcess+0x186>
 8008452:	2b05      	cmp	r3, #5
 8008454:	d06c      	beq.n	8008530 <USBH_MSC_RdWrProcess+0x116>
 8008456:	2b06      	cmp	r3, #6
 8008458:	f040 80a2 	bne.w	80085a0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800845c:	78f9      	ldrb	r1, [r7, #3]
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	2300      	movs	r3, #0
 8008464:	2200      	movs	r2, #0
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fea5 	bl	80091b6 <USBH_MSC_SCSI_Read>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10b      	bne.n	800848e <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	2134      	movs	r1, #52	; 0x34
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	4413      	add	r3, r2
 8008482:	3390      	adds	r3, #144	; 0x90
 8008484:	2201      	movs	r2, #1
 8008486:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800848c:	e08a      	b.n	80085a4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	2b02      	cmp	r3, #2
 8008492:	d109      	bne.n	80084a8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	2134      	movs	r1, #52	; 0x34
 800849a:	fb01 f303 	mul.w	r3, r1, r3
 800849e:	4413      	add	r3, r2
 80084a0:	3390      	adds	r3, #144	; 0x90
 80084a2:	2205      	movs	r2, #5
 80084a4:	701a      	strb	r2, [r3, #0]
      break;
 80084a6:	e07d      	b.n	80085a4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d17a      	bne.n	80085a4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80084ae:	78fb      	ldrb	r3, [r7, #3]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	2134      	movs	r1, #52	; 0x34
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	4413      	add	r3, r2
 80084ba:	3390      	adds	r3, #144	; 0x90
 80084bc:	2208      	movs	r2, #8
 80084be:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80084c0:	2302      	movs	r3, #2
 80084c2:	75fb      	strb	r3, [r7, #23]
      break;
 80084c4:	e06e      	b.n	80085a4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80084c6:	78f9      	ldrb	r1, [r7, #3]
 80084c8:	2300      	movs	r3, #0
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	2300      	movs	r3, #0
 80084ce:	2200      	movs	r2, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fe05 	bl	80090e0 <USBH_MSC_SCSI_Write>
 80084d6:	4603      	mov	r3, r0
 80084d8:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80084da:	7bfb      	ldrb	r3, [r7, #15]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10b      	bne.n	80084f8 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	2134      	movs	r1, #52	; 0x34
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	3390      	adds	r3, #144	; 0x90
 80084ee:	2201      	movs	r2, #1
 80084f0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80084f2:	2300      	movs	r3, #0
 80084f4:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084f6:	e057      	b.n	80085a8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d109      	bne.n	8008512 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80084fe:	78fb      	ldrb	r3, [r7, #3]
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	2134      	movs	r1, #52	; 0x34
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	4413      	add	r3, r2
 800850a:	3390      	adds	r3, #144	; 0x90
 800850c:	2205      	movs	r2, #5
 800850e:	701a      	strb	r2, [r3, #0]
      break;
 8008510:	e04a      	b.n	80085a8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b04      	cmp	r3, #4
 8008516:	d147      	bne.n	80085a8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	693a      	ldr	r2, [r7, #16]
 800851c:	2134      	movs	r1, #52	; 0x34
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	4413      	add	r3, r2
 8008524:	3390      	adds	r3, #144	; 0x90
 8008526:	2208      	movs	r2, #8
 8008528:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	75fb      	strb	r3, [r7, #23]
      break;
 800852e:	e03b      	b.n	80085a8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	2234      	movs	r2, #52	; 0x34
 8008534:	fb02 f303 	mul.w	r3, r2, r3
 8008538:	3398      	adds	r3, #152	; 0x98
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	4413      	add	r3, r2
 800853e:	1d1a      	adds	r2, r3, #4
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fd52 	bl	8008fee <USBH_MSC_SCSI_RequestSense>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d113      	bne.n	800857c <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	2134      	movs	r1, #52	; 0x34
 800855a:	fb01 f303 	mul.w	r3, r1, r3
 800855e:	4413      	add	r3, r2
 8008560:	3390      	adds	r3, #144	; 0x90
 8008562:	2201      	movs	r2, #1
 8008564:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	693a      	ldr	r2, [r7, #16]
 800856a:	2134      	movs	r1, #52	; 0x34
 800856c:	fb01 f303 	mul.w	r3, r1, r3
 8008570:	4413      	add	r3, r2
 8008572:	3391      	adds	r3, #145	; 0x91
 8008574:	2202      	movs	r2, #2
 8008576:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8008578:	2302      	movs	r3, #2
 800857a:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	2b02      	cmp	r3, #2
 8008580:	d014      	beq.n	80085ac <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	2b04      	cmp	r3, #4
 8008586:	d111      	bne.n	80085ac <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	2134      	movs	r1, #52	; 0x34
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	3390      	adds	r3, #144	; 0x90
 8008596:	2208      	movs	r2, #8
 8008598:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800859a:	2302      	movs	r3, #2
 800859c:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800859e:	e005      	b.n	80085ac <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80085a0:	bf00      	nop
 80085a2:	e004      	b.n	80085ae <USBH_MSC_RdWrProcess+0x194>
      break;
 80085a4:	bf00      	nop
 80085a6:	e002      	b.n	80085ae <USBH_MSC_RdWrProcess+0x194>
      break;
 80085a8:	bf00      	nop
 80085aa:	e000      	b.n	80085ae <USBH_MSC_RdWrProcess+0x194>
      break;
 80085ac:	bf00      	nop

  }
  return error;
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	460b      	mov	r3, r1
 80085c2:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b0b      	cmp	r3, #11
 80085d6:	d10c      	bne.n	80085f2 <USBH_MSC_UnitIsReady+0x3a>
 80085d8:	78fb      	ldrb	r3, [r7, #3]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	2134      	movs	r1, #52	; 0x34
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	3391      	adds	r3, #145	; 0x91
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e001      	b.n	80085f6 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	460b      	mov	r3, r1
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b0b      	cmp	r3, #11
 8008624:	d10d      	bne.n	8008642 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008626:	7afb      	ldrb	r3, [r7, #11]
 8008628:	2234      	movs	r2, #52	; 0x34
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	3390      	adds	r3, #144	; 0x90
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4413      	add	r3, r2
 8008634:	2234      	movs	r2, #52	; 0x34
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f005 fa19 	bl	800da70 <memcpy>
    return USBH_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	e000      	b.n	8008644 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008642:	2302      	movs	r3, #2
  }
}
 8008644:	4618      	mov	r0, r3
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	460b      	mov	r3, r1
 800865a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00e      	beq.n	8008690 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8008678:	2b0b      	cmp	r3, #11
 800867a:	d109      	bne.n	8008690 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	2134      	movs	r1, #52	; 0x34
 8008682:	fb01 f303 	mul.w	r3, r1, r3
 8008686:	4413      	add	r3, r2
 8008688:	3390      	adds	r3, #144	; 0x90
 800868a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800868c:	2b01      	cmp	r3, #1
 800868e:	d001      	beq.n	8008694 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8008690:	2302      	movs	r3, #2
 8008692:	e040      	b.n	8008716 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2206      	movs	r2, #6
 8008698:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800869a:	7afb      	ldrb	r3, [r7, #11]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	2134      	movs	r1, #52	; 0x34
 80086a0:	fb01 f303 	mul.w	r3, r1, r3
 80086a4:	4413      	add	r3, r2
 80086a6:	3390      	adds	r3, #144	; 0x90
 80086a8:	2206      	movs	r2, #6
 80086aa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80086b6:	7af9      	ldrb	r1, [r7, #11]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fd78 	bl	80091b6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086cc:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80086ce:	e016      	b.n	80086fe <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f242 7110 	movw	r1, #10000	; 0x2710
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d805      	bhi.n	80086f4 <USBH_MSC_Read+0xa8>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2201      	movs	r2, #1
 80086f8:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80086fa:	2302      	movs	r3, #2
 80086fc:	e00b      	b.n	8008716 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80086fe:	7afb      	ldrb	r3, [r7, #11]
 8008700:	4619      	mov	r1, r3
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fe89 	bl	800841a <USBH_MSC_RdWrProcess>
 8008708:	4603      	mov	r3, r0
 800870a:	2b01      	cmp	r3, #1
 800870c:	d0e0      	beq.n	80086d0 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2201      	movs	r2, #1
 8008712:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b088      	sub	sp, #32
 8008722:	af02      	add	r7, sp, #8
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	460b      	mov	r3, r1
 800872c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800874a:	2b0b      	cmp	r3, #11
 800874c:	d109      	bne.n	8008762 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800874e:	7afb      	ldrb	r3, [r7, #11]
 8008750:	697a      	ldr	r2, [r7, #20]
 8008752:	2134      	movs	r1, #52	; 0x34
 8008754:	fb01 f303 	mul.w	r3, r1, r3
 8008758:	4413      	add	r3, r2
 800875a:	3390      	adds	r3, #144	; 0x90
 800875c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800875e:	2b01      	cmp	r3, #1
 8008760:	d001      	beq.n	8008766 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	e040      	b.n	80087e8 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2207      	movs	r2, #7
 800876a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800876c:	7afb      	ldrb	r3, [r7, #11]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	2134      	movs	r1, #52	; 0x34
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	4413      	add	r3, r2
 8008778:	3390      	adds	r3, #144	; 0x90
 800877a:	2207      	movs	r2, #7
 800877c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	b29a      	uxth	r2, r3
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8008788:	7af9      	ldrb	r1, [r7, #11]
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 fca4 	bl	80090e0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800879e:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087a0:	e016      	b.n	80087d0 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad2      	subs	r2, r2, r3
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	f242 7110 	movw	r1, #10000	; 0x2710
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d805      	bhi.n	80087c6 <USBH_MSC_Write+0xa8>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2201      	movs	r2, #1
 80087ca:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80087cc:	2302      	movs	r3, #2
 80087ce:	e00b      	b.n	80087e8 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f7ff fe20 	bl	800841a <USBH_MSC_RdWrProcess>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d0e0      	beq.n	80087a2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2201      	movs	r2, #1
 80087e4:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3718      	adds	r7, #24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2221      	movs	r2, #33	; 0x21
 80087fc:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	22ff      	movs	r2, #255	; 0xff
 8008802:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008816:	2200      	movs	r2, #0
 8008818:	2100      	movs	r1, #0
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f001 fea6 	bl	800a56c <USBH_CtlReq>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	22a1      	movs	r2, #161	; 0xa1
 8008838:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	22fe      	movs	r2, #254	; 0xfe
 800883e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8008852:	2201      	movs	r2, #1
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 fe88 	bl	800a56c <USBH_CtlReq>
 800885c:	4603      	mov	r3, r0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a09      	ldr	r2, [pc, #36]	; (80088a4 <USBH_MSC_BOT_Init+0x3c>)
 800887e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4a09      	ldr	r2, [pc, #36]	; (80088a8 <USBH_MSC_BOT_Init+0x40>)
 8008884:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	43425355 	.word	0x43425355
 80088a8:	20304050 	.word	0x20304050

080088ac <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	460b      	mov	r3, r1
 80088b6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80088b8:	2301      	movs	r3, #1
 80088ba:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80088bc:	2301      	movs	r3, #1
 80088be:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80088c0:	2301      	movs	r3, #1
 80088c2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80088c4:	2300      	movs	r3, #0
 80088c6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088dc:	3b01      	subs	r3, #1
 80088de:	2b0a      	cmp	r3, #10
 80088e0:	f200 819e 	bhi.w	8008c20 <USBH_MSC_BOT_Process+0x374>
 80088e4:	a201      	add	r2, pc, #4	; (adr r2, 80088ec <USBH_MSC_BOT_Process+0x40>)
 80088e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ea:	bf00      	nop
 80088ec:	08008919 	.word	0x08008919
 80088f0:	08008941 	.word	0x08008941
 80088f4:	080089ab 	.word	0x080089ab
 80088f8:	080089c9 	.word	0x080089c9
 80088fc:	08008a4d 	.word	0x08008a4d
 8008900:	08008a6f 	.word	0x08008a6f
 8008904:	08008b07 	.word	0x08008b07
 8008908:	08008b23 	.word	0x08008b23
 800890c:	08008b75 	.word	0x08008b75
 8008910:	08008ba5 	.word	0x08008ba5
 8008914:	08008c07 	.word	0x08008c07
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	795b      	ldrb	r3, [r3, #5]
 8008932:	2201      	movs	r2, #1
 8008934:	9200      	str	r2, [sp, #0]
 8008936:	221f      	movs	r2, #31
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f002 f826 	bl	800a98a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800893e:	e17e      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	795b      	ldrb	r3, [r3, #5]
 8008944:	4619      	mov	r1, r3
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f004 feda 	bl	800d700 <USBH_LL_GetURBState>
 800894c:	4603      	mov	r3, r0
 800894e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008950:	7d3b      	ldrb	r3, [r7, #20]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d118      	bne.n	8008988 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00f      	beq.n	800897e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008964:	b25b      	sxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	da04      	bge.n	8008974 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2203      	movs	r2, #3
 800896e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008972:	e157      	b.n	8008c24 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	2205      	movs	r2, #5
 8008978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800897c:	e152      	b.n	8008c24 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2207      	movs	r2, #7
 8008982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008986:	e14d      	b.n	8008c24 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008988:	7d3b      	ldrb	r3, [r7, #20]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d104      	bne.n	8008998 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008996:	e145      	b.n	8008c24 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008998:	7d3b      	ldrb	r3, [r7, #20]
 800899a:	2b05      	cmp	r3, #5
 800899c:	f040 8142 	bne.w	8008c24 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	220a      	movs	r2, #10
 80089a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80089a8:	e13c      	b.n	8008c24 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	895a      	ldrh	r2, [r3, #10]
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	791b      	ldrb	r3, [r3, #4]
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f002 f80b 	bl	800a9d4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2204      	movs	r2, #4
 80089c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80089c6:	e13a      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	791b      	ldrb	r3, [r3, #4]
 80089cc:	4619      	mov	r1, r3
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f004 fe96 	bl	800d700 <USBH_LL_GetURBState>
 80089d4:	4603      	mov	r3, r0
 80089d6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80089d8:	7d3b      	ldrb	r3, [r7, #20]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d12d      	bne.n	8008a3a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	8952      	ldrh	r2, [r2, #10]
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d910      	bls.n	8008a0c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	8952      	ldrh	r2, [r2, #10]
 80089f4:	441a      	add	r2, r3
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	8952      	ldrh	r2, [r2, #10]
 8008a04:	1a9a      	subs	r2, r3, r2
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	65da      	str	r2, [r3, #92]	; 0x5c
 8008a0a:	e002      	b.n	8008a12 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	895a      	ldrh	r2, [r3, #10]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	791b      	ldrb	r3, [r3, #4]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 ffd3 	bl	800a9d4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008a2e:	e0fb      	b.n	8008c28 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	2207      	movs	r2, #7
 8008a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a38:	e0f6      	b.n	8008c28 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008a3a:	7d3b      	ldrb	r3, [r7, #20]
 8008a3c:	2b05      	cmp	r3, #5
 8008a3e:	f040 80f3 	bne.w	8008c28 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2209      	movs	r2, #9
 8008a46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a4a:	e0ed      	b.n	8008c28 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	891a      	ldrh	r2, [r3, #8]
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	795b      	ldrb	r3, [r3, #5]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	9000      	str	r0, [sp, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 ff93 	bl	800a98a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2206      	movs	r2, #6
 8008a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008a6c:	e0e7      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	795b      	ldrb	r3, [r3, #5]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f004 fe43 	bl	800d700 <USBH_LL_GetURBState>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008a7e:	7d3b      	ldrb	r3, [r7, #20]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d12f      	bne.n	8008ae4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	8912      	ldrh	r2, [r2, #8]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d910      	bls.n	8008ab2 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	8912      	ldrh	r2, [r2, #8]
 8008a9a:	441a      	add	r2, r3
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	8912      	ldrh	r2, [r2, #8]
 8008aaa:	1a9a      	subs	r2, r3, r2
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	65da      	str	r2, [r3, #92]	; 0x5c
 8008ab0:	e002      	b.n	8008ab8 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00c      	beq.n	8008ada <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	891a      	ldrh	r2, [r3, #8]
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	795b      	ldrb	r3, [r3, #5]
 8008ace:	2001      	movs	r0, #1
 8008ad0:	9000      	str	r0, [sp, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 ff59 	bl	800a98a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008ad8:	e0a8      	b.n	8008c2c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2207      	movs	r2, #7
 8008ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ae2:	e0a3      	b.n	8008c2c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ae4:	7d3b      	ldrb	r3, [r7, #20]
 8008ae6:	2b02      	cmp	r3, #2
 8008ae8:	d104      	bne.n	8008af4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	2205      	movs	r2, #5
 8008aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008af2:	e09b      	b.n	8008c2c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008af4:	7d3b      	ldrb	r3, [r7, #20]
 8008af6:	2b05      	cmp	r3, #5
 8008af8:	f040 8098 	bne.w	8008c2c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	220a      	movs	r2, #10
 8008b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b04:	e092      	b.n	8008c2c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	220d      	movs	r2, #13
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 ff5e 	bl	800a9d4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	2208      	movs	r2, #8
 8008b1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b20:	e08d      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	791b      	ldrb	r3, [r3, #4]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f004 fde9 	bl	800d700 <USBH_LL_GetURBState>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008b32:	7d3b      	ldrb	r3, [r7, #20]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d115      	bne.n	8008b64 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 f8a9 	bl	8008ca0 <USBH_MSC_DecodeCSW>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008b52:	7d7b      	ldrb	r3, [r7, #21]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d102      	bne.n	8008b5e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008b5c:	e068      	b.n	8008c30 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	75fb      	strb	r3, [r7, #23]
      break;
 8008b62:	e065      	b.n	8008c30 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008b64:	7d3b      	ldrb	r3, [r7, #20]
 8008b66:	2b05      	cmp	r3, #5
 8008b68:	d162      	bne.n	8008c30 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2209      	movs	r2, #9
 8008b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b72:	e05d      	b.n	8008c30 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	2200      	movs	r2, #0
 8008b78:	4619      	mov	r1, r3
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f864 	bl	8008c48 <USBH_MSC_BOT_Abort>
 8008b80:	4603      	mov	r3, r0
 8008b82:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008b84:	7dbb      	ldrb	r3, [r7, #22]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d104      	bne.n	8008b94 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008b92:	e04f      	b.n	8008c34 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008b94:	7dbb      	ldrb	r3, [r7, #22]
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d14c      	bne.n	8008c34 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	220b      	movs	r2, #11
 8008b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ba2:	e047      	b.n	8008c34 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4619      	mov	r1, r3
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f84c 	bl	8008c48 <USBH_MSC_BOT_Abort>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008bb4:	7dbb      	ldrb	r3, [r7, #22]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d11d      	bne.n	8008bf6 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	795b      	ldrb	r3, [r3, #5]
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f004 fdee 	bl	800d7a2 <USBH_LL_GetToggle>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	7959      	ldrb	r1, [r3, #5]
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	f1c3 0301 	rsb	r3, r3, #1
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f004 fdb2 	bl	800d742 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	791b      	ldrb	r3, [r3, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f004 fdab 	bl	800d742 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2209      	movs	r2, #9
 8008bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008bf4:	e020      	b.n	8008c38 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008bf6:	7dbb      	ldrb	r3, [r7, #22]
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d11d      	bne.n	8008c38 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	220b      	movs	r2, #11
 8008c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c04:	e018      	b.n	8008c38 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff fdf2 	bl	80087f0 <USBH_MSC_BOT_REQ_Reset>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d112      	bne.n	8008c3c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008c1e:	e00d      	b.n	8008c3c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008c20:	bf00      	nop
 8008c22:	e00c      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c24:	bf00      	nop
 8008c26:	e00a      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e008      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e006      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c30:	bf00      	nop
 8008c32:	e004      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c34:	bf00      	nop
 8008c36:	e002      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c38:	bf00      	nop
 8008c3a:	e000      	b.n	8008c3e <USBH_MSC_BOT_Process+0x392>
      break;
 8008c3c:	bf00      	nop
  }
  return status;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
 8008c54:	4613      	mov	r3, r2
 8008c56:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008c66:	78bb      	ldrb	r3, [r7, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <USBH_MSC_BOT_Abort+0x2a>
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d009      	beq.n	8008c84 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008c70:	e011      	b.n	8008c96 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	79db      	ldrb	r3, [r3, #7]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f001 f9a8 	bl	8009fce <USBH_ClrFeature>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e008      	b.n	8008c96 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	799b      	ldrb	r3, [r3, #6]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 f99f 	bl	8009fce <USBH_ClrFeature>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
      break;
 8008c94:	bf00      	nop
  }
  return status;
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	791b      	ldrb	r3, [r3, #4]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f004 fc8d 	bl	800d5dc <USBH_LL_GetLastXferSize>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b0d      	cmp	r3, #13
 8008cc6:	d002      	beq.n	8008cce <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	73fb      	strb	r3, [r7, #15]
 8008ccc:	e024      	b.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cd2:	4a14      	ldr	r2, [pc, #80]	; (8008d24 <USBH_MSC_DecodeCSW+0x84>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d11d      	bne.n	8008d14 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d119      	bne.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
 8008cf2:	e011      	b.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d102      	bne.n	8008d04 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	73fb      	strb	r3, [r7, #15]
 8008d02:	e009      	b.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d104      	bne.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	73fb      	strb	r3, [r7, #15]
 8008d12:	e001      	b.n	8008d18 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008d14:	2302      	movs	r3, #2
 8008d16:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	53425355 	.word	0x53425355

08008d28 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008d34:	2302      	movs	r3, #2
 8008d36:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d002      	beq.n	8008d52 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d021      	beq.n	8008d94 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008d50:	e028      	b.n	8008da4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2200      	movs	r2, #0
 8008d56:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	220a      	movs	r2, #10
 8008d64:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	3363      	adds	r3, #99	; 0x63
 8008d6c:	2210      	movs	r2, #16
 8008d6e:	2100      	movs	r1, #0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f004 fe39 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
      break;
 8008d92:	e007      	b.n	8008da4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f7ff fd87 	bl	80088ac <USBH_MSC_BOT_Process>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	bf00      	nop
  }

  return error;
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b086      	sub	sp, #24
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	460b      	mov	r3, r1
 8008db8:	607a      	str	r2, [r7, #4]
 8008dba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dc6:	69db      	ldr	r3, [r3, #28]
 8008dc8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d002      	beq.n	8008dda <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d027      	beq.n	8008e28 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008dd8:	e05f      	b.n	8008e9a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2280      	movs	r2, #128	; 0x80
 8008de4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	220a      	movs	r2, #10
 8008dec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3363      	adds	r3, #99	; 0x63
 8008df4:	2210      	movs	r2, #16
 8008df6:	2100      	movs	r1, #0
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f004 fdf5 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2225      	movs	r2, #37	; 0x25
 8008e02:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f103 0210 	add.w	r2, r3, #16
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008e22:	2301      	movs	r3, #1
 8008e24:	75fb      	strb	r3, [r7, #23]
      break;
 8008e26:	e038      	b.n	8008e9a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008e28:	7afb      	ldrb	r3, [r7, #11]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff fd3d 	bl	80088ac <USBH_MSC_BOT_Process>
 8008e32:	4603      	mov	r3, r0
 8008e34:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d12d      	bne.n	8008e98 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e42:	3303      	adds	r3, #3
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	461a      	mov	r2, r3
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	3302      	adds	r3, #2
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e62:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7a:	3307      	adds	r3, #7
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e86:	3306      	adds	r3, #6
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	021b      	lsls	r3, r3, #8
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	4313      	orrs	r3, r2
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	809a      	strh	r2, [r3, #4]
      break;
 8008e98:	bf00      	nop
  }

  return error;
 8008e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3718      	adds	r7, #24
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	460b      	mov	r3, r1
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d002      	beq.n	8008ed0 <USBH_MSC_SCSI_Inquiry+0x2c>
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d03d      	beq.n	8008f4a <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008ece:	e089      	b.n	8008fe4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	2224      	movs	r2, #36	; 0x24
 8008ed4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	2280      	movs	r2, #128	; 0x80
 8008eda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	3363      	adds	r3, #99	; 0x63
 8008eea:	220a      	movs	r2, #10
 8008eec:	2100      	movs	r1, #0
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f004 fd7a 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2212      	movs	r2, #18
 8008ef8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	015b      	lsls	r3, r3, #5
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	2224      	movs	r2, #36	; 0x24
 8008f1c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f103 0210 	add.w	r2, r3, #16
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008f44:	2301      	movs	r3, #1
 8008f46:	75fb      	strb	r3, [r7, #23]
      break;
 8008f48:	e04c      	b.n	8008fe4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f4a:	7afb      	ldrb	r3, [r7, #11]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f7ff fcac 	bl	80088ac <USBH_MSC_BOT_Process>
 8008f54:	4603      	mov	r3, r0
 8008f56:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f58:	7dfb      	ldrb	r3, [r7, #23]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d141      	bne.n	8008fe2 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008f5e:	2222      	movs	r2, #34	; 0x22
 8008f60:	2100      	movs	r1, #0
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f004 fd40 	bl	800d9e8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 031f 	and.w	r3, r3, #31
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f90:	3301      	adds	r3, #1
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b25b      	sxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da03      	bge.n	8008fa2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	709a      	strb	r2, [r3, #2]
 8008fa0:	e002      	b.n	8008fa8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	1cd8      	adds	r0, r3, #3
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f004 fd5a 	bl	800da70 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f103 000c 	add.w	r0, r3, #12
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc8:	3310      	adds	r3, #16
 8008fca:	2210      	movs	r2, #16
 8008fcc:	4619      	mov	r1, r3
 8008fce:	f004 fd4f 	bl	800da70 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	331d      	adds	r3, #29
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008fdc:	3220      	adds	r2, #32
 8008fde:	6812      	ldr	r2, [r2, #0]
 8008fe0:	601a      	str	r2, [r3, #0]
      break;
 8008fe2:	bf00      	nop
  }

  return error;
 8008fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b086      	sub	sp, #24
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	60f8      	str	r0, [r7, #12]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008ffc:	2302      	movs	r3, #2
 8008ffe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009010:	2b01      	cmp	r3, #1
 8009012:	d002      	beq.n	800901a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009014:	2b02      	cmp	r3, #2
 8009016:	d03d      	beq.n	8009094 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009018:	e05d      	b.n	80090d6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	220e      	movs	r2, #14
 800901e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2280      	movs	r2, #128	; 0x80
 8009024:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	220a      	movs	r2, #10
 800902c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	3363      	adds	r3, #99	; 0x63
 8009034:	2210      	movs	r2, #16
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f004 fcd5 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	2203      	movs	r2, #3
 8009042:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	015b      	lsls	r3, r3, #5
 800904a:	b2da      	uxtb	r2, r3
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	2200      	movs	r2, #0
 8009056:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	220e      	movs	r2, #14
 8009066:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	2202      	movs	r2, #2
 800907e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	f103 0210 	add.w	r2, r3, #16
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
      break;
 8009092:	e020      	b.n	80090d6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	4619      	mov	r1, r3
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fc07 	bl	80088ac <USBH_MSC_BOT_Process>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d115      	bne.n	80090d4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ae:	3302      	adds	r3, #2
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	f003 030f 	and.w	r3, r3, #15
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090c2:	7b1a      	ldrb	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090ce:	7b5a      	ldrb	r2, [r3, #13]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	709a      	strb	r2, [r3, #2]
      break;
 80090d4:	bf00      	nop
  }

  return error;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	607a      	str	r2, [r7, #4]
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	460b      	mov	r3, r1
 80090ee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80090f0:	2302      	movs	r3, #2
 80090f2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090fa:	69db      	ldr	r3, [r3, #28]
 80090fc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009104:	2b01      	cmp	r3, #1
 8009106:	d002      	beq.n	800910e <USBH_MSC_SCSI_Write+0x2e>
 8009108:	2b02      	cmp	r3, #2
 800910a:	d047      	beq.n	800919c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800910c:	e04e      	b.n	80091ac <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009114:	461a      	mov	r2, r3
 8009116:	6a3b      	ldr	r3, [r7, #32]
 8009118:	fb03 f202 	mul.w	r2, r3, r2
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	220a      	movs	r2, #10
 800912c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	3363      	adds	r3, #99	; 0x63
 8009134:	2210      	movs	r2, #16
 8009136:	2100      	movs	r1, #0
 8009138:	4618      	mov	r0, r3
 800913a:	f004 fc55 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	222a      	movs	r2, #42	; 0x2a
 8009142:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009146:	79fa      	ldrb	r2, [r7, #7]
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800914e:	79ba      	ldrb	r2, [r7, #6]
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009156:	797a      	ldrb	r2, [r7, #5]
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800915e:	1d3b      	adds	r3, r7, #4
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009168:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009172:	f107 0320 	add.w	r3, r7, #32
 8009176:	781a      	ldrb	r2, [r3, #0]
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2201      	movs	r2, #1
 8009182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2202      	movs	r2, #2
 800918a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009196:	2301      	movs	r3, #1
 8009198:	75fb      	strb	r3, [r7, #23]
      break;
 800919a:	e007      	b.n	80091ac <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	4619      	mov	r1, r3
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fb83 	bl	80088ac <USBH_MSC_BOT_Process>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
      break;
 80091aa:	bf00      	nop
  }

  return error;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	60f8      	str	r0, [r7, #12]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
 80091c2:	460b      	mov	r3, r1
 80091c4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80091c6:	2302      	movs	r3, #2
 80091c8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d002      	beq.n	80091e4 <USBH_MSC_SCSI_Read+0x2e>
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d047      	beq.n	8009272 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80091e2:	e04e      	b.n	8009282 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80091ea:	461a      	mov	r2, r3
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	fb03 f202 	mul.w	r2, r3, r2
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	2280      	movs	r2, #128	; 0x80
 80091fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	220a      	movs	r2, #10
 8009202:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	3363      	adds	r3, #99	; 0x63
 800920a:	2210      	movs	r2, #16
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f004 fbea 	bl	800d9e8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	2228      	movs	r2, #40	; 0x28
 8009218:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800921c:	79fa      	ldrb	r2, [r7, #7]
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009224:	79ba      	ldrb	r2, [r7, #6]
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800922c:	797a      	ldrb	r2, [r7, #5]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009234:	1d3b      	adds	r3, r7, #4
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800923e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009248:	f107 0320 	add.w	r3, r7, #32
 800924c:	781a      	ldrb	r2, [r3, #0]
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2202      	movs	r2, #2
 8009260:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	683a      	ldr	r2, [r7, #0]
 8009268:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800926c:	2301      	movs	r3, #1
 800926e:	75fb      	strb	r3, [r7, #23]
      break;
 8009270:	e007      	b.n	8009282 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	4619      	mov	r1, r3
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff fb18 	bl	80088ac <USBH_MSC_BOT_Process>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]
      break;
 8009280:	bf00      	nop
  }

  return error;
 8009282:	7dfb      	ldrb	r3, [r7, #23]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	4613      	mov	r3, r2
 8009298:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80092a0:	2302      	movs	r3, #2
 80092a2:	e029      	b.n	80092f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	79fa      	ldrb	r2, [r7, #7]
 80092a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f81f 	bl	8009300 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f004 f8bf 	bl	800d474 <USBH_LL_Init>

  return USBH_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e009      	b.n	8009326 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	33e0      	adds	r3, #224	; 0xe0
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	2200      	movs	r2, #0
 800931e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b0f      	cmp	r3, #15
 800932a:	d9f2      	bls.n	8009312 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e009      	b.n	8009346 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4413      	add	r3, r2
 8009338:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800933c:	2200      	movs	r2, #0
 800933e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	3301      	adds	r3, #1
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800934c:	d3f1      	bcc.n	8009332 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2240      	movs	r2, #64	; 0x40
 8009372:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2201      	movs	r2, #1
 8009386:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800939a:	2300      	movs	r3, #0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3714      	adds	r7, #20
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093b2:	2300      	movs	r3, #0
 80093b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d016      	beq.n	80093ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10e      	bne.n	80093e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80093cc:	1c59      	adds	r1, r3, #1
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	33de      	adds	r3, #222	; 0xde
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
 80093e2:	e004      	b.n	80093ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80093e4:	2302      	movs	r3, #2
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	e001      	b.n	80093ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80093ea:	2302      	movs	r3, #2
 80093ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009412:	78fa      	ldrb	r2, [r7, #3]
 8009414:	429a      	cmp	r2, r3
 8009416:	d204      	bcs.n	8009422 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009420:	e001      	b.n	8009426 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009422:	2302      	movs	r3, #2
 8009424:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009434:	b480      	push	{r7}
 8009436:	b087      	sub	sp, #28
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	461a      	mov	r2, r3
 8009442:	4603      	mov	r3, r0
 8009444:	70fb      	strb	r3, [r7, #3]
 8009446:	460b      	mov	r3, r1
 8009448:	70bb      	strb	r3, [r7, #2]
 800944a:	4613      	mov	r3, r2
 800944c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800945c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800945e:	e025      	b.n	80094ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	221a      	movs	r2, #26
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	3308      	adds	r3, #8
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	3302      	adds	r3, #2
 8009470:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	795b      	ldrb	r3, [r3, #5]
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	429a      	cmp	r2, r3
 800947a:	d002      	beq.n	8009482 <USBH_FindInterface+0x4e>
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	2bff      	cmp	r3, #255	; 0xff
 8009480:	d111      	bne.n	80094a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009486:	78ba      	ldrb	r2, [r7, #2]
 8009488:	429a      	cmp	r2, r3
 800948a:	d002      	beq.n	8009492 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800948c:	78bb      	ldrb	r3, [r7, #2]
 800948e:	2bff      	cmp	r3, #255	; 0xff
 8009490:	d109      	bne.n	80094a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009496:	787a      	ldrb	r2, [r7, #1]
 8009498:	429a      	cmp	r2, r3
 800949a:	d002      	beq.n	80094a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800949c:	787b      	ldrb	r3, [r7, #1]
 800949e:	2bff      	cmp	r3, #255	; 0xff
 80094a0:	d101      	bne.n	80094a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094a2:	7dfb      	ldrb	r3, [r7, #23]
 80094a4:	e006      	b.n	80094b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094a6:	7dfb      	ldrb	r3, [r7, #23]
 80094a8:	3301      	adds	r3, #1
 80094aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d9d6      	bls.n	8009460 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094b2:	23ff      	movs	r3, #255	; 0xff
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f004 f80f 	bl	800d4ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80094ce:	2101      	movs	r1, #1
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f004 f928 	bl	800d726 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b088      	sub	sp, #32
 80094e4:	af04      	add	r7, sp, #16
 80094e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80094e8:	2302      	movs	r3, #2
 80094ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d102      	bne.n	8009502 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2203      	movs	r2, #3
 8009500:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b0b      	cmp	r3, #11
 800950a:	f200 81be 	bhi.w	800988a <USBH_Process+0x3aa>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <USBH_Process+0x34>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009545 	.word	0x08009545
 8009518:	08009577 	.word	0x08009577
 800951c:	080095df 	.word	0x080095df
 8009520:	08009825 	.word	0x08009825
 8009524:	0800988b 	.word	0x0800988b
 8009528:	08009683 	.word	0x08009683
 800952c:	080097cb 	.word	0x080097cb
 8009530:	080096b9 	.word	0x080096b9
 8009534:	080096d9 	.word	0x080096d9
 8009538:	080096f9 	.word	0x080096f9
 800953c:	0800973d 	.word	0x0800973d
 8009540:	0800980d 	.word	0x0800980d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800954a:	b2db      	uxtb	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	f000 819e 	beq.w	800988e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009558:	20c8      	movs	r0, #200	; 0xc8
 800955a:	f004 f952 	bl	800d802 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f004 f821 	bl	800d5a6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009574:	e18b      	b.n	800988e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800957c:	2b01      	cmp	r3, #1
 800957e:	d107      	bne.n	8009590 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800958e:	e18d      	b.n	80098ac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800959a:	d914      	bls.n	80095c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80095a2:	3301      	adds	r3, #1
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d903      	bls.n	80095be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	220d      	movs	r2, #13
 80095ba:	701a      	strb	r2, [r3, #0]
      break;
 80095bc:	e176      	b.n	80098ac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	701a      	strb	r2, [r3, #0]
      break;
 80095c4:	e172      	b.n	80098ac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095cc:	f103 020a 	add.w	r2, r3, #10
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80095d6:	200a      	movs	r0, #10
 80095d8:	f004 f913 	bl	800d802 <USBH_Delay>
      break;
 80095dc:	e166      	b.n	80098ac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d005      	beq.n	80095f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80095ee:	2104      	movs	r1, #4
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80095f4:	2064      	movs	r0, #100	; 0x64
 80095f6:	f004 f904 	bl	800d802 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f003 ffac 	bl	800d558 <USBH_LL_GetSpeed>
 8009600:	4603      	mov	r3, r0
 8009602:	461a      	mov	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2205      	movs	r2, #5
 800960e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009610:	2100      	movs	r1, #0
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fa2b 	bl	800aa6e <USBH_AllocPipe>
 8009618:	4603      	mov	r3, r0
 800961a:	461a      	mov	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009620:	2180      	movs	r1, #128	; 0x80
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fa23 	bl	800aa6e <USBH_AllocPipe>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	7919      	ldrb	r1, [r3, #4]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009644:	b292      	uxth	r2, r2
 8009646:	9202      	str	r2, [sp, #8]
 8009648:	2200      	movs	r2, #0
 800964a:	9201      	str	r2, [sp, #4]
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	4603      	mov	r3, r0
 8009650:	2280      	movs	r2, #128	; 0x80
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f9dc 	bl	800aa10 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7959      	ldrb	r1, [r3, #5]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800966c:	b292      	uxth	r2, r2
 800966e:	9202      	str	r2, [sp, #8]
 8009670:	2200      	movs	r2, #0
 8009672:	9201      	str	r2, [sp, #4]
 8009674:	9300      	str	r3, [sp, #0]
 8009676:	4603      	mov	r3, r0
 8009678:	2200      	movs	r2, #0
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f001 f9c8 	bl	800aa10 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009680:	e114      	b.n	80098ac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f918 	bl	80098b8 <USBH_HandleEnum>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 80fe 	bne.w	8009892 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d103      	bne.n	80096b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2208      	movs	r2, #8
 80096ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096ae:	e0f0      	b.n	8009892 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2207      	movs	r2, #7
 80096b4:	701a      	strb	r2, [r3, #0]
      break;
 80096b6:	e0ec      	b.n	8009892 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 80e9 	beq.w	8009896 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2208      	movs	r2, #8
 80096d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80096d6:	e0de      	b.n	8009896 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fc2c 	bl	8009f40 <USBH_SetCfg>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 80d5 	bne.w	800989a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2209      	movs	r2, #9
 80096f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096f6:	e0d0      	b.n	800989a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009706:	2101      	movs	r1, #1
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc3c 	bl	8009f86 <USBH_SetFeature>
 800970e:	4603      	mov	r3, r0
 8009710:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	220a      	movs	r2, #10
 800971e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009720:	e0bd      	b.n	800989e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009722:	7bbb      	ldrb	r3, [r7, #14]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b03      	cmp	r3, #3
 8009728:	f040 80b9 	bne.w	800989e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	220a      	movs	r2, #10
 8009730:	701a      	strb	r2, [r3, #0]
      break;
 8009732:	e0b4      	b.n	800989e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	220a      	movs	r2, #10
 8009738:	701a      	strb	r2, [r3, #0]
      break;
 800973a:	e0b0      	b.n	800989e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009742:	2b00      	cmp	r3, #0
 8009744:	f000 80ad 	beq.w	80098a2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009750:	2300      	movs	r3, #0
 8009752:	73fb      	strb	r3, [r7, #15]
 8009754:	e016      	b.n	8009784 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009756:	7bfa      	ldrb	r2, [r7, #15]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	32de      	adds	r2, #222	; 0xde
 800975c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009760:	791a      	ldrb	r2, [r3, #4]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009768:	429a      	cmp	r2, r3
 800976a:	d108      	bne.n	800977e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800976c:	7bfa      	ldrb	r2, [r7, #15]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	32de      	adds	r2, #222	; 0xde
 8009772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800977c:	e005      	b.n	800978a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	3301      	adds	r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d0e5      	beq.n	8009756 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d016      	beq.n	80097c2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d109      	bne.n	80097ba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2206      	movs	r2, #6
 80097aa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097b2:	2103      	movs	r1, #3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097b8:	e073      	b.n	80098a2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	220d      	movs	r2, #13
 80097be:	701a      	strb	r2, [r3, #0]
      break;
 80097c0:	e06f      	b.n	80098a2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	220d      	movs	r2, #13
 80097c6:	701a      	strb	r2, [r3, #0]
      break;
 80097c8:	e06b      	b.n	80098a2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d017      	beq.n	8009804 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	4798      	blx	r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	220b      	movs	r2, #11
 80097f0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097f2:	e058      	b.n	80098a6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d154      	bne.n	80098a6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	220d      	movs	r2, #13
 8009800:	701a      	strb	r2, [r3, #0]
      break;
 8009802:	e050      	b.n	80098a6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	220d      	movs	r2, #13
 8009808:	701a      	strb	r2, [r3, #0]
      break;
 800980a:	e04c      	b.n	80098a6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009812:	2b00      	cmp	r3, #0
 8009814:	d049      	beq.n	80098aa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
      }
      break;
 8009822:	e042      	b.n	80098aa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff fd67 	bl	8009300 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009838:	2b00      	cmp	r3, #0
 800983a:	d009      	beq.n	8009850 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009842:	68db      	ldr	r3, [r3, #12]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009860:	2105      	movs	r1, #5
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800986c:	b2db      	uxtb	r3, r3
 800986e:	2b01      	cmp	r3, #1
 8009870:	d107      	bne.n	8009882 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fe20 	bl	80094c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009880:	e014      	b.n	80098ac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f003 fe32 	bl	800d4ec <USBH_LL_Start>
      break;
 8009888:	e010      	b.n	80098ac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800988a:	bf00      	nop
 800988c:	e00e      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 800988e:	bf00      	nop
 8009890:	e00c      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 8009892:	bf00      	nop
 8009894:	e00a      	b.n	80098ac <USBH_Process+0x3cc>
    break;
 8009896:	bf00      	nop
 8009898:	e008      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 800989a:	bf00      	nop
 800989c:	e006      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 800989e:	bf00      	nop
 80098a0:	e004      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 80098a2:	bf00      	nop
 80098a4:	e002      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 80098a6:	bf00      	nop
 80098a8:	e000      	b.n	80098ac <USBH_Process+0x3cc>
      break;
 80098aa:	bf00      	nop
  }
  return USBH_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3710      	adds	r7, #16
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop

080098b8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af04      	add	r7, sp, #16
 80098be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	785b      	ldrb	r3, [r3, #1]
 80098cc:	2b07      	cmp	r3, #7
 80098ce:	f200 81c1 	bhi.w	8009c54 <USBH_HandleEnum+0x39c>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <USBH_HandleEnum+0x20>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	080099b7 	.word	0x080099b7
 80098e0:	08009a21 	.word	0x08009a21
 80098e4:	08009aaf 	.word	0x08009aaf
 80098e8:	08009b19 	.word	0x08009b19
 80098ec:	08009b89 	.word	0x08009b89
 80098f0:	08009bcf 	.word	0x08009bcf
 80098f4:	08009c15 	.word	0x08009c15
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098f8:	2108      	movs	r1, #8
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa50 	bl	8009da0 <USBH_Get_DevDesc>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d130      	bne.n	800996c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	7919      	ldrb	r1, [r3, #4]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800992e:	b292      	uxth	r2, r2
 8009930:	9202      	str	r2, [sp, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	9201      	str	r2, [sp, #4]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4603      	mov	r3, r0
 800993a:	2280      	movs	r2, #128	; 0x80
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f867 	bl	800aa10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	7959      	ldrb	r1, [r3, #5]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009956:	b292      	uxth	r2, r2
 8009958:	9202      	str	r2, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	9201      	str	r2, [sp, #4]
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	4603      	mov	r3, r0
 8009962:	2200      	movs	r2, #0
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 f853 	bl	800aa10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800996a:	e175      	b.n	8009c58 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b03      	cmp	r3, #3
 8009970:	f040 8172 	bne.w	8009c58 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800997a:	3301      	adds	r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800998a:	2b03      	cmp	r3, #3
 800998c:	d903      	bls.n	8009996 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	220d      	movs	r2, #13
 8009992:	701a      	strb	r2, [r3, #0]
      break;
 8009994:	e160      	b.n	8009c58 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	795b      	ldrb	r3, [r3, #5]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f887 	bl	800aab0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f881 	bl	800aab0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
      break;
 80099b4:	e150      	b.n	8009c58 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099b6:	2112      	movs	r1, #18
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f9f1 	bl	8009da0 <USBH_Get_DevDesc>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d103      	bne.n	80099d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ce:	e145      	b.n	8009c5c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f040 8142 	bne.w	8009c5c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099de:	3301      	adds	r3, #1
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d903      	bls.n	80099fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	220d      	movs	r2, #13
 80099f6:	701a      	strb	r2, [r3, #0]
      break;
 80099f8:	e130      	b.n	8009c5c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	795b      	ldrb	r3, [r3, #5]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f855 	bl	800aab0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 f84f 	bl	800aab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	701a      	strb	r2, [r3, #0]
      break;
 8009a1e:	e11d      	b.n	8009c5c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a20:	2101      	movs	r1, #1
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa68 	bl	8009ef8 <USBH_SetAddress>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d132      	bne.n	8009a98 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009a32:	2002      	movs	r0, #2
 8009a34:	f003 fee5 	bl	800d802 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2203      	movs	r2, #3
 8009a44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	7919      	ldrb	r1, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a5a:	b292      	uxth	r2, r2
 8009a5c:	9202      	str	r2, [sp, #8]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	9201      	str	r2, [sp, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	4603      	mov	r3, r0
 8009a66:	2280      	movs	r2, #128	; 0x80
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 ffd1 	bl	800aa10 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	7959      	ldrb	r1, [r3, #5]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a82:	b292      	uxth	r2, r2
 8009a84:	9202      	str	r2, [sp, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	9201      	str	r2, [sp, #4]
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2200      	movs	r2, #0
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 ffbd 	bl	800aa10 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a96:	e0e3      	b.n	8009c60 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	f040 80e0 	bne.w	8009c60 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	220d      	movs	r2, #13
 8009aa4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	705a      	strb	r2, [r3, #1]
      break;
 8009aac:	e0d8      	b.n	8009c60 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009aae:	2109      	movs	r1, #9
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 f99d 	bl	8009df0 <USBH_Get_CfgDesc>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d103      	bne.n	8009ac8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2204      	movs	r2, #4
 8009ac4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ac6:	e0cd      	b.n	8009c64 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	2b03      	cmp	r3, #3
 8009acc:	f040 80ca 	bne.w	8009c64 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	b2da      	uxtb	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ae6:	2b03      	cmp	r3, #3
 8009ae8:	d903      	bls.n	8009af2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	220d      	movs	r2, #13
 8009aee:	701a      	strb	r2, [r3, #0]
      break;
 8009af0:	e0b8      	b.n	8009c64 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	795b      	ldrb	r3, [r3, #5]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 ffd9 	bl	800aab0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	791b      	ldrb	r3, [r3, #4]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 ffd3 	bl	800aab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
      break;
 8009b16:	e0a5      	b.n	8009c64 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f965 	bl	8009df0 <USBH_Get_CfgDesc>
 8009b26:	4603      	mov	r3, r0
 8009b28:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d103      	bne.n	8009b38 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2205      	movs	r2, #5
 8009b34:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b36:	e097      	b.n	8009c68 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b38:	7bbb      	ldrb	r3, [r7, #14]
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	f040 8094 	bne.w	8009c68 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b46:	3301      	adds	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d903      	bls.n	8009b62 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	220d      	movs	r2, #13
 8009b5e:	701a      	strb	r2, [r3, #0]
      break;
 8009b60:	e082      	b.n	8009c68 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	795b      	ldrb	r3, [r3, #5]
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 ffa1 	bl	800aab0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	791b      	ldrb	r3, [r3, #4]
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 ff9b 	bl	800aab0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	701a      	strb	r2, [r3, #0]
      break;
 8009b86:	e06f      	b.n	8009c68 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d019      	beq.n	8009bc6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b9e:	23ff      	movs	r3, #255	; 0xff
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f949 	bl	8009e38 <USBH_Get_StringDesc>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d103      	bne.n	8009bb8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2206      	movs	r2, #6
 8009bb4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bb6:	e059      	b.n	8009c6c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bb8:	7bbb      	ldrb	r3, [r7, #14]
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d156      	bne.n	8009c6c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2206      	movs	r2, #6
 8009bc2:	705a      	strb	r2, [r3, #1]
      break;
 8009bc4:	e052      	b.n	8009c6c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2206      	movs	r2, #6
 8009bca:	705a      	strb	r2, [r3, #1]
      break;
 8009bcc:	e04e      	b.n	8009c6c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d019      	beq.n	8009c0c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009be4:	23ff      	movs	r3, #255	; 0xff
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f926 	bl	8009e38 <USBH_Get_StringDesc>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d103      	bne.n	8009bfe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2207      	movs	r2, #7
 8009bfa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bfc:	e038      	b.n	8009c70 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bfe:	7bbb      	ldrb	r3, [r7, #14]
 8009c00:	2b03      	cmp	r3, #3
 8009c02:	d135      	bne.n	8009c70 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2207      	movs	r2, #7
 8009c08:	705a      	strb	r2, [r3, #1]
      break;
 8009c0a:	e031      	b.n	8009c70 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2207      	movs	r2, #7
 8009c10:	705a      	strb	r2, [r3, #1]
      break;
 8009c12:	e02d      	b.n	8009c70 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d017      	beq.n	8009c4e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c2a:	23ff      	movs	r3, #255	; 0xff
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f903 	bl	8009e38 <USBH_Get_StringDesc>
 8009c32:	4603      	mov	r3, r0
 8009c34:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c40:	e018      	b.n	8009c74 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d115      	bne.n	8009c74 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4c:	e012      	b.n	8009c74 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
      break;
 8009c52:	e00f      	b.n	8009c74 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009c54:	bf00      	nop
 8009c56:	e00e      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c58:	bf00      	nop
 8009c5a:	e00c      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c5c:	bf00      	nop
 8009c5e:	e00a      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c60:	bf00      	nop
 8009c62:	e008      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c64:	bf00      	nop
 8009c66:	e006      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e004      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e002      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c70:	bf00      	nop
 8009c72:	e000      	b.n	8009c76 <USBH_HandleEnum+0x3be>
      break;
 8009c74:	bf00      	nop
  }
  return Status;
 8009c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	683a      	ldr	r2, [r7, #0]
 8009c8e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009c92:	bf00      	nop
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cac:	1c5a      	adds	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f000 f804 	bl	8009cc2 <USBH_HandleSof>
}
 8009cba:	bf00      	nop
 8009cbc:	3708      	adds	r7, #8
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b082      	sub	sp, #8
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b0b      	cmp	r3, #11
 8009cd2:	d10a      	bne.n	8009cea <USBH_HandleSof+0x28>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	4798      	blx	r3
  }
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009d02:	bf00      	nop
}
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009d1e:	bf00      	nop
}
 8009d20:	370c      	adds	r7, #12
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b083      	sub	sp, #12
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f003 fbd2 	bl	800d522 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	791b      	ldrb	r3, [r3, #4]
 8009d82:	4619      	mov	r1, r3
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 fe93 	bl	800aab0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	795b      	ldrb	r3, [r3, #5]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fe8d 	bl	800aab0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af02      	add	r7, sp, #8
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009db2:	78fb      	ldrb	r3, [r7, #3]
 8009db4:	b29b      	uxth	r3, r3
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4613      	mov	r3, r2
 8009dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f864 	bl	8009e8e <USBH_GetDescriptor>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009dca:	7bfb      	ldrb	r3, [r7, #15]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	b292      	uxth	r2, r2
 8009de0:	4619      	mov	r1, r3
 8009de2:	f000 f919 	bl	800a018 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	331c      	adds	r3, #28
 8009e00:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e02:	887b      	ldrh	r3, [r7, #2]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f83d 	bl	8009e8e <USBH_GetDescriptor>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f989 	bl	800a13c <USBH_ParseCfgDesc>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b088      	sub	sp, #32
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	607a      	str	r2, [r7, #4]
 8009e42:	461a      	mov	r2, r3
 8009e44:	460b      	mov	r3, r1
 8009e46:	72fb      	strb	r3, [r7, #11]
 8009e48:	4613      	mov	r3, r2
 8009e4a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009e4c:	7afb      	ldrb	r3, [r7, #11]
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e54:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009e5c:	893b      	ldrh	r3, [r7, #8]
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	460b      	mov	r3, r1
 8009e62:	2100      	movs	r1, #0
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f000 f812 	bl	8009e8e <USBH_GetDescriptor>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d107      	bne.n	8009e84 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e7a:	893a      	ldrh	r2, [r7, #8]
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f000 fb26 	bl	800a4d0 <USBH_ParseStringDesc>
  }

  return status;
 8009e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3718      	adds	r7, #24
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	607b      	str	r3, [r7, #4]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	72fb      	strb	r3, [r7, #11]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	789b      	ldrb	r3, [r3, #2]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d11c      	bne.n	8009ee2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ea8:	7afb      	ldrb	r3, [r7, #11]
 8009eaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2206      	movs	r2, #6
 8009eb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	893a      	ldrh	r2, [r7, #8]
 8009ebe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ec0:	893b      	ldrh	r3, [r7, #8]
 8009ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eca:	d104      	bne.n	8009ed6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f240 4209 	movw	r2, #1033	; 0x409
 8009ed2:	829a      	strh	r2, [r3, #20]
 8009ed4:	e002      	b.n	8009edc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8b3a      	ldrh	r2, [r7, #24]
 8009ee0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009ee2:	8b3b      	ldrh	r3, [r7, #24]
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 fb3f 	bl	800a56c <USBH_CtlReq>
 8009eee:	4603      	mov	r3, r0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	789b      	ldrb	r3, [r3, #2]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d10f      	bne.n	8009f2c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2205      	movs	r2, #5
 8009f16:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fb1b 	bl	800a56c <USBH_CtlReq>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	789b      	ldrb	r3, [r3, #2]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d10e      	bne.n	8009f72 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2209      	movs	r2, #9
 8009f5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	887a      	ldrh	r2, [r7, #2]
 8009f64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f72:	2200      	movs	r2, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 faf8 	bl	800a56c <USBH_CtlReq>
 8009f7c:	4603      	mov	r3, r0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3708      	adds	r7, #8
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b082      	sub	sp, #8
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	789b      	ldrb	r3, [r3, #2]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d10f      	bne.n	8009fba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2203      	movs	r2, #3
 8009fa4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fa6:	78fb      	ldrb	r3, [r7, #3]
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fad4 	bl	800a56c <USBH_CtlReq>
 8009fc4:	4603      	mov	r3, r0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b082      	sub	sp, #8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	789b      	ldrb	r3, [r3, #2]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d10f      	bne.n	800a002 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a002:	2200      	movs	r2, #0
 800a004:	2100      	movs	r1, #0
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 fab0 	bl	800a56c <USBH_CtlReq>
 800a00c:	4603      	mov	r3, r0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3708      	adds	r7, #8
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	781a      	ldrb	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	785a      	ldrb	r2, [r3, #1]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	3302      	adds	r3, #2
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	3303      	adds	r3, #3
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	b29b      	uxth	r3, r3
 800a046:	021b      	lsls	r3, r3, #8
 800a048:	b29b      	uxth	r3, r3
 800a04a:	4313      	orrs	r3, r2
 800a04c:	b29a      	uxth	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	791a      	ldrb	r2, [r3, #4]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	795a      	ldrb	r2, [r3, #5]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	799a      	ldrb	r2, [r3, #6]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	79da      	ldrb	r2, [r3, #7]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	79db      	ldrb	r3, [r3, #7]
 800a076:	2b20      	cmp	r3, #32
 800a078:	dc0f      	bgt.n	800a09a <USBH_ParseDevDesc+0x82>
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	db14      	blt.n	800a0a8 <USBH_ParseDevDesc+0x90>
 800a07e:	3b08      	subs	r3, #8
 800a080:	4a2d      	ldr	r2, [pc, #180]	; (800a138 <USBH_ParseDevDesc+0x120>)
 800a082:	fa22 f303 	lsr.w	r3, r2, r3
 800a086:	f003 0301 	and.w	r3, r3, #1
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	bf14      	ite	ne
 800a08e:	2301      	movne	r3, #1
 800a090:	2300      	moveq	r3, #0
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b00      	cmp	r3, #0
 800a096:	d102      	bne.n	800a09e <USBH_ParseDevDesc+0x86>
 800a098:	e006      	b.n	800a0a8 <USBH_ParseDevDesc+0x90>
 800a09a:	2b40      	cmp	r3, #64	; 0x40
 800a09c:	d104      	bne.n	800a0a8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	79da      	ldrb	r2, [r3, #7]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	71da      	strb	r2, [r3, #7]
      break;
 800a0a6:	e003      	b.n	800a0b0 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2240      	movs	r2, #64	; 0x40
 800a0ac:	71da      	strb	r2, [r3, #7]
      break;
 800a0ae:	bf00      	nop
  }

  if (length > 8U)
 800a0b0:	88fb      	ldrh	r3, [r7, #6]
 800a0b2:	2b08      	cmp	r3, #8
 800a0b4:	d939      	bls.n	800a12a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	3308      	adds	r3, #8
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	3309      	adds	r3, #9
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	021b      	lsls	r3, r3, #8
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	330a      	adds	r3, #10
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	330b      	adds	r3, #11
 800a0de:	781b      	ldrb	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	021b      	lsls	r3, r3, #8
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	b29a      	uxth	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	330c      	adds	r3, #12
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	330d      	adds	r3, #13
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	021b      	lsls	r3, r3, #8
 800a100:	b29b      	uxth	r3, r3
 800a102:	4313      	orrs	r3, r2
 800a104:	b29a      	uxth	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	7b9a      	ldrb	r2, [r3, #14]
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	7bda      	ldrb	r2, [r3, #15]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	7c1a      	ldrb	r2, [r3, #16]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	7c5a      	ldrb	r2, [r3, #17]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	745a      	strb	r2, [r3, #17]
  }
}
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	01000101 	.word	0x01000101

0800a13c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08c      	sub	sp, #48	; 0x30
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	4613      	mov	r3, r2
 800a148:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a150:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	781a      	ldrb	r2, [r3, #0]
 800a170:	6a3b      	ldr	r3, [r7, #32]
 800a172:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	785a      	ldrb	r2, [r3, #1]
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	3302      	adds	r3, #2
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b29a      	uxth	r2, r3
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	3303      	adds	r3, #3
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4313      	orrs	r3, r2
 800a192:	b29b      	uxth	r3, r3
 800a194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a198:	bf28      	it	cs
 800a19a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	6a3b      	ldr	r3, [r7, #32]
 800a1a2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	791a      	ldrb	r2, [r3, #4]
 800a1a8:	6a3b      	ldr	r3, [r7, #32]
 800a1aa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	795a      	ldrb	r2, [r3, #5]
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	799a      	ldrb	r2, [r3, #6]
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	79da      	ldrb	r2, [r3, #7]
 800a1c0:	6a3b      	ldr	r3, [r7, #32]
 800a1c2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	7a1a      	ldrb	r2, [r3, #8]
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a1cc:	6a3b      	ldr	r3, [r7, #32]
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b09      	cmp	r3, #9
 800a1d2:	d002      	beq.n	800a1da <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	2209      	movs	r2, #9
 800a1d8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a1da:	88fb      	ldrh	r3, [r7, #6]
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	f240 809d 	bls.w	800a31c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a1e2:	2309      	movs	r3, #9
 800a1e4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1ea:	e081      	b.n	800a2f0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a1ec:	f107 0316 	add.w	r3, r7, #22
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1f4:	f000 f99f 	bl	800a536 <USBH_GetNextDesc>
 800a1f8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d176      	bne.n	800a2f0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	2b09      	cmp	r3, #9
 800a208:	d002      	beq.n	800a210 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20c:	2209      	movs	r2, #9
 800a20e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a214:	221a      	movs	r2, #26
 800a216:	fb02 f303 	mul.w	r3, r2, r3
 800a21a:	3308      	adds	r3, #8
 800a21c:	6a3a      	ldr	r2, [r7, #32]
 800a21e:	4413      	add	r3, r2
 800a220:	3302      	adds	r3, #2
 800a222:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a224:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a226:	69f8      	ldr	r0, [r7, #28]
 800a228:	f000 f87e 	bl	800a328 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a232:	2300      	movs	r3, #0
 800a234:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a236:	e043      	b.n	800a2c0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a238:	f107 0316 	add.w	r3, r7, #22
 800a23c:	4619      	mov	r1, r3
 800a23e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a240:	f000 f979 	bl	800a536 <USBH_GetNextDesc>
 800a244:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	2b05      	cmp	r3, #5
 800a24c:	d138      	bne.n	800a2c0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a24e:	69fb      	ldr	r3, [r7, #28]
 800a250:	795b      	ldrb	r3, [r3, #5]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d10f      	bne.n	800a276 <USBH_ParseCfgDesc+0x13a>
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	799b      	ldrb	r3, [r3, #6]
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d10b      	bne.n	800a276 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	79db      	ldrb	r3, [r3, #7]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d10f      	bne.n	800a286 <USBH_ParseCfgDesc+0x14a>
 800a266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	2b09      	cmp	r3, #9
 800a26c:	d00b      	beq.n	800a286 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a270:	2209      	movs	r2, #9
 800a272:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a274:	e007      	b.n	800a286 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b07      	cmp	r3, #7
 800a27c:	d004      	beq.n	800a288 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	2207      	movs	r2, #7
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	e000      	b.n	800a288 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a286:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a28c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a290:	3201      	adds	r2, #1
 800a292:	00d2      	lsls	r2, r2, #3
 800a294:	211a      	movs	r1, #26
 800a296:	fb01 f303 	mul.w	r3, r1, r3
 800a29a:	4413      	add	r3, r2
 800a29c:	3308      	adds	r3, #8
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2a8:	69b9      	ldr	r1, [r7, #24]
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 f86b 	bl	800a386 <USBH_ParseEPDesc>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a2b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	791b      	ldrb	r3, [r3, #4]
 800a2c4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d204      	bcs.n	800a2d6 <USBH_ParseCfgDesc+0x19a>
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	885a      	ldrh	r2, [r3, #2]
 800a2d0:	8afb      	ldrh	r3, [r7, #22]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d8b0      	bhi.n	800a238 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	791b      	ldrb	r3, [r3, #4]
 800a2da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d201      	bcs.n	800a2e6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a2e2:	2303      	movs	r3, #3
 800a2e4:	e01c      	b.n	800a320 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d805      	bhi.n	800a304 <USBH_ParseCfgDesc+0x1c8>
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	885a      	ldrh	r2, [r3, #2]
 800a2fc:	8afb      	ldrh	r3, [r7, #22]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	f63f af74 	bhi.w	800a1ec <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	791b      	ldrb	r3, [r3, #4]
 800a308:	2b02      	cmp	r3, #2
 800a30a:	bf28      	it	cs
 800a30c:	2302      	movcs	r3, #2
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a314:	429a      	cmp	r2, r3
 800a316:	d201      	bcs.n	800a31c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a318:	2303      	movs	r3, #3
 800a31a:	e001      	b.n	800a320 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a31c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a320:	4618      	mov	r0, r3
 800a322:	3730      	adds	r7, #48	; 0x30
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	785a      	ldrb	r2, [r3, #1]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	789a      	ldrb	r2, [r3, #2]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	78da      	ldrb	r2, [r3, #3]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	791a      	ldrb	r2, [r3, #4]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	795a      	ldrb	r2, [r3, #5]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	799a      	ldrb	r2, [r3, #6]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	79da      	ldrb	r2, [r3, #7]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	7a1a      	ldrb	r2, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	721a      	strb	r2, [r3, #8]
}
 800a37a:	bf00      	nop
 800a37c:	370c      	adds	r7, #12
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a386:	b480      	push	{r7}
 800a388:	b087      	sub	sp, #28
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a392:	2300      	movs	r3, #0
 800a394:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	781a      	ldrb	r2, [r3, #0]
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	785a      	ldrb	r2, [r3, #1]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	789a      	ldrb	r2, [r3, #2]
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	78da      	ldrb	r2, [r3, #3]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3305      	adds	r3, #5
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	021b      	lsls	r3, r3, #8
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	799a      	ldrb	r2, [r3, #6]
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	889b      	ldrh	r3, [r3, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	75fb      	strb	r3, [r7, #23]
 800a3e6:	e033      	b.n	800a450 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	889b      	ldrh	r3, [r3, #4]
 800a3ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a3f0:	f023 0307 	bic.w	r3, r3, #7
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	889b      	ldrh	r3, [r3, #4]
 800a3fe:	b21a      	sxth	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	3304      	adds	r3, #4
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b299      	uxth	r1, r3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3305      	adds	r3, #5
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	021b      	lsls	r3, r3, #8
 800a412:	b29b      	uxth	r3, r3
 800a414:	430b      	orrs	r3, r1
 800a416:	b29b      	uxth	r3, r3
 800a418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d110      	bne.n	800a442 <USBH_ParseEPDesc+0xbc>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3304      	adds	r3, #4
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	b299      	uxth	r1, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3305      	adds	r3, #5
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	021b      	lsls	r3, r3, #8
 800a432:	b29b      	uxth	r3, r3
 800a434:	430b      	orrs	r3, r1
 800a436:	b29b      	uxth	r3, r3
 800a438:	b21b      	sxth	r3, r3
 800a43a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a43e:	b21b      	sxth	r3, r3
 800a440:	e001      	b.n	800a446 <USBH_ParseEPDesc+0xc0>
 800a442:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a446:	4313      	orrs	r3, r2
 800a448:	b21b      	sxth	r3, r3
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a456:	2b00      	cmp	r3, #0
 800a458:	d116      	bne.n	800a488 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	78db      	ldrb	r3, [r3, #3]
 800a45e:	f003 0303 	and.w	r3, r3, #3
 800a462:	2b01      	cmp	r3, #1
 800a464:	d005      	beq.n	800a472 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	78db      	ldrb	r3, [r3, #3]
 800a46a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d127      	bne.n	800a4c2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	799b      	ldrb	r3, [r3, #6]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <USBH_ParseEPDesc+0xfc>
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	799b      	ldrb	r3, [r3, #6]
 800a47e:	2b10      	cmp	r3, #16
 800a480:	d91f      	bls.n	800a4c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a482:	2303      	movs	r3, #3
 800a484:	75fb      	strb	r3, [r7, #23]
 800a486:	e01c      	b.n	800a4c2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	78db      	ldrb	r3, [r3, #3]
 800a48c:	f003 0303 	and.w	r3, r3, #3
 800a490:	2b01      	cmp	r3, #1
 800a492:	d10a      	bne.n	800a4aa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	799b      	ldrb	r3, [r3, #6]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <USBH_ParseEPDesc+0x11e>
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	799b      	ldrb	r3, [r3, #6]
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d90e      	bls.n	800a4c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	75fb      	strb	r3, [r7, #23]
 800a4a8:	e00b      	b.n	800a4c2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	78db      	ldrb	r3, [r3, #3]
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d105      	bne.n	800a4c2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	799b      	ldrb	r3, [r3, #6]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a4be:	2303      	movs	r3, #3
 800a4c0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d120      	bne.n	800a52a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	1e9a      	subs	r2, r3, #2
 800a4ee:	88fb      	ldrh	r3, [r7, #6]
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	bf28      	it	cs
 800a4f4:	4613      	movcs	r3, r2
 800a4f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a4fe:	2300      	movs	r3, #0
 800a500:	82fb      	strh	r3, [r7, #22]
 800a502:	e00b      	b.n	800a51c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a504:	8afb      	ldrh	r3, [r7, #22]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	4413      	add	r3, r2
 800a50a:	781a      	ldrb	r2, [r3, #0]
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	3301      	adds	r3, #1
 800a514:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a516:	8afb      	ldrh	r3, [r7, #22]
 800a518:	3302      	adds	r3, #2
 800a51a:	82fb      	strh	r3, [r7, #22]
 800a51c:	8afa      	ldrh	r2, [r7, #22]
 800a51e:	8abb      	ldrh	r3, [r7, #20]
 800a520:	429a      	cmp	r2, r3
 800a522:	d3ef      	bcc.n	800a504 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2200      	movs	r2, #0
 800a528:	701a      	strb	r2, [r3, #0]
  }
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	881a      	ldrh	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4413      	add	r3, r2
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4413      	add	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a55e:	68fb      	ldr	r3, [r7, #12]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3714      	adds	r7, #20
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr

0800a56c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b086      	sub	sp, #24
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a57a:	2301      	movs	r3, #1
 800a57c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	789b      	ldrb	r3, [r3, #2]
 800a582:	2b01      	cmp	r3, #1
 800a584:	d002      	beq.n	800a58c <USBH_CtlReq+0x20>
 800a586:	2b02      	cmp	r3, #2
 800a588:	d00f      	beq.n	800a5aa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a58a:	e027      	b.n	800a5dc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	68ba      	ldr	r2, [r7, #8]
 800a590:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	88fa      	ldrh	r2, [r7, #6]
 800a596:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2201      	movs	r2, #1
 800a59c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	2202      	movs	r2, #2
 800a5a2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a8:	e018      	b.n	800a5dc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 f81c 	bl	800a5e8 <USBH_HandleControl>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <USBH_CtlReq+0x54>
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	2b03      	cmp	r3, #3
 800a5be:	d106      	bne.n	800a5ce <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	761a      	strb	r2, [r3, #24]
      break;
 800a5cc:	e005      	b.n	800a5da <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
 800a5d0:	2b02      	cmp	r3, #2
 800a5d2:	d102      	bne.n	800a5da <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	709a      	strb	r2, [r3, #2]
      break;
 800a5da:	bf00      	nop
  }
  return status;
 800a5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
	...

0800a5e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e1b      	ldrb	r3, [r3, #24]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	2b0a      	cmp	r3, #10
 800a600:	f200 8156 	bhi.w	800a8b0 <USBH_HandleControl+0x2c8>
 800a604:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <USBH_HandleControl+0x24>)
 800a606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60a:	bf00      	nop
 800a60c:	0800a639 	.word	0x0800a639
 800a610:	0800a653 	.word	0x0800a653
 800a614:	0800a6bd 	.word	0x0800a6bd
 800a618:	0800a6e3 	.word	0x0800a6e3
 800a61c:	0800a71b 	.word	0x0800a71b
 800a620:	0800a745 	.word	0x0800a745
 800a624:	0800a797 	.word	0x0800a797
 800a628:	0800a7b9 	.word	0x0800a7b9
 800a62c:	0800a7f5 	.word	0x0800a7f5
 800a630:	0800a81b 	.word	0x0800a81b
 800a634:	0800a859 	.word	0x0800a859
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f103 0110 	add.w	r1, r3, #16
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	795b      	ldrb	r3, [r3, #5]
 800a642:	461a      	mov	r2, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 f943 	bl	800a8d0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2202      	movs	r2, #2
 800a64e:	761a      	strb	r2, [r3, #24]
      break;
 800a650:	e139      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	795b      	ldrb	r3, [r3, #5]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f003 f851 	bl	800d700 <USBH_LL_GetURBState>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d11e      	bne.n	800a6a6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	7c1b      	ldrb	r3, [r3, #16]
 800a66c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a670:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	8adb      	ldrh	r3, [r3, #22]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a67a:	7b7b      	ldrb	r3, [r7, #13]
 800a67c:	2b80      	cmp	r3, #128	; 0x80
 800a67e:	d103      	bne.n	800a688 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2203      	movs	r2, #3
 800a684:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a686:	e115      	b.n	800a8b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2205      	movs	r2, #5
 800a68c:	761a      	strb	r2, [r3, #24]
      break;
 800a68e:	e111      	b.n	800a8b4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a690:	7b7b      	ldrb	r3, [r7, #13]
 800a692:	2b80      	cmp	r3, #128	; 0x80
 800a694:	d103      	bne.n	800a69e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2209      	movs	r2, #9
 800a69a:	761a      	strb	r2, [r3, #24]
      break;
 800a69c:	e10a      	b.n	800a8b4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2207      	movs	r2, #7
 800a6a2:	761a      	strb	r2, [r3, #24]
      break;
 800a6a4:	e106      	b.n	800a8b4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a6a6:	7bbb      	ldrb	r3, [r7, #14]
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d003      	beq.n	800a6b4 <USBH_HandleControl+0xcc>
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	f040 8100 	bne.w	800a8b4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	220b      	movs	r2, #11
 800a6b8:	761a      	strb	r2, [r3, #24]
      break;
 800a6ba:	e0fb      	b.n	800a8b4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6899      	ldr	r1, [r3, #8]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	899a      	ldrh	r2, [r3, #12]
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	791b      	ldrb	r3, [r3, #4]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f93a 	bl	800a94e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2204      	movs	r2, #4
 800a6de:	761a      	strb	r2, [r3, #24]
      break;
 800a6e0:	e0f1      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	791b      	ldrb	r3, [r3, #4]
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f003 f809 	bl	800d700 <USBH_LL_GetURBState>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d102      	bne.n	800a6fe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2209      	movs	r2, #9
 800a6fc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b05      	cmp	r3, #5
 800a702:	d102      	bne.n	800a70a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a704:	2303      	movs	r3, #3
 800a706:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a708:	e0d6      	b.n	800a8b8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	f040 80d3 	bne.w	800a8b8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	220b      	movs	r2, #11
 800a716:	761a      	strb	r2, [r3, #24]
      break;
 800a718:	e0ce      	b.n	800a8b8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6899      	ldr	r1, [r3, #8]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	899a      	ldrh	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	795b      	ldrb	r3, [r3, #5]
 800a726:	2001      	movs	r0, #1
 800a728:	9000      	str	r0, [sp, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f8ea 	bl	800a904 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a736:	b29a      	uxth	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2206      	movs	r2, #6
 800a740:	761a      	strb	r2, [r3, #24]
      break;
 800a742:	e0c0      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	795b      	ldrb	r3, [r3, #5]
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f002 ffd8 	bl	800d700 <USBH_LL_GetURBState>
 800a750:	4603      	mov	r3, r0
 800a752:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d103      	bne.n	800a762 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2207      	movs	r2, #7
 800a75e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a760:	e0ac      	b.n	800a8bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	2b05      	cmp	r3, #5
 800a766:	d105      	bne.n	800a774 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	220c      	movs	r2, #12
 800a76c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a76e:	2303      	movs	r3, #3
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	e0a3      	b.n	800a8bc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a774:	7bbb      	ldrb	r3, [r7, #14]
 800a776:	2b02      	cmp	r3, #2
 800a778:	d103      	bne.n	800a782 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2205      	movs	r2, #5
 800a77e:	761a      	strb	r2, [r3, #24]
      break;
 800a780:	e09c      	b.n	800a8bc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b04      	cmp	r3, #4
 800a786:	f040 8099 	bne.w	800a8bc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	220b      	movs	r2, #11
 800a78e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a790:	2302      	movs	r3, #2
 800a792:	73fb      	strb	r3, [r7, #15]
      break;
 800a794:	e092      	b.n	800a8bc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	2100      	movs	r1, #0
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 f8d5 	bl	800a94e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2208      	movs	r2, #8
 800a7b4:	761a      	strb	r2, [r3, #24]

      break;
 800a7b6:	e086      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	791b      	ldrb	r3, [r3, #4]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f002 ff9e 	bl	800d700 <USBH_LL_GetURBState>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d105      	bne.n	800a7da <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	220d      	movs	r2, #13
 800a7d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7d8:	e072      	b.n	800a8c0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a7da:	7bbb      	ldrb	r3, [r7, #14]
 800a7dc:	2b04      	cmp	r3, #4
 800a7de:	d103      	bne.n	800a7e8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	220b      	movs	r2, #11
 800a7e4:	761a      	strb	r2, [r3, #24]
      break;
 800a7e6:	e06b      	b.n	800a8c0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	d168      	bne.n	800a8c0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f2:	e065      	b.n	800a8c0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	795b      	ldrb	r3, [r3, #5]
 800a7f8:	2201      	movs	r2, #1
 800a7fa:	9200      	str	r2, [sp, #0]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	2100      	movs	r1, #0
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f87f 	bl	800a904 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	220a      	movs	r2, #10
 800a816:	761a      	strb	r2, [r3, #24]
      break;
 800a818:	e055      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	795b      	ldrb	r3, [r3, #5]
 800a81e:	4619      	mov	r1, r3
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f002 ff6d 	bl	800d700 <USBH_LL_GetURBState>
 800a826:	4603      	mov	r3, r0
 800a828:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a82a:	7bbb      	ldrb	r3, [r7, #14]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d105      	bne.n	800a83c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	220d      	movs	r2, #13
 800a838:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a83a:	e043      	b.n	800a8c4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d103      	bne.n	800a84a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2209      	movs	r2, #9
 800a846:	761a      	strb	r2, [r3, #24]
      break;
 800a848:	e03c      	b.n	800a8c4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b04      	cmp	r3, #4
 800a84e:	d139      	bne.n	800a8c4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	220b      	movs	r2, #11
 800a854:	761a      	strb	r2, [r3, #24]
      break;
 800a856:	e035      	b.n	800a8c4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7e5b      	ldrb	r3, [r3, #25]
 800a85c:	3301      	adds	r3, #1
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	765a      	strb	r2, [r3, #25]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	7e5b      	ldrb	r3, [r3, #25]
 800a868:	2b02      	cmp	r3, #2
 800a86a:	d806      	bhi.n	800a87a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a878:	e025      	b.n	800a8c6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a880:	2106      	movs	r1, #6
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	795b      	ldrb	r3, [r3, #5]
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f90c 	bl	800aab0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	791b      	ldrb	r3, [r3, #4]
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f906 	bl	800aab0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ae:	e00a      	b.n	800a8c6 <USBH_HandleControl+0x2de>

    default:
      break;
 800a8b0:	bf00      	nop
 800a8b2:	e008      	b.n	800a8c6 <USBH_HandleControl+0x2de>
      break;
 800a8b4:	bf00      	nop
 800a8b6:	e006      	b.n	800a8c6 <USBH_HandleControl+0x2de>
      break;
 800a8b8:	bf00      	nop
 800a8ba:	e004      	b.n	800a8c6 <USBH_HandleControl+0x2de>
      break;
 800a8bc:	bf00      	nop
 800a8be:	e002      	b.n	800a8c6 <USBH_HandleControl+0x2de>
      break;
 800a8c0:	bf00      	nop
 800a8c2:	e000      	b.n	800a8c6 <USBH_HandleControl+0x2de>
      break;
 800a8c4:	bf00      	nop
  }

  return status;
 800a8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af04      	add	r7, sp, #16
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8de:	79f9      	ldrb	r1, [r7, #7]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9303      	str	r3, [sp, #12]
 800a8e4:	2308      	movs	r3, #8
 800a8e6:	9302      	str	r3, [sp, #8]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	9301      	str	r3, [sp, #4]
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	9300      	str	r3, [sp, #0]
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f002 fed2 	bl	800d69e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b088      	sub	sp, #32
 800a908:	af04      	add	r7, sp, #16
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	4611      	mov	r1, r2
 800a910:	461a      	mov	r2, r3
 800a912:	460b      	mov	r3, r1
 800a914:	80fb      	strh	r3, [r7, #6]
 800a916:	4613      	mov	r3, r2
 800a918:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a928:	7979      	ldrb	r1, [r7, #5]
 800a92a:	7e3b      	ldrb	r3, [r7, #24]
 800a92c:	9303      	str	r3, [sp, #12]
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	9302      	str	r3, [sp, #8]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	2301      	movs	r3, #1
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	2300      	movs	r3, #0
 800a93c:	2200      	movs	r2, #0
 800a93e:	68f8      	ldr	r0, [r7, #12]
 800a940:	f002 fead 	bl	800d69e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b088      	sub	sp, #32
 800a952:	af04      	add	r7, sp, #16
 800a954:	60f8      	str	r0, [r7, #12]
 800a956:	60b9      	str	r1, [r7, #8]
 800a958:	4611      	mov	r1, r2
 800a95a:	461a      	mov	r2, r3
 800a95c:	460b      	mov	r3, r1
 800a95e:	80fb      	strh	r3, [r7, #6]
 800a960:	4613      	mov	r3, r2
 800a962:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a964:	7979      	ldrb	r1, [r7, #5]
 800a966:	2300      	movs	r3, #0
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	88fb      	ldrh	r3, [r7, #6]
 800a96c:	9302      	str	r3, [sp, #8]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	2301      	movs	r3, #1
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	2300      	movs	r3, #0
 800a978:	2201      	movs	r2, #1
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f002 fe8f 	bl	800d69e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a980:	2300      	movs	r3, #0

}
 800a982:	4618      	mov	r0, r3
 800a984:	3710      	adds	r7, #16
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b088      	sub	sp, #32
 800a98e:	af04      	add	r7, sp, #16
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	4611      	mov	r1, r2
 800a996:	461a      	mov	r2, r3
 800a998:	460b      	mov	r3, r1
 800a99a:	80fb      	strh	r3, [r7, #6]
 800a99c:	4613      	mov	r3, r2
 800a99e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ae:	7979      	ldrb	r1, [r7, #5]
 800a9b0:	7e3b      	ldrb	r3, [r7, #24]
 800a9b2:	9303      	str	r3, [sp, #12]
 800a9b4:	88fb      	ldrh	r3, [r7, #6]
 800a9b6:	9302      	str	r3, [sp, #8]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	2301      	movs	r3, #1
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f002 fe6a 	bl	800d69e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af04      	add	r7, sp, #16
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4611      	mov	r1, r2
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	80fb      	strh	r3, [r7, #6]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ea:	7979      	ldrb	r1, [r7, #5]
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9303      	str	r3, [sp, #12]
 800a9f0:	88fb      	ldrh	r3, [r7, #6]
 800a9f2:	9302      	str	r3, [sp, #8]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	9300      	str	r3, [sp, #0]
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	2201      	movs	r2, #1
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f002 fe4c 	bl	800d69e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa06:	2300      	movs	r3, #0
}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3710      	adds	r7, #16
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af04      	add	r7, sp, #16
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	4608      	mov	r0, r1
 800aa1a:	4611      	mov	r1, r2
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	4603      	mov	r3, r0
 800aa20:	70fb      	strb	r3, [r7, #3]
 800aa22:	460b      	mov	r3, r1
 800aa24:	70bb      	strb	r3, [r7, #2]
 800aa26:	4613      	mov	r3, r2
 800aa28:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aa2a:	7878      	ldrb	r0, [r7, #1]
 800aa2c:	78ba      	ldrb	r2, [r7, #2]
 800aa2e:	78f9      	ldrb	r1, [r7, #3]
 800aa30:	8b3b      	ldrh	r3, [r7, #24]
 800aa32:	9302      	str	r3, [sp, #8]
 800aa34:	7d3b      	ldrb	r3, [r7, #20]
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	7c3b      	ldrb	r3, [r7, #16]
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f002 fddf 	bl	800d602 <USBH_LL_OpenPipe>

  return USBH_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	460b      	mov	r3, r1
 800aa58:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800aa5a:	78fb      	ldrb	r3, [r7, #3]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f002 fdfe 	bl	800d660 <USBH_LL_ClosePipe>

  return USBH_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3708      	adds	r7, #8
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
 800aa76:	460b      	mov	r3, r1
 800aa78:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f836 	bl	800aaec <USBH_GetFreePipe>
 800aa80:	4603      	mov	r3, r0
 800aa82:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800aa84:	89fb      	ldrh	r3, [r7, #14]
 800aa86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d00a      	beq.n	800aaa4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800aa8e:	78fa      	ldrb	r2, [r7, #3]
 800aa90:	89fb      	ldrh	r3, [r7, #14]
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	33e0      	adds	r3, #224	; 0xe0
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aaa4:	89fb      	ldrh	r3, [r7, #14]
 800aaa6:	b2db      	uxtb	r3, r3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aabc:	78fb      	ldrb	r3, [r7, #3]
 800aabe:	2b0f      	cmp	r3, #15
 800aac0:	d80d      	bhi.n	800aade <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800aac2:	78fb      	ldrb	r3, [r7, #3]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	33e0      	adds	r3, #224	; 0xe0
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	4413      	add	r3, r2
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	78fb      	ldrb	r3, [r7, #3]
 800aad0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	33e0      	adds	r3, #224	; 0xe0
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	440b      	add	r3, r1
 800aadc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800aade:	2300      	movs	r3, #0
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
 800aafc:	e00f      	b.n	800ab1e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	33e0      	adds	r3, #224	; 0xe0
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d102      	bne.n	800ab18 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	b29b      	uxth	r3, r3
 800ab16:	e007      	b.n	800ab28 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	2b0f      	cmp	r3, #15
 800ab22:	d9ec      	bls.n	800aafe <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ab24:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3714      	adds	r7, #20
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b084      	sub	sp, #16
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ab3e:	79fb      	ldrb	r3, [r7, #7]
 800ab40:	4a08      	ldr	r2, [pc, #32]	; (800ab64 <disk_status+0x30>)
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	4413      	add	r3, r2
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	79fa      	ldrb	r2, [r7, #7]
 800ab4c:	4905      	ldr	r1, [pc, #20]	; (800ab64 <disk_status+0x30>)
 800ab4e:	440a      	add	r2, r1
 800ab50:	7a12      	ldrb	r2, [r2, #8]
 800ab52:	4610      	mov	r0, r2
 800ab54:	4798      	blx	r3
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ab5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3710      	adds	r7, #16
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	20001698 	.word	0x20001698

0800ab68 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	4603      	mov	r3, r0
 800ab70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ab76:	79fb      	ldrb	r3, [r7, #7]
 800ab78:	4a0d      	ldr	r2, [pc, #52]	; (800abb0 <disk_initialize+0x48>)
 800ab7a:	5cd3      	ldrb	r3, [r2, r3]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d111      	bne.n	800aba4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ab80:	79fb      	ldrb	r3, [r7, #7]
 800ab82:	4a0b      	ldr	r2, [pc, #44]	; (800abb0 <disk_initialize+0x48>)
 800ab84:	2101      	movs	r1, #1
 800ab86:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	4a09      	ldr	r2, [pc, #36]	; (800abb0 <disk_initialize+0x48>)
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	79fa      	ldrb	r2, [r7, #7]
 800ab96:	4906      	ldr	r1, [pc, #24]	; (800abb0 <disk_initialize+0x48>)
 800ab98:	440a      	add	r2, r1
 800ab9a:	7a12      	ldrb	r2, [r2, #8]
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	4798      	blx	r3
 800aba0:	4603      	mov	r3, r0
 800aba2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
 800abae:	bf00      	nop
 800abb0:	20001698 	.word	0x20001698

0800abb4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800abb4:	b590      	push	{r4, r7, lr}
 800abb6:	b087      	sub	sp, #28
 800abb8:	af00      	add	r7, sp, #0
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
 800abbe:	603b      	str	r3, [r7, #0]
 800abc0:	4603      	mov	r3, r0
 800abc2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
 800abc6:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <disk_read+0x3c>)
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	689c      	ldr	r4, [r3, #8]
 800abd0:	7bfb      	ldrb	r3, [r7, #15]
 800abd2:	4a07      	ldr	r2, [pc, #28]	; (800abf0 <disk_read+0x3c>)
 800abd4:	4413      	add	r3, r2
 800abd6:	7a18      	ldrb	r0, [r3, #8]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	47a0      	blx	r4
 800abe0:	4603      	mov	r3, r0
 800abe2:	75fb      	strb	r3, [r7, #23]
  return res;
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	371c      	adds	r7, #28
 800abea:	46bd      	mov	sp, r7
 800abec:	bd90      	pop	{r4, r7, pc}
 800abee:	bf00      	nop
 800abf0:	20001698 	.word	0x20001698

0800abf4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800abf4:	b590      	push	{r4, r7, lr}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60b9      	str	r1, [r7, #8]
 800abfc:	607a      	str	r2, [r7, #4]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	4a0a      	ldr	r2, [pc, #40]	; (800ac30 <disk_write+0x3c>)
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68dc      	ldr	r4, [r3, #12]
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	4a07      	ldr	r2, [pc, #28]	; (800ac30 <disk_write+0x3c>)
 800ac14:	4413      	add	r3, r2
 800ac16:	7a18      	ldrb	r0, [r3, #8]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	47a0      	blx	r4
 800ac20:	4603      	mov	r3, r0
 800ac22:	75fb      	strb	r3, [r7, #23]
  return res;
 800ac24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	371c      	adds	r7, #28
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd90      	pop	{r4, r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20001698 	.word	0x20001698

0800ac34 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	603a      	str	r2, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
 800ac40:	460b      	mov	r3, r1
 800ac42:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ac44:	79fb      	ldrb	r3, [r7, #7]
 800ac46:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <disk_ioctl+0x38>)
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	79fa      	ldrb	r2, [r7, #7]
 800ac52:	4906      	ldr	r1, [pc, #24]	; (800ac6c <disk_ioctl+0x38>)
 800ac54:	440a      	add	r2, r1
 800ac56:	7a10      	ldrb	r0, [r2, #8]
 800ac58:	79b9      	ldrb	r1, [r7, #6]
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	4798      	blx	r3
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]
  return res;
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20001698 	.word	0x20001698

0800ac70 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ac70:	b480      	push	{r7}
 800ac72:	b085      	sub	sp, #20
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ac80:	89fb      	ldrh	r3, [r7, #14]
 800ac82:	021b      	lsls	r3, r3, #8
 800ac84:	b21a      	sxth	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	b21b      	sxth	r3, r3
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ac92:	89fb      	ldrh	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3303      	adds	r3, #3
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	3202      	adds	r2, #2
 800acb8:	7812      	ldrb	r2, [r2, #0]
 800acba:	4313      	orrs	r3, r2
 800acbc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	021b      	lsls	r3, r3, #8
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	3201      	adds	r2, #1
 800acc6:	7812      	ldrb	r2, [r2, #0]
 800acc8:	4313      	orrs	r3, r2
 800acca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	021b      	lsls	r3, r3, #8
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7812      	ldrb	r2, [r2, #0]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
	return rv;
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ace6:	b480      	push	{r7}
 800ace8:	b083      	sub	sp, #12
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
 800acee:	460b      	mov	r3, r1
 800acf0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	1c5a      	adds	r2, r3, #1
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	887a      	ldrh	r2, [r7, #2]
 800acfa:	b2d2      	uxtb	r2, r2
 800acfc:	701a      	strb	r2, [r3, #0]
 800acfe:	887b      	ldrh	r3, [r7, #2]
 800ad00:	0a1b      	lsrs	r3, r3, #8
 800ad02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	1c5a      	adds	r2, r3, #1
 800ad08:	607a      	str	r2, [r7, #4]
 800ad0a:	887a      	ldrh	r2, [r7, #2]
 800ad0c:	b2d2      	uxtb	r2, r2
 800ad0e:	701a      	strb	r2, [r3, #0]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	1c5a      	adds	r2, r3, #1
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	b2d2      	uxtb	r2, r2
 800ad30:	701a      	strb	r2, [r3, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	0a1b      	lsrs	r3, r3, #8
 800ad36:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	1c5a      	adds	r2, r3, #1
 800ad3c:	607a      	str	r2, [r7, #4]
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	b2d2      	uxtb	r2, r2
 800ad42:	701a      	strb	r2, [r3, #0]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	0a1b      	lsrs	r3, r3, #8
 800ad48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	1c5a      	adds	r2, r3, #1
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	0a1b      	lsrs	r3, r3, #8
 800ad5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	1c5a      	adds	r2, r3, #1
 800ad60:	607a      	str	r2, [r7, #4]
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ad74:	b480      	push	{r7}
 800ad76:	b087      	sub	sp, #28
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00d      	beq.n	800adaa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	1c53      	adds	r3, r2, #1
 800ad92:	613b      	str	r3, [r7, #16]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	1c59      	adds	r1, r3, #1
 800ad98:	6179      	str	r1, [r7, #20]
 800ad9a:	7812      	ldrb	r2, [r2, #0]
 800ad9c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	607b      	str	r3, [r7, #4]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f1      	bne.n	800ad8e <mem_cpy+0x1a>
	}
}
 800adaa:	bf00      	nop
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr

0800adb6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800adb6:	b480      	push	{r7}
 800adb8:	b087      	sub	sp, #28
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	1c5a      	adds	r2, r3, #1
 800adca:	617a      	str	r2, [r7, #20]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	b2d2      	uxtb	r2, r2
 800add0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3b01      	subs	r3, #1
 800add6:	607b      	str	r3, [r7, #4]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1f3      	bne.n	800adc6 <mem_set+0x10>
}
 800adde:	bf00      	nop
 800ade0:	bf00      	nop
 800ade2:	371c      	adds	r7, #28
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800adec:	b480      	push	{r7}
 800adee:	b089      	sub	sp, #36	; 0x24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	60b9      	str	r1, [r7, #8]
 800adf6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	61fb      	str	r3, [r7, #28]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	1c5a      	adds	r2, r3, #1
 800ae08:	61fa      	str	r2, [r7, #28]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	61ba      	str	r2, [r7, #24]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	1acb      	subs	r3, r1, r3
 800ae18:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d002      	beq.n	800ae2c <mem_cmp+0x40>
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0eb      	beq.n	800ae04 <mem_cmp+0x18>

	return r;
 800ae2c:	697b      	ldr	r3, [r7, #20]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3724      	adds	r7, #36	; 0x24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ae3a:	b480      	push	{r7}
 800ae3c:	b083      	sub	sp, #12
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ae44:	e002      	b.n	800ae4c <chk_chr+0x12>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	607b      	str	r3, [r7, #4]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <chk_chr+0x26>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d1f2      	bne.n	800ae46 <chk_chr+0xc>
	return *str;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	781b      	ldrb	r3, [r3, #0]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b085      	sub	sp, #20
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60bb      	str	r3, [r7, #8]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	60fb      	str	r3, [r7, #12]
 800ae82:	e029      	b.n	800aed8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ae84:	4a27      	ldr	r2, [pc, #156]	; (800af24 <chk_lock+0xb4>)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	4413      	add	r3, r2
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d01d      	beq.n	800aece <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae92:	4a24      	ldr	r2, [pc, #144]	; (800af24 <chk_lock+0xb4>)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	011b      	lsls	r3, r3, #4
 800ae98:	4413      	add	r3, r2
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d116      	bne.n	800aed2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aea4:	4a1f      	ldr	r2, [pc, #124]	; (800af24 <chk_lock+0xb4>)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	4413      	add	r3, r2
 800aeac:	3304      	adds	r3, #4
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d10c      	bne.n	800aed2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aeb8:	4a1a      	ldr	r2, [pc, #104]	; (800af24 <chk_lock+0xb4>)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	4413      	add	r3, r2
 800aec0:	3308      	adds	r3, #8
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d102      	bne.n	800aed2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800aecc:	e007      	b.n	800aede <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800aece:	2301      	movs	r3, #1
 800aed0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3301      	adds	r3, #1
 800aed6:	60fb      	str	r3, [r7, #12]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d9d2      	bls.n	800ae84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d109      	bne.n	800aef8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d102      	bne.n	800aef0 <chk_lock+0x80>
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d101      	bne.n	800aef4 <chk_lock+0x84>
 800aef0:	2300      	movs	r3, #0
 800aef2:	e010      	b.n	800af16 <chk_lock+0xa6>
 800aef4:	2312      	movs	r3, #18
 800aef6:	e00e      	b.n	800af16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d108      	bne.n	800af10 <chk_lock+0xa0>
 800aefe:	4a09      	ldr	r2, [pc, #36]	; (800af24 <chk_lock+0xb4>)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	4413      	add	r3, r2
 800af06:	330c      	adds	r3, #12
 800af08:	881b      	ldrh	r3, [r3, #0]
 800af0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af0e:	d101      	bne.n	800af14 <chk_lock+0xa4>
 800af10:	2310      	movs	r3, #16
 800af12:	e000      	b.n	800af16 <chk_lock+0xa6>
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3714      	adds	r7, #20
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20001678 	.word	0x20001678

0800af28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af2e:	2300      	movs	r3, #0
 800af30:	607b      	str	r3, [r7, #4]
 800af32:	e002      	b.n	800af3a <enq_lock+0x12>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3301      	adds	r3, #1
 800af38:	607b      	str	r3, [r7, #4]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d806      	bhi.n	800af4e <enq_lock+0x26>
 800af40:	4a09      	ldr	r2, [pc, #36]	; (800af68 <enq_lock+0x40>)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	011b      	lsls	r3, r3, #4
 800af46:	4413      	add	r3, r2
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f2      	bne.n	800af34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b02      	cmp	r3, #2
 800af52:	bf14      	ite	ne
 800af54:	2301      	movne	r3, #1
 800af56:	2300      	moveq	r3, #0
 800af58:	b2db      	uxtb	r3, r3
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	20001678 	.word	0x20001678

0800af6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
 800af7a:	e01f      	b.n	800afbc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800af7c:	4a41      	ldr	r2, [pc, #260]	; (800b084 <inc_lock+0x118>)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	4413      	add	r3, r2
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d113      	bne.n	800afb6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af8e:	4a3d      	ldr	r2, [pc, #244]	; (800b084 <inc_lock+0x118>)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	011b      	lsls	r3, r3, #4
 800af94:	4413      	add	r3, r2
 800af96:	3304      	adds	r3, #4
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d109      	bne.n	800afb6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800afa2:	4a38      	ldr	r2, [pc, #224]	; (800b084 <inc_lock+0x118>)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	011b      	lsls	r3, r3, #4
 800afa8:	4413      	add	r3, r2
 800afaa:	3308      	adds	r3, #8
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d006      	beq.n	800afc4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	3301      	adds	r3, #1
 800afba:	60fb      	str	r3, [r7, #12]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d9dc      	bls.n	800af7c <inc_lock+0x10>
 800afc2:	e000      	b.n	800afc6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800afc4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d132      	bne.n	800b032 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]
 800afd0:	e002      	b.n	800afd8 <inc_lock+0x6c>
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3301      	adds	r3, #1
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d806      	bhi.n	800afec <inc_lock+0x80>
 800afde:	4a29      	ldr	r2, [pc, #164]	; (800b084 <inc_lock+0x118>)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	011b      	lsls	r3, r3, #4
 800afe4:	4413      	add	r3, r2
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1f2      	bne.n	800afd2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	d101      	bne.n	800aff6 <inc_lock+0x8a>
 800aff2:	2300      	movs	r3, #0
 800aff4:	e040      	b.n	800b078 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4922      	ldr	r1, [pc, #136]	; (800b084 <inc_lock+0x118>)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	011b      	lsls	r3, r3, #4
 800b000:	440b      	add	r3, r1
 800b002:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	491e      	ldr	r1, [pc, #120]	; (800b084 <inc_lock+0x118>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	011b      	lsls	r3, r3, #4
 800b00e:	440b      	add	r3, r1
 800b010:	3304      	adds	r3, #4
 800b012:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695a      	ldr	r2, [r3, #20]
 800b018:	491a      	ldr	r1, [pc, #104]	; (800b084 <inc_lock+0x118>)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	440b      	add	r3, r1
 800b020:	3308      	adds	r3, #8
 800b022:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b024:	4a17      	ldr	r2, [pc, #92]	; (800b084 <inc_lock+0x118>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	011b      	lsls	r3, r3, #4
 800b02a:	4413      	add	r3, r2
 800b02c:	330c      	adds	r3, #12
 800b02e:	2200      	movs	r2, #0
 800b030:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d009      	beq.n	800b04c <inc_lock+0xe0>
 800b038:	4a12      	ldr	r2, [pc, #72]	; (800b084 <inc_lock+0x118>)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	4413      	add	r3, r2
 800b040:	330c      	adds	r3, #12
 800b042:	881b      	ldrh	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <inc_lock+0xe0>
 800b048:	2300      	movs	r3, #0
 800b04a:	e015      	b.n	800b078 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d108      	bne.n	800b064 <inc_lock+0xf8>
 800b052:	4a0c      	ldr	r2, [pc, #48]	; (800b084 <inc_lock+0x118>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	011b      	lsls	r3, r3, #4
 800b058:	4413      	add	r3, r2
 800b05a:	330c      	adds	r3, #12
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	3301      	adds	r3, #1
 800b060:	b29a      	uxth	r2, r3
 800b062:	e001      	b.n	800b068 <inc_lock+0xfc>
 800b064:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b068:	4906      	ldr	r1, [pc, #24]	; (800b084 <inc_lock+0x118>)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	011b      	lsls	r3, r3, #4
 800b06e:	440b      	add	r3, r1
 800b070:	330c      	adds	r3, #12
 800b072:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3301      	adds	r3, #1
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	20001678 	.word	0x20001678

0800b088 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	3b01      	subs	r3, #1
 800b094:	607b      	str	r3, [r7, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d825      	bhi.n	800b0e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b09c:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <dec_lock+0x74>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	011b      	lsls	r3, r3, #4
 800b0a2:	4413      	add	r3, r2
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	881b      	ldrh	r3, [r3, #0]
 800b0a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b0aa:	89fb      	ldrh	r3, [r7, #14]
 800b0ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0b0:	d101      	bne.n	800b0b6 <dec_lock+0x2e>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b0b6:	89fb      	ldrh	r3, [r7, #14]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <dec_lock+0x3a>
 800b0bc:	89fb      	ldrh	r3, [r7, #14]
 800b0be:	3b01      	subs	r3, #1
 800b0c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b0c2:	4a0e      	ldr	r2, [pc, #56]	; (800b0fc <dec_lock+0x74>)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	4413      	add	r3, r2
 800b0ca:	330c      	adds	r3, #12
 800b0cc:	89fa      	ldrh	r2, [r7, #14]
 800b0ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b0d0:	89fb      	ldrh	r3, [r7, #14]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d105      	bne.n	800b0e2 <dec_lock+0x5a>
 800b0d6:	4a09      	ldr	r2, [pc, #36]	; (800b0fc <dec_lock+0x74>)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	4413      	add	r3, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	737b      	strb	r3, [r7, #13]
 800b0e6:	e001      	b.n	800b0ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b0ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	20001678 	.word	0x20001678

0800b100 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e010      	b.n	800b130 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b10e:	4a0d      	ldr	r2, [pc, #52]	; (800b144 <clear_lock+0x44>)
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	4413      	add	r3, r2
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d105      	bne.n	800b12a <clear_lock+0x2a>
 800b11e:	4a09      	ldr	r2, [pc, #36]	; (800b144 <clear_lock+0x44>)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	011b      	lsls	r3, r3, #4
 800b124:	4413      	add	r3, r2
 800b126:	2200      	movs	r2, #0
 800b128:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3301      	adds	r3, #1
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d9eb      	bls.n	800b10e <clear_lock+0xe>
	}
}
 800b136:	bf00      	nop
 800b138:	bf00      	nop
 800b13a:	3714      	adds	r7, #20
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	20001678 	.word	0x20001678

0800b148 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	78db      	ldrb	r3, [r3, #3]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d034      	beq.n	800b1c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b160:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	7858      	ldrb	r0, [r3, #1]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b16c:	2301      	movs	r3, #1
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	f7ff fd40 	bl	800abf4 <disk_write>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b17a:	2301      	movs	r3, #1
 800b17c:	73fb      	strb	r3, [r7, #15]
 800b17e:	e022      	b.n	800b1c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2200      	movs	r2, #0
 800b184:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	1ad2      	subs	r2, r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	429a      	cmp	r2, r3
 800b194:	d217      	bcs.n	800b1c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	789b      	ldrb	r3, [r3, #2]
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	e010      	b.n	800b1c0 <sync_window+0x78>
					wsect += fs->fsize;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	7858      	ldrb	r0, [r3, #1]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	697a      	ldr	r2, [r7, #20]
 800b1b6:	f7ff fd1d 	bl	800abf4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	613b      	str	r3, [r7, #16]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d8eb      	bhi.n	800b19e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	d01b      	beq.n	800b220 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ffad 	bl	800b148 <sync_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d113      	bne.n	800b220 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7858      	ldrb	r0, [r3, #1]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b202:	2301      	movs	r3, #1
 800b204:	683a      	ldr	r2, [r7, #0]
 800b206:	f7ff fcd5 	bl	800abb4 <disk_read>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d004      	beq.n	800b21a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b210:	f04f 33ff 	mov.w	r3, #4294967295
 800b214:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b216:	2301      	movs	r3, #1
 800b218:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	683a      	ldr	r2, [r7, #0]
 800b21e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b220:	7bfb      	ldrb	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff ff87 	bl	800b148 <sync_window>
 800b23a:	4603      	mov	r3, r0
 800b23c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b23e:	7bfb      	ldrb	r3, [r7, #15]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d158      	bne.n	800b2f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d148      	bne.n	800b2de <sync_fs+0xb2>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	791b      	ldrb	r3, [r3, #4]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d144      	bne.n	800b2de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	3330      	adds	r3, #48	; 0x30
 800b258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fda9 	bl	800adb6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	3330      	adds	r3, #48	; 0x30
 800b268:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b26c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff fd38 	bl	800ace6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3330      	adds	r3, #48	; 0x30
 800b27a:	4921      	ldr	r1, [pc, #132]	; (800b300 <sync_fs+0xd4>)
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff fd4d 	bl	800ad1c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3330      	adds	r3, #48	; 0x30
 800b286:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b28a:	491e      	ldr	r1, [pc, #120]	; (800b304 <sync_fs+0xd8>)
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff fd45 	bl	800ad1c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	3330      	adds	r3, #48	; 0x30
 800b296:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	4619      	mov	r1, r3
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	f7ff fd3b 	bl	800ad1c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3330      	adds	r3, #48	; 0x30
 800b2aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	4610      	mov	r0, r2
 800b2b6:	f7ff fd31 	bl	800ad1c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	69db      	ldr	r3, [r3, #28]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7858      	ldrb	r0, [r3, #1]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	f7ff fc8e 	bl	800abf4 <disk_write>
			fs->fsi_flag = 0;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	785b      	ldrb	r3, [r3, #1]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff fca4 	bl	800ac34 <disk_ioctl>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <sync_fs+0xca>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	41615252 	.word	0x41615252
 800b304:	61417272 	.word	0x61417272

0800b308 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b308:	b480      	push	{r7}
 800b30a:	b083      	sub	sp, #12
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	3b02      	subs	r3, #2
 800b316:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	3b02      	subs	r3, #2
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d301      	bcc.n	800b328 <clust2sect+0x20>
 800b324:	2300      	movs	r3, #0
 800b326:	e008      	b.n	800b33a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	895b      	ldrh	r3, [r3, #10]
 800b32c:	461a      	mov	r2, r3
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	fb03 f202 	mul.w	r2, r3, r2
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b338:	4413      	add	r3, r2
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d904      	bls.n	800b366 <get_fat+0x20>
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	695b      	ldr	r3, [r3, #20]
 800b360:	683a      	ldr	r2, [r7, #0]
 800b362:	429a      	cmp	r2, r3
 800b364:	d302      	bcc.n	800b36c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b366:	2301      	movs	r3, #1
 800b368:	617b      	str	r3, [r7, #20]
 800b36a:	e08f      	b.n	800b48c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295
 800b370:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	2b03      	cmp	r3, #3
 800b378:	d062      	beq.n	800b440 <get_fat+0xfa>
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	dc7c      	bgt.n	800b478 <get_fat+0x132>
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d002      	beq.n	800b388 <get_fat+0x42>
 800b382:	2b02      	cmp	r3, #2
 800b384:	d042      	beq.n	800b40c <get_fat+0xc6>
 800b386:	e077      	b.n	800b478 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	60fb      	str	r3, [r7, #12]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	085b      	lsrs	r3, r3, #1
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	6a1a      	ldr	r2, [r3, #32]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	0a5b      	lsrs	r3, r3, #9
 800b39e:	4413      	add	r3, r2
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6938      	ldr	r0, [r7, #16]
 800b3a4:	f7ff ff14 	bl	800b1d0 <move_window>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d167      	bne.n	800b47e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	1c5a      	adds	r2, r3, #1
 800b3b2:	60fa      	str	r2, [r7, #12]
 800b3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	6a1a      	ldr	r2, [r3, #32]
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	0a5b      	lsrs	r3, r3, #9
 800b3ca:	4413      	add	r3, r2
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	6938      	ldr	r0, [r7, #16]
 800b3d0:	f7ff fefe 	bl	800b1d0 <move_window>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d153      	bne.n	800b482 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3e8:	021b      	lsls	r3, r3, #8
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	f003 0301 	and.w	r3, r3, #1
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <get_fat+0xbc>
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	091b      	lsrs	r3, r3, #4
 800b400:	e002      	b.n	800b408 <get_fat+0xc2>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b408:	617b      	str	r3, [r7, #20]
			break;
 800b40a:	e03f      	b.n	800b48c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	6a1a      	ldr	r2, [r3, #32]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	0a1b      	lsrs	r3, r3, #8
 800b414:	4413      	add	r3, r2
 800b416:	4619      	mov	r1, r3
 800b418:	6938      	ldr	r0, [r7, #16]
 800b41a:	f7ff fed9 	bl	800b1d0 <move_window>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d130      	bne.n	800b486 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	005b      	lsls	r3, r3, #1
 800b42e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b432:	4413      	add	r3, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fc1b 	bl	800ac70 <ld_word>
 800b43a:	4603      	mov	r3, r0
 800b43c:	617b      	str	r3, [r7, #20]
			break;
 800b43e:	e025      	b.n	800b48c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6a1a      	ldr	r2, [r3, #32]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	09db      	lsrs	r3, r3, #7
 800b448:	4413      	add	r3, r2
 800b44a:	4619      	mov	r1, r3
 800b44c:	6938      	ldr	r0, [r7, #16]
 800b44e:	f7ff febf 	bl	800b1d0 <move_window>
 800b452:	4603      	mov	r3, r0
 800b454:	2b00      	cmp	r3, #0
 800b456:	d118      	bne.n	800b48a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b466:	4413      	add	r3, r2
 800b468:	4618      	mov	r0, r3
 800b46a:	f7ff fc19 	bl	800aca0 <ld_dword>
 800b46e:	4603      	mov	r3, r0
 800b470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b474:	617b      	str	r3, [r7, #20]
			break;
 800b476:	e009      	b.n	800b48c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b478:	2301      	movs	r3, #1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	e006      	b.n	800b48c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b47e:	bf00      	nop
 800b480:	e004      	b.n	800b48c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b482:	bf00      	nop
 800b484:	e002      	b.n	800b48c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b486:	bf00      	nop
 800b488:	e000      	b.n	800b48c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b48a:	bf00      	nop
		}
	}

	return val;
 800b48c:	697b      	ldr	r3, [r7, #20]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3718      	adds	r7, #24
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b496:	b590      	push	{r4, r7, lr}
 800b498:	b089      	sub	sp, #36	; 0x24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	f240 80d9 	bls.w	800b660 <put_fat+0x1ca>
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	f080 80d3 	bcs.w	800b660 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	f000 8096 	beq.w	800b5f0 <put_fat+0x15a>
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	f300 80cb 	bgt.w	800b660 <put_fat+0x1ca>
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d002      	beq.n	800b4d4 <put_fat+0x3e>
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d06e      	beq.n	800b5b0 <put_fat+0x11a>
 800b4d2:	e0c5      	b.n	800b660 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	61bb      	str	r3, [r7, #24]
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	085b      	lsrs	r3, r3, #1
 800b4dc:	69ba      	ldr	r2, [r7, #24]
 800b4de:	4413      	add	r3, r2
 800b4e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a1a      	ldr	r2, [r3, #32]
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	0a5b      	lsrs	r3, r3, #9
 800b4ea:	4413      	add	r3, r2
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f7ff fe6e 	bl	800b1d0 <move_window>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4f8:	7ffb      	ldrb	r3, [r7, #31]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f040 80a9 	bne.w	800b652 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	1c59      	adds	r1, r3, #1
 800b50a:	61b9      	str	r1, [r7, #24]
 800b50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b510:	4413      	add	r3, r2
 800b512:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00d      	beq.n	800b53a <put_fat+0xa4>
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	b25b      	sxtb	r3, r3
 800b524:	f003 030f 	and.w	r3, r3, #15
 800b528:	b25a      	sxtb	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	011b      	lsls	r3, r3, #4
 800b530:	b25b      	sxtb	r3, r3
 800b532:	4313      	orrs	r3, r2
 800b534:	b25b      	sxtb	r3, r3
 800b536:	b2db      	uxtb	r3, r3
 800b538:	e001      	b.n	800b53e <put_fat+0xa8>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2201      	movs	r2, #1
 800b546:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	6a1a      	ldr	r2, [r3, #32]
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	0a5b      	lsrs	r3, r3, #9
 800b550:	4413      	add	r3, r2
 800b552:	4619      	mov	r1, r3
 800b554:	68f8      	ldr	r0, [r7, #12]
 800b556:	f7ff fe3b 	bl	800b1d0 <move_window>
 800b55a:	4603      	mov	r3, r0
 800b55c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b55e:	7ffb      	ldrb	r3, [r7, #31]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d178      	bne.n	800b656 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b570:	4413      	add	r3, r2
 800b572:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <put_fat+0xf0>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	091b      	lsrs	r3, r3, #4
 800b582:	b2db      	uxtb	r3, r3
 800b584:	e00e      	b.n	800b5a4 <put_fat+0x10e>
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	b25b      	sxtb	r3, r3
 800b58c:	f023 030f 	bic.w	r3, r3, #15
 800b590:	b25a      	sxtb	r2, r3
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	0a1b      	lsrs	r3, r3, #8
 800b596:	b25b      	sxtb	r3, r3
 800b598:	f003 030f 	and.w	r3, r3, #15
 800b59c:	b25b      	sxtb	r3, r3
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	b25b      	sxtb	r3, r3
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	70da      	strb	r2, [r3, #3]
			break;
 800b5ae:	e057      	b.n	800b660 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6a1a      	ldr	r2, [r3, #32]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	0a1b      	lsrs	r3, r3, #8
 800b5b8:	4413      	add	r3, r2
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff fe07 	bl	800b1d0 <move_window>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5c6:	7ffb      	ldrb	r3, [r7, #31]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d146      	bne.n	800b65a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	005b      	lsls	r3, r3, #1
 800b5d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b5da:	4413      	add	r3, r2
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	b292      	uxth	r2, r2
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7ff fb7f 	bl	800ace6 <st_word>
			fs->wflag = 1;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	70da      	strb	r2, [r3, #3]
			break;
 800b5ee:	e037      	b.n	800b660 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	6a1a      	ldr	r2, [r3, #32]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	09db      	lsrs	r3, r3, #7
 800b5f8:	4413      	add	r3, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f7ff fde7 	bl	800b1d0 <move_window>
 800b602:	4603      	mov	r3, r0
 800b604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b606:	7ffb      	ldrb	r3, [r7, #31]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d128      	bne.n	800b65e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b620:	4413      	add	r3, r2
 800b622:	4618      	mov	r0, r3
 800b624:	f7ff fb3c 	bl	800aca0 <ld_dword>
 800b628:	4603      	mov	r3, r0
 800b62a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b62e:	4323      	orrs	r3, r4
 800b630:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	009b      	lsls	r3, r3, #2
 800b63c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b640:	4413      	add	r3, r2
 800b642:	6879      	ldr	r1, [r7, #4]
 800b644:	4618      	mov	r0, r3
 800b646:	f7ff fb69 	bl	800ad1c <st_dword>
			fs->wflag = 1;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2201      	movs	r2, #1
 800b64e:	70da      	strb	r2, [r3, #3]
			break;
 800b650:	e006      	b.n	800b660 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b652:	bf00      	nop
 800b654:	e004      	b.n	800b660 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b656:	bf00      	nop
 800b658:	e002      	b.n	800b660 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b65e:	bf00      	nop
		}
	}
	return res;
 800b660:	7ffb      	ldrb	r3, [r7, #31]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3724      	adds	r7, #36	; 0x24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd90      	pop	{r4, r7, pc}

0800b66a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b66a:	b580      	push	{r7, lr}
 800b66c:	b088      	sub	sp, #32
 800b66e:	af00      	add	r7, sp, #0
 800b670:	60f8      	str	r0, [r7, #12]
 800b672:	60b9      	str	r1, [r7, #8]
 800b674:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d904      	bls.n	800b690 <remove_chain+0x26>
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d301      	bcc.n	800b694 <remove_chain+0x2a>
 800b690:	2302      	movs	r3, #2
 800b692:	e04b      	b.n	800b72c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00c      	beq.n	800b6b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b69a:	f04f 32ff 	mov.w	r2, #4294967295
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	69b8      	ldr	r0, [r7, #24]
 800b6a2:	f7ff fef8 	bl	800b496 <put_fat>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b6aa:	7ffb      	ldrb	r3, [r7, #31]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <remove_chain+0x4a>
 800b6b0:	7ffb      	ldrb	r3, [r7, #31]
 800b6b2:	e03b      	b.n	800b72c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff fe45 	bl	800b346 <get_fat>
 800b6bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d031      	beq.n	800b728 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d101      	bne.n	800b6ce <remove_chain+0x64>
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e02e      	b.n	800b72c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d4:	d101      	bne.n	800b6da <remove_chain+0x70>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e028      	b.n	800b72c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b6da:	2200      	movs	r2, #0
 800b6dc:	68b9      	ldr	r1, [r7, #8]
 800b6de:	69b8      	ldr	r0, [r7, #24]
 800b6e0:	f7ff fed9 	bl	800b496 <put_fat>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b6e8:	7ffb      	ldrb	r3, [r7, #31]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d001      	beq.n	800b6f2 <remove_chain+0x88>
 800b6ee:	7ffb      	ldrb	r3, [r7, #31]
 800b6f0:	e01c      	b.n	800b72c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	691a      	ldr	r2, [r3, #16]
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	3b02      	subs	r3, #2
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d20b      	bcs.n	800b718 <remove_chain+0xae>
			fs->free_clst++;
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b70a:	69bb      	ldr	r3, [r7, #24]
 800b70c:	791b      	ldrb	r3, [r3, #4]
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	b2da      	uxtb	r2, r3
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	429a      	cmp	r2, r3
 800b724:	d3c6      	bcc.n	800b6b4 <remove_chain+0x4a>
 800b726:	e000      	b.n	800b72a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b728:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3720      	adds	r7, #32
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b088      	sub	sp, #32
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d10d      	bne.n	800b766 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d004      	beq.n	800b760 <create_chain+0x2c>
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	69ba      	ldr	r2, [r7, #24]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d31b      	bcc.n	800b798 <create_chain+0x64>
 800b760:	2301      	movs	r3, #1
 800b762:	61bb      	str	r3, [r7, #24]
 800b764:	e018      	b.n	800b798 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff fdec 	bl	800b346 <get_fat>
 800b76e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d801      	bhi.n	800b77a <create_chain+0x46>
 800b776:	2301      	movs	r3, #1
 800b778:	e070      	b.n	800b85c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b780:	d101      	bne.n	800b786 <create_chain+0x52>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	e06a      	b.n	800b85c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d201      	bcs.n	800b794 <create_chain+0x60>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	e063      	b.n	800b85c <create_chain+0x128>
		scl = clst;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d307      	bcc.n	800b7bc <create_chain+0x88>
				ncl = 2;
 800b7ac:	2302      	movs	r3, #2
 800b7ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b7b0:	69fa      	ldr	r2, [r7, #28]
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d901      	bls.n	800b7bc <create_chain+0x88>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	e04f      	b.n	800b85c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b7bc:	69f9      	ldr	r1, [r7, #28]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff fdc1 	bl	800b346 <get_fat>
 800b7c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d003      	beq.n	800b7da <create_chain+0xa6>
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d8:	d101      	bne.n	800b7de <create_chain+0xaa>
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	e03e      	b.n	800b85c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b7de:	69fa      	ldr	r2, [r7, #28]
 800b7e0:	69bb      	ldr	r3, [r7, #24]
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d1da      	bne.n	800b79c <create_chain+0x68>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	e038      	b.n	800b85c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b7ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b7f0:	69f9      	ldr	r1, [r7, #28]
 800b7f2:	6938      	ldr	r0, [r7, #16]
 800b7f4:	f7ff fe4f 	bl	800b496 <put_fat>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d109      	bne.n	800b816 <create_chain+0xe2>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d006      	beq.n	800b816 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b808:	69fa      	ldr	r2, [r7, #28]
 800b80a:	6839      	ldr	r1, [r7, #0]
 800b80c:	6938      	ldr	r0, [r7, #16]
 800b80e:	f7ff fe42 	bl	800b496 <put_fat>
 800b812:	4603      	mov	r3, r0
 800b814:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d116      	bne.n	800b84a <create_chain+0x116>
		fs->last_clst = ncl;
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	69fa      	ldr	r2, [r7, #28]
 800b820:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	691a      	ldr	r2, [r3, #16]
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	3b02      	subs	r3, #2
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d804      	bhi.n	800b83a <create_chain+0x106>
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	1e5a      	subs	r2, r3, #1
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	791b      	ldrb	r3, [r3, #4]
 800b83e:	f043 0301 	orr.w	r3, r3, #1
 800b842:	b2da      	uxtb	r2, r3
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	711a      	strb	r2, [r3, #4]
 800b848:	e007      	b.n	800b85a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d102      	bne.n	800b856 <create_chain+0x122>
 800b850:	f04f 33ff 	mov.w	r3, #4294967295
 800b854:	e000      	b.n	800b858 <create_chain+0x124>
 800b856:	2301      	movs	r3, #1
 800b858:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b85a:	69fb      	ldr	r3, [r7, #28]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3720      	adds	r7, #32
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b864:	b480      	push	{r7}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b878:	3304      	adds	r3, #4
 800b87a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	0a5b      	lsrs	r3, r3, #9
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	8952      	ldrh	r2, [r2, #10]
 800b884:	fbb3 f3f2 	udiv	r3, r3, r2
 800b888:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	1d1a      	adds	r2, r3, #4
 800b88e:	613a      	str	r2, [r7, #16]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d101      	bne.n	800b89e <clmt_clust+0x3a>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e010      	b.n	800b8c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b89e:	697a      	ldr	r2, [r7, #20]
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d307      	bcc.n	800b8b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	3304      	adds	r3, #4
 800b8b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b8b4:	e7e9      	b.n	800b88a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b8b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	4413      	add	r3, r2
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	371c      	adds	r7, #28
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8e2:	d204      	bcs.n	800b8ee <dir_sdi+0x22>
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	f003 031f 	and.w	r3, r3, #31
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e063      	b.n	800b9ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d106      	bne.n	800b912 <dir_sdi+0x46>
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d902      	bls.n	800b912 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	095b      	lsrs	r3, r3, #5
 800b91c:	693a      	ldr	r2, [r7, #16]
 800b91e:	8912      	ldrh	r2, [r2, #8]
 800b920:	4293      	cmp	r3, r2
 800b922:	d301      	bcc.n	800b928 <dir_sdi+0x5c>
 800b924:	2302      	movs	r3, #2
 800b926:	e048      	b.n	800b9ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	61da      	str	r2, [r3, #28]
 800b930:	e029      	b.n	800b986 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	895b      	ldrh	r3, [r3, #10]
 800b936:	025b      	lsls	r3, r3, #9
 800b938:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b93a:	e019      	b.n	800b970 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6979      	ldr	r1, [r7, #20]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff fd00 	bl	800b346 <get_fat>
 800b946:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94e:	d101      	bne.n	800b954 <dir_sdi+0x88>
 800b950:	2301      	movs	r3, #1
 800b952:	e032      	b.n	800b9ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	2b01      	cmp	r3, #1
 800b958:	d904      	bls.n	800b964 <dir_sdi+0x98>
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	695b      	ldr	r3, [r3, #20]
 800b95e:	697a      	ldr	r2, [r7, #20]
 800b960:	429a      	cmp	r2, r3
 800b962:	d301      	bcc.n	800b968 <dir_sdi+0x9c>
 800b964:	2302      	movs	r3, #2
 800b966:	e028      	b.n	800b9ba <dir_sdi+0xee>
			ofs -= csz;
 800b968:	683a      	ldr	r2, [r7, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	1ad3      	subs	r3, r2, r3
 800b96e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b970:	683a      	ldr	r2, [r7, #0]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d2e1      	bcs.n	800b93c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b978:	6979      	ldr	r1, [r7, #20]
 800b97a:	6938      	ldr	r0, [r7, #16]
 800b97c:	f7ff fcc4 	bl	800b308 <clust2sect>
 800b980:	4602      	mov	r2, r0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <dir_sdi+0xcc>
 800b994:	2302      	movs	r3, #2
 800b996:	e010      	b.n	800b9ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	69da      	ldr	r2, [r3, #28]
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	0a5b      	lsrs	r3, r3, #9
 800b9a0:	441a      	add	r2, r3
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9b2:	441a      	add	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	3320      	adds	r3, #32
 800b9d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d003      	beq.n	800b9ea <dir_next+0x28>
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9e8:	d301      	bcc.n	800b9ee <dir_next+0x2c>
 800b9ea:	2304      	movs	r3, #4
 800b9ec:	e0aa      	b.n	800bb44 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 8098 	bne.w	800bb2a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d10b      	bne.n	800ba24 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	095b      	lsrs	r3, r3, #5
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	8912      	ldrh	r2, [r2, #8]
 800ba14:	4293      	cmp	r3, r2
 800ba16:	f0c0 8088 	bcc.w	800bb2a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	61da      	str	r2, [r3, #28]
 800ba20:	2304      	movs	r3, #4
 800ba22:	e08f      	b.n	800bb44 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	0a5b      	lsrs	r3, r3, #9
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	8952      	ldrh	r2, [r2, #10]
 800ba2c:	3a01      	subs	r2, #1
 800ba2e:	4013      	ands	r3, r2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d17a      	bne.n	800bb2a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7ff fc82 	bl	800b346 <get_fat>
 800ba42:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d801      	bhi.n	800ba4e <dir_next+0x8c>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e07a      	b.n	800bb44 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba54:	d101      	bne.n	800ba5a <dir_next+0x98>
 800ba56:	2301      	movs	r3, #1
 800ba58:	e074      	b.n	800bb44 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	697a      	ldr	r2, [r7, #20]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d358      	bcc.n	800bb16 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d104      	bne.n	800ba74 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	61da      	str	r2, [r3, #28]
 800ba70:	2304      	movs	r3, #4
 800ba72:	e067      	b.n	800bb44 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	4610      	mov	r0, r2
 800ba7e:	f7ff fe59 	bl	800b734 <create_chain>
 800ba82:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d101      	bne.n	800ba8e <dir_next+0xcc>
 800ba8a:	2307      	movs	r3, #7
 800ba8c:	e05a      	b.n	800bb44 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <dir_next+0xd6>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e055      	b.n	800bb44 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9e:	d101      	bne.n	800baa4 <dir_next+0xe2>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e04f      	b.n	800bb44 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f7ff fb4f 	bl	800b148 <sync_window>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d001      	beq.n	800bab4 <dir_next+0xf2>
 800bab0:	2301      	movs	r3, #1
 800bab2:	e047      	b.n	800bb44 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	3330      	adds	r3, #48	; 0x30
 800bab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800babc:	2100      	movs	r1, #0
 800babe:	4618      	mov	r0, r3
 800bac0:	f7ff f979 	bl	800adb6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bac4:	2300      	movs	r3, #0
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	6979      	ldr	r1, [r7, #20]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	f7ff fc1c 	bl	800b308 <clust2sect>
 800bad0:	4602      	mov	r2, r0
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	62da      	str	r2, [r3, #44]	; 0x2c
 800bad6:	e012      	b.n	800bafe <dir_next+0x13c>
						fs->wflag = 1;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2201      	movs	r2, #1
 800badc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bade:	68f8      	ldr	r0, [r7, #12]
 800bae0:	f7ff fb32 	bl	800b148 <sync_window>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <dir_next+0x12c>
 800baea:	2301      	movs	r3, #1
 800baec:	e02a      	b.n	800bb44 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	3301      	adds	r3, #1
 800baf2:	613b      	str	r3, [r7, #16]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	62da      	str	r2, [r3, #44]	; 0x2c
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	895b      	ldrh	r3, [r3, #10]
 800bb02:	461a      	mov	r2, r3
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d3e6      	bcc.n	800bad8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	1ad2      	subs	r2, r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bb1c:	6979      	ldr	r1, [r7, #20]
 800bb1e:	68f8      	ldr	r0, [r7, #12]
 800bb20:	f7ff fbf2 	bl	800b308 <clust2sect>
 800bb24:	4602      	mov	r2, r0
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3c:	441a      	add	r2, r3
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff feb4 	bl	800b8cc <dir_sdi>
 800bb64:	4603      	mov	r3, r0
 800bb66:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d12b      	bne.n	800bbc6 <dir_alloc+0x7a>
		n = 0;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	4619      	mov	r1, r3
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f7ff fb29 	bl	800b1d0 <move_window>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d11d      	bne.n	800bbc4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a1b      	ldr	r3, [r3, #32]
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2be5      	cmp	r3, #229	; 0xe5
 800bb90:	d004      	beq.n	800bb9c <dir_alloc+0x50>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d107      	bne.n	800bbac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	613b      	str	r3, [r7, #16]
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d102      	bne.n	800bbb0 <dir_alloc+0x64>
 800bbaa:	e00c      	b.n	800bbc6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bbac:	2300      	movs	r3, #0
 800bbae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f7ff ff05 	bl	800b9c2 <dir_next>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0d7      	beq.n	800bb72 <dir_alloc+0x26>
 800bbc2:	e000      	b.n	800bbc6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bbc4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	2b04      	cmp	r3, #4
 800bbca:	d101      	bne.n	800bbd0 <dir_alloc+0x84>
 800bbcc:	2307      	movs	r3, #7
 800bbce:	75fb      	strb	r3, [r7, #23]
	return res;
 800bbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	331a      	adds	r3, #26
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7ff f841 	bl	800ac70 <ld_word>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d109      	bne.n	800bc0e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	3314      	adds	r3, #20
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff f836 	bl	800ac70 <ld_word>
 800bc04:	4603      	mov	r3, r0
 800bc06:	041b      	lsls	r3, r3, #16
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	331a      	adds	r3, #26
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	4611      	mov	r1, r2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff f859 	bl	800ace6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b03      	cmp	r3, #3
 800bc3a:	d109      	bne.n	800bc50 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f103 0214 	add.w	r2, r3, #20
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	b29b      	uxth	r3, r3
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4610      	mov	r0, r2
 800bc4c:	f7ff f84b 	bl	800ace6 <st_word>
	}
}
 800bc50:	bf00      	nop
 800bc52:	3710      	adds	r7, #16
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc66:	2100      	movs	r1, #0
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f7ff fe2f 	bl	800b8cc <dir_sdi>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <dir_find+0x24>
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
 800bc7a:	e03e      	b.n	800bcfa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	69db      	ldr	r3, [r3, #28]
 800bc80:	4619      	mov	r1, r3
 800bc82:	6938      	ldr	r0, [r7, #16]
 800bc84:	f7ff faa4 	bl	800b1d0 <move_window>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc8c:	7dfb      	ldrb	r3, [r7, #23]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d12f      	bne.n	800bcf2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6a1b      	ldr	r3, [r3, #32]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bc9a:	7bfb      	ldrb	r3, [r7, #15]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <dir_find+0x4e>
 800bca0:	2304      	movs	r3, #4
 800bca2:	75fb      	strb	r3, [r7, #23]
 800bca4:	e028      	b.n	800bcf8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	330b      	adds	r3, #11
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a1b      	ldr	r3, [r3, #32]
 800bcbc:	330b      	adds	r3, #11
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	f003 0308 	and.w	r3, r3, #8
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10a      	bne.n	800bcde <dir_find+0x86>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6a18      	ldr	r0, [r3, #32]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	3324      	adds	r3, #36	; 0x24
 800bcd0:	220b      	movs	r2, #11
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f7ff f88a 	bl	800adec <mem_cmp>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d00b      	beq.n	800bcf6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bcde:	2100      	movs	r1, #0
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f7ff fe6e 	bl	800b9c2 <dir_next>
 800bce6:	4603      	mov	r3, r0
 800bce8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bcea:	7dfb      	ldrb	r3, [r7, #23]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0c5      	beq.n	800bc7c <dir_find+0x24>
 800bcf0:	e002      	b.n	800bcf8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bcf2:	bf00      	nop
 800bcf4:	e000      	b.n	800bcf8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bcf6:	bf00      	nop

	return res;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bd10:	2101      	movs	r1, #1
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff ff1a 	bl	800bb4c <dir_alloc>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d11c      	bne.n	800bd5c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	4619      	mov	r1, r3
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7ff fa51 	bl	800b1d0 <move_window>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd32:	7bfb      	ldrb	r3, [r7, #15]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d111      	bne.n	800bd5c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	2100      	movs	r1, #0
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff f838 	bl	800adb6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a18      	ldr	r0, [r3, #32]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	3324      	adds	r3, #36	; 0x24
 800bd4e:	220b      	movs	r2, #11
 800bd50:	4619      	mov	r1, r3
 800bd52:	f7ff f80f 	bl	800ad74 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3710      	adds	r7, #16
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
	...

0800bd68 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	3324      	adds	r3, #36	; 0x24
 800bd7c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bd7e:	220b      	movs	r2, #11
 800bd80:	2120      	movs	r1, #32
 800bd82:	68b8      	ldr	r0, [r7, #8]
 800bd84:	f7ff f817 	bl	800adb6 <mem_set>
	si = i = 0; ni = 8;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	61fb      	str	r3, [r7, #28]
 800bd90:	2308      	movs	r3, #8
 800bd92:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	61fa      	str	r2, [r7, #28]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bda2:	7efb      	ldrb	r3, [r7, #27]
 800bda4:	2b20      	cmp	r3, #32
 800bda6:	d94e      	bls.n	800be46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bda8:	7efb      	ldrb	r3, [r7, #27]
 800bdaa:	2b2f      	cmp	r3, #47	; 0x2f
 800bdac:	d006      	beq.n	800bdbc <create_name+0x54>
 800bdae:	7efb      	ldrb	r3, [r7, #27]
 800bdb0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdb2:	d110      	bne.n	800bdd6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bdb4:	e002      	b.n	800bdbc <create_name+0x54>
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	61fb      	str	r3, [r7, #28]
 800bdbc:	68fa      	ldr	r2, [r7, #12]
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b2f      	cmp	r3, #47	; 0x2f
 800bdc6:	d0f6      	beq.n	800bdb6 <create_name+0x4e>
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	4413      	add	r3, r2
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	2b5c      	cmp	r3, #92	; 0x5c
 800bdd2:	d0f0      	beq.n	800bdb6 <create_name+0x4e>
			break;
 800bdd4:	e038      	b.n	800be48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bdd6:	7efb      	ldrb	r3, [r7, #27]
 800bdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdda:	d003      	beq.n	800bde4 <create_name+0x7c>
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d30c      	bcc.n	800bdfe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b0b      	cmp	r3, #11
 800bde8:	d002      	beq.n	800bdf0 <create_name+0x88>
 800bdea:	7efb      	ldrb	r3, [r7, #27]
 800bdec:	2b2e      	cmp	r3, #46	; 0x2e
 800bdee:	d001      	beq.n	800bdf4 <create_name+0x8c>
 800bdf0:	2306      	movs	r3, #6
 800bdf2:	e044      	b.n	800be7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bdf4:	2308      	movs	r3, #8
 800bdf6:	613b      	str	r3, [r7, #16]
 800bdf8:	230b      	movs	r3, #11
 800bdfa:	617b      	str	r3, [r7, #20]
			continue;
 800bdfc:	e022      	b.n	800be44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bdfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800be02:	2b00      	cmp	r3, #0
 800be04:	da04      	bge.n	800be10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800be06:	7efb      	ldrb	r3, [r7, #27]
 800be08:	3b80      	subs	r3, #128	; 0x80
 800be0a:	4a1f      	ldr	r2, [pc, #124]	; (800be88 <create_name+0x120>)
 800be0c:	5cd3      	ldrb	r3, [r2, r3]
 800be0e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800be10:	7efb      	ldrb	r3, [r7, #27]
 800be12:	4619      	mov	r1, r3
 800be14:	481d      	ldr	r0, [pc, #116]	; (800be8c <create_name+0x124>)
 800be16:	f7ff f810 	bl	800ae3a <chk_chr>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <create_name+0xbc>
 800be20:	2306      	movs	r3, #6
 800be22:	e02c      	b.n	800be7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800be24:	7efb      	ldrb	r3, [r7, #27]
 800be26:	2b60      	cmp	r3, #96	; 0x60
 800be28:	d905      	bls.n	800be36 <create_name+0xce>
 800be2a:	7efb      	ldrb	r3, [r7, #27]
 800be2c:	2b7a      	cmp	r3, #122	; 0x7a
 800be2e:	d802      	bhi.n	800be36 <create_name+0xce>
 800be30:	7efb      	ldrb	r3, [r7, #27]
 800be32:	3b20      	subs	r3, #32
 800be34:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1c5a      	adds	r2, r3, #1
 800be3a:	613a      	str	r2, [r7, #16]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	4413      	add	r3, r2
 800be40:	7efa      	ldrb	r2, [r7, #27]
 800be42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800be44:	e7a6      	b.n	800bd94 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800be46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	441a      	add	r2, r3
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d101      	bne.n	800be5c <create_name+0xf4>
 800be58:	2306      	movs	r3, #6
 800be5a:	e010      	b.n	800be7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	781b      	ldrb	r3, [r3, #0]
 800be60:	2be5      	cmp	r3, #229	; 0xe5
 800be62:	d102      	bne.n	800be6a <create_name+0x102>
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2205      	movs	r2, #5
 800be68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800be6a:	7efb      	ldrb	r3, [r7, #27]
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	d801      	bhi.n	800be74 <create_name+0x10c>
 800be70:	2204      	movs	r2, #4
 800be72:	e000      	b.n	800be76 <create_name+0x10e>
 800be74:	2200      	movs	r2, #0
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	330b      	adds	r3, #11
 800be7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800be7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3720      	adds	r7, #32
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	0800dc28 	.word	0x0800dc28
 800be8c:	0800db50 	.word	0x0800db50

0800be90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b086      	sub	sp, #24
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bea4:	e002      	b.n	800beac <follow_path+0x1c>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	3301      	adds	r3, #1
 800beaa:	603b      	str	r3, [r7, #0]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b2f      	cmp	r3, #47	; 0x2f
 800beb2:	d0f8      	beq.n	800bea6 <follow_path+0x16>
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b5c      	cmp	r3, #92	; 0x5c
 800beba:	d0f4      	beq.n	800bea6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	2200      	movs	r2, #0
 800bec0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	2b1f      	cmp	r3, #31
 800bec8:	d80a      	bhi.n	800bee0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2280      	movs	r2, #128	; 0x80
 800bece:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bed2:	2100      	movs	r1, #0
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff fcf9 	bl	800b8cc <dir_sdi>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
 800bede:	e043      	b.n	800bf68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bee0:	463b      	mov	r3, r7
 800bee2:	4619      	mov	r1, r3
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff ff3f 	bl	800bd68 <create_name>
 800beea:	4603      	mov	r3, r0
 800beec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d134      	bne.n	800bf5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f7ff feaf 	bl	800bc58 <dir_find>
 800befa:	4603      	mov	r3, r0
 800befc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bf04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00a      	beq.n	800bf22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	2b04      	cmp	r3, #4
 800bf10:	d127      	bne.n	800bf62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bf12:	7afb      	ldrb	r3, [r7, #11]
 800bf14:	f003 0304 	and.w	r3, r3, #4
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d122      	bne.n	800bf62 <follow_path+0xd2>
 800bf1c:	2305      	movs	r3, #5
 800bf1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bf20:	e01f      	b.n	800bf62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf22:	7afb      	ldrb	r3, [r7, #11]
 800bf24:	f003 0304 	and.w	r3, r3, #4
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d11c      	bne.n	800bf66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	799b      	ldrb	r3, [r3, #6]
 800bf30:	f003 0310 	and.w	r3, r3, #16
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d102      	bne.n	800bf3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bf38:	2305      	movs	r3, #5
 800bf3a:	75fb      	strb	r3, [r7, #23]
 800bf3c:	e014      	b.n	800bf68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf4c:	4413      	add	r3, r2
 800bf4e:	4619      	mov	r1, r3
 800bf50:	68f8      	ldr	r0, [r7, #12]
 800bf52:	f7ff fe42 	bl	800bbda <ld_clust>
 800bf56:	4602      	mov	r2, r0
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bf5c:	e7c0      	b.n	800bee0 <follow_path+0x50>
			if (res != FR_OK) break;
 800bf5e:	bf00      	nop
 800bf60:	e002      	b.n	800bf68 <follow_path+0xd8>
				break;
 800bf62:	bf00      	nop
 800bf64:	e000      	b.n	800bf68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bf66:	bf00      	nop
			}
		}
	}

	return res;
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf72:	b480      	push	{r7}
 800bf74:	b087      	sub	sp, #28
 800bf76:	af00      	add	r7, sp, #0
 800bf78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800bf7a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d031      	beq.n	800bfec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e002      	b.n	800bf96 <get_ldnumber+0x24>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	3301      	adds	r3, #1
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b20      	cmp	r3, #32
 800bf9c:	d903      	bls.n	800bfa6 <get_ldnumber+0x34>
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b3a      	cmp	r3, #58	; 0x3a
 800bfa4:	d1f4      	bne.n	800bf90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	2b3a      	cmp	r3, #58	; 0x3a
 800bfac:	d11c      	bne.n	800bfe8 <get_ldnumber+0x76>
			tp = *path;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	1c5a      	adds	r2, r3, #1
 800bfb8:	60fa      	str	r2, [r7, #12]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	3b30      	subs	r3, #48	; 0x30
 800bfbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	2b09      	cmp	r3, #9
 800bfc4:	d80e      	bhi.n	800bfe4 <get_ldnumber+0x72>
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d10a      	bne.n	800bfe4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d107      	bne.n	800bfe4 <get_ldnumber+0x72>
					vol = (int)i;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	e002      	b.n	800bfee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bfe8:	2300      	movs	r3, #0
 800bfea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bfec:	693b      	ldr	r3, [r7, #16]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	371c      	adds	r7, #28
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	70da      	strb	r2, [r3, #3]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295
 800c012:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff f8da 	bl	800b1d0 <move_window>
 800c01c:	4603      	mov	r3, r0
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d001      	beq.n	800c026 <check_fs+0x2a>
 800c022:	2304      	movs	r3, #4
 800c024:	e038      	b.n	800c098 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3330      	adds	r3, #48	; 0x30
 800c02a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c02e:	4618      	mov	r0, r3
 800c030:	f7fe fe1e 	bl	800ac70 <ld_word>
 800c034:	4603      	mov	r3, r0
 800c036:	461a      	mov	r2, r3
 800c038:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c03c:	429a      	cmp	r2, r3
 800c03e:	d001      	beq.n	800c044 <check_fs+0x48>
 800c040:	2303      	movs	r3, #3
 800c042:	e029      	b.n	800c098 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c04a:	2be9      	cmp	r3, #233	; 0xe9
 800c04c:	d009      	beq.n	800c062 <check_fs+0x66>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c054:	2beb      	cmp	r3, #235	; 0xeb
 800c056:	d11e      	bne.n	800c096 <check_fs+0x9a>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c05e:	2b90      	cmp	r3, #144	; 0x90
 800c060:	d119      	bne.n	800c096 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	3330      	adds	r3, #48	; 0x30
 800c066:	3336      	adds	r3, #54	; 0x36
 800c068:	4618      	mov	r0, r3
 800c06a:	f7fe fe19 	bl	800aca0 <ld_dword>
 800c06e:	4603      	mov	r3, r0
 800c070:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c074:	4a0a      	ldr	r2, [pc, #40]	; (800c0a0 <check_fs+0xa4>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d101      	bne.n	800c07e <check_fs+0x82>
 800c07a:	2300      	movs	r3, #0
 800c07c:	e00c      	b.n	800c098 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3330      	adds	r3, #48	; 0x30
 800c082:	3352      	adds	r3, #82	; 0x52
 800c084:	4618      	mov	r0, r3
 800c086:	f7fe fe0b 	bl	800aca0 <ld_dword>
 800c08a:	4603      	mov	r3, r0
 800c08c:	4a05      	ldr	r2, [pc, #20]	; (800c0a4 <check_fs+0xa8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d101      	bne.n	800c096 <check_fs+0x9a>
 800c092:	2300      	movs	r3, #0
 800c094:	e000      	b.n	800c098 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c096:	2302      	movs	r3, #2
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	00544146 	.word	0x00544146
 800c0a4:	33544146 	.word	0x33544146

0800c0a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b096      	sub	sp, #88	; 0x58
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff ff58 	bl	800bf72 <get_ldnumber>
 800c0c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da01      	bge.n	800c0ce <find_volume+0x26>
 800c0ca:	230b      	movs	r3, #11
 800c0cc:	e22d      	b.n	800c52a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0ce:	4aa1      	ldr	r2, [pc, #644]	; (800c354 <find_volume+0x2ac>)
 800c0d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d101      	bne.n	800c0e2 <find_volume+0x3a>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	e223      	b.n	800c52a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d01a      	beq.n	800c12e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	785b      	ldrb	r3, [r3, #1]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7fe fd19 	bl	800ab34 <disk_status>
 800c102:	4603      	mov	r3, r0
 800c104:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	2b00      	cmp	r3, #0
 800c112:	d10c      	bne.n	800c12e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d007      	beq.n	800c12a <find_volume+0x82>
 800c11a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c11e:	f003 0304 	and.w	r3, r3, #4
 800c122:	2b00      	cmp	r3, #0
 800c124:	d001      	beq.n	800c12a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c126:	230a      	movs	r3, #10
 800c128:	e1ff      	b.n	800c52a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c12a:	2300      	movs	r3, #0
 800c12c:	e1fd      	b.n	800c52a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c136:	b2da      	uxtb	r2, r3
 800c138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c13e:	785b      	ldrb	r3, [r3, #1]
 800c140:	4618      	mov	r0, r3
 800c142:	f7fe fd11 	bl	800ab68 <disk_initialize>
 800c146:	4603      	mov	r3, r0
 800c148:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c14c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d001      	beq.n	800c15c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c158:	2303      	movs	r3, #3
 800c15a:	e1e6      	b.n	800c52a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c15c:	79fb      	ldrb	r3, [r7, #7]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d007      	beq.n	800c172 <find_volume+0xca>
 800c162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c166:	f003 0304 	and.w	r3, r3, #4
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c16e:	230a      	movs	r3, #10
 800c170:	e1db      	b.n	800c52a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c176:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c178:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c17a:	f7ff ff3f 	bl	800bffc <check_fs>
 800c17e:	4603      	mov	r3, r0
 800c180:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d149      	bne.n	800c220 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c18c:	2300      	movs	r3, #0
 800c18e:	643b      	str	r3, [r7, #64]	; 0x40
 800c190:	e01e      	b.n	800c1d0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c194:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c19a:	011b      	lsls	r3, r3, #4
 800c19c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c1a0:	4413      	add	r3, r2
 800c1a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d006      	beq.n	800c1bc <find_volume+0x114>
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fe fd74 	bl	800aca0 <ld_dword>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	e000      	b.n	800c1be <find_volume+0x116>
 800c1bc:	2200      	movs	r2, #0
 800c1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	3358      	adds	r3, #88	; 0x58
 800c1c4:	443b      	add	r3, r7
 800c1c6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c1ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	643b      	str	r3, [r7, #64]	; 0x40
 800c1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d9dd      	bls.n	800c192 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <find_volume+0x13e>
 800c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	3358      	adds	r3, #88	; 0x58
 800c1ec:	443b      	add	r3, r7
 800c1ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c1f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c1f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d005      	beq.n	800c206 <find_volume+0x15e>
 800c1fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c1fe:	f7ff fefd 	bl	800bffc <check_fs>
 800c202:	4603      	mov	r3, r0
 800c204:	e000      	b.n	800c208 <find_volume+0x160>
 800c206:	2303      	movs	r3, #3
 800c208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c210:	2b01      	cmp	r3, #1
 800c212:	d905      	bls.n	800c220 <find_volume+0x178>
 800c214:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c216:	3301      	adds	r3, #1
 800c218:	643b      	str	r3, [r7, #64]	; 0x40
 800c21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d9e2      	bls.n	800c1e6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c224:	2b04      	cmp	r3, #4
 800c226:	d101      	bne.n	800c22c <find_volume+0x184>
 800c228:	2301      	movs	r3, #1
 800c22a:	e17e      	b.n	800c52a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c22c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c230:	2b01      	cmp	r3, #1
 800c232:	d901      	bls.n	800c238 <find_volume+0x190>
 800c234:	230d      	movs	r3, #13
 800c236:	e178      	b.n	800c52a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23a:	3330      	adds	r3, #48	; 0x30
 800c23c:	330b      	adds	r3, #11
 800c23e:	4618      	mov	r0, r3
 800c240:	f7fe fd16 	bl	800ac70 <ld_word>
 800c244:	4603      	mov	r3, r0
 800c246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c24a:	d001      	beq.n	800c250 <find_volume+0x1a8>
 800c24c:	230d      	movs	r3, #13
 800c24e:	e16c      	b.n	800c52a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	3330      	adds	r3, #48	; 0x30
 800c254:	3316      	adds	r3, #22
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fd0a 	bl	800ac70 <ld_word>
 800c25c:	4603      	mov	r3, r0
 800c25e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d106      	bne.n	800c274 <find_volume+0x1cc>
 800c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c268:	3330      	adds	r3, #48	; 0x30
 800c26a:	3324      	adds	r3, #36	; 0x24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fd17 	bl	800aca0 <ld_dword>
 800c272:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c276:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c278:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c27c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c282:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c286:	789b      	ldrb	r3, [r3, #2]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d005      	beq.n	800c298 <find_volume+0x1f0>
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	789b      	ldrb	r3, [r3, #2]
 800c290:	2b02      	cmp	r3, #2
 800c292:	d001      	beq.n	800c298 <find_volume+0x1f0>
 800c294:	230d      	movs	r3, #13
 800c296:	e148      	b.n	800c52a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29a:	789b      	ldrb	r3, [r3, #2]
 800c29c:	461a      	mov	r2, r3
 800c29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b4:	895b      	ldrh	r3, [r3, #10]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d008      	beq.n	800c2cc <find_volume+0x224>
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2bc:	895b      	ldrh	r3, [r3, #10]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c2:	895b      	ldrh	r3, [r3, #10]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d001      	beq.n	800c2d0 <find_volume+0x228>
 800c2cc:	230d      	movs	r3, #13
 800c2ce:	e12c      	b.n	800c52a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d2:	3330      	adds	r3, #48	; 0x30
 800c2d4:	3311      	adds	r3, #17
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fe fcca 	bl	800ac70 <ld_word>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	891b      	ldrh	r3, [r3, #8]
 800c2e8:	f003 030f 	and.w	r3, r3, #15
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <find_volume+0x24e>
 800c2f2:	230d      	movs	r3, #13
 800c2f4:	e119      	b.n	800c52a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f8:	3330      	adds	r3, #48	; 0x30
 800c2fa:	3313      	adds	r3, #19
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe fcb7 	bl	800ac70 <ld_word>
 800c302:	4603      	mov	r3, r0
 800c304:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <find_volume+0x272>
 800c30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30e:	3330      	adds	r3, #48	; 0x30
 800c310:	3320      	adds	r3, #32
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe fcc4 	bl	800aca0 <ld_dword>
 800c318:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31c:	3330      	adds	r3, #48	; 0x30
 800c31e:	330e      	adds	r3, #14
 800c320:	4618      	mov	r0, r3
 800c322:	f7fe fca5 	bl	800ac70 <ld_word>
 800c326:	4603      	mov	r3, r0
 800c328:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c32a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <find_volume+0x28c>
 800c330:	230d      	movs	r3, #13
 800c332:	e0fa      	b.n	800c52a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c334:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c338:	4413      	add	r3, r2
 800c33a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c33c:	8912      	ldrh	r2, [r2, #8]
 800c33e:	0912      	lsrs	r2, r2, #4
 800c340:	b292      	uxth	r2, r2
 800c342:	4413      	add	r3, r2
 800c344:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c346:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d204      	bcs.n	800c358 <find_volume+0x2b0>
 800c34e:	230d      	movs	r3, #13
 800c350:	e0eb      	b.n	800c52a <find_volume+0x482>
 800c352:	bf00      	nop
 800c354:	20001670 	.word	0x20001670
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c360:	8952      	ldrh	r2, [r2, #10]
 800c362:	fbb3 f3f2 	udiv	r3, r3, r2
 800c366:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d101      	bne.n	800c372 <find_volume+0x2ca>
 800c36e:	230d      	movs	r3, #13
 800c370:	e0db      	b.n	800c52a <find_volume+0x482>
		fmt = FS_FAT32;
 800c372:	2303      	movs	r3, #3
 800c374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c37e:	4293      	cmp	r3, r2
 800c380:	d802      	bhi.n	800c388 <find_volume+0x2e0>
 800c382:	2302      	movs	r3, #2
 800c384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c38e:	4293      	cmp	r3, r2
 800c390:	d802      	bhi.n	800c398 <find_volume+0x2f0>
 800c392:	2301      	movs	r3, #1
 800c394:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39a:	1c9a      	adds	r2, r3, #2
 800c39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3a4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c3a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3aa:	441a      	add	r2, r3
 800c3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ae:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	441a      	add	r2, r3
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c3ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d11e      	bne.n	800c400 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c4:	3330      	adds	r3, #48	; 0x30
 800c3c6:	332a      	adds	r3, #42	; 0x2a
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7fe fc51 	bl	800ac70 <ld_word>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <find_volume+0x330>
 800c3d4:	230d      	movs	r3, #13
 800c3d6:	e0a8      	b.n	800c52a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	891b      	ldrh	r3, [r3, #8]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d001      	beq.n	800c3e4 <find_volume+0x33c>
 800c3e0:	230d      	movs	r3, #13
 800c3e2:	e0a2      	b.n	800c52a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e6:	3330      	adds	r3, #48	; 0x30
 800c3e8:	332c      	adds	r3, #44	; 0x2c
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7fe fc58 	bl	800aca0 <ld_dword>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	695b      	ldr	r3, [r3, #20]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	647b      	str	r3, [r7, #68]	; 0x44
 800c3fe:	e01f      	b.n	800c440 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	891b      	ldrh	r3, [r3, #8]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d101      	bne.n	800c40c <find_volume+0x364>
 800c408:	230d      	movs	r3, #13
 800c40a:	e08e      	b.n	800c52a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	6a1a      	ldr	r2, [r3, #32]
 800c410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c412:	441a      	add	r2, r3
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c418:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d103      	bne.n	800c428 <find_volume+0x380>
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	005b      	lsls	r3, r3, #1
 800c426:	e00a      	b.n	800c43e <find_volume+0x396>
 800c428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c42a:	695a      	ldr	r2, [r3, #20]
 800c42c:	4613      	mov	r3, r2
 800c42e:	005b      	lsls	r3, r3, #1
 800c430:	4413      	add	r3, r2
 800c432:	085a      	lsrs	r2, r3, #1
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	695b      	ldr	r3, [r3, #20]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c43e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	699a      	ldr	r2, [r3, #24]
 800c444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c446:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c44a:	0a5b      	lsrs	r3, r3, #9
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d201      	bcs.n	800c454 <find_volume+0x3ac>
 800c450:	230d      	movs	r3, #13
 800c452:	e06a      	b.n	800c52a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c456:	f04f 32ff 	mov.w	r2, #4294967295
 800c45a:	611a      	str	r2, [r3, #16]
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	691a      	ldr	r2, [r3, #16]
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c466:	2280      	movs	r2, #128	; 0x80
 800c468:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c46a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d149      	bne.n	800c506 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c474:	3330      	adds	r3, #48	; 0x30
 800c476:	3330      	adds	r3, #48	; 0x30
 800c478:	4618      	mov	r0, r3
 800c47a:	f7fe fbf9 	bl	800ac70 <ld_word>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b01      	cmp	r3, #1
 800c482:	d140      	bne.n	800c506 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c486:	3301      	adds	r3, #1
 800c488:	4619      	mov	r1, r3
 800c48a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c48c:	f7fe fea0 	bl	800b1d0 <move_window>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d137      	bne.n	800c506 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	2200      	movs	r2, #0
 800c49a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	3330      	adds	r3, #48	; 0x30
 800c4a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7fe fbe3 	bl	800ac70 <ld_word>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d127      	bne.n	800c506 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	3330      	adds	r3, #48	; 0x30
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fbf0 	bl	800aca0 <ld_dword>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	4a1c      	ldr	r2, [pc, #112]	; (800c534 <find_volume+0x48c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d11e      	bne.n	800c506 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ca:	3330      	adds	r3, #48	; 0x30
 800c4cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fbe5 	bl	800aca0 <ld_dword>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	4a17      	ldr	r2, [pc, #92]	; (800c538 <find_volume+0x490>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d113      	bne.n	800c506 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4e0:	3330      	adds	r3, #48	; 0x30
 800c4e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fbda 	bl	800aca0 <ld_dword>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f4:	3330      	adds	r3, #48	; 0x30
 800c4f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe fbd0 	bl	800aca0 <ld_dword>
 800c500:	4602      	mov	r2, r0
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c50c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c50e:	4b0b      	ldr	r3, [pc, #44]	; (800c53c <find_volume+0x494>)
 800c510:	881b      	ldrh	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	b29a      	uxth	r2, r3
 800c516:	4b09      	ldr	r3, [pc, #36]	; (800c53c <find_volume+0x494>)
 800c518:	801a      	strh	r2, [r3, #0]
 800c51a:	4b08      	ldr	r3, [pc, #32]	; (800c53c <find_volume+0x494>)
 800c51c:	881a      	ldrh	r2, [r3, #0]
 800c51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c520:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c522:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c524:	f7fe fdec 	bl	800b100 <clear_lock>
#endif
	return FR_OK;
 800c528:	2300      	movs	r3, #0
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3758      	adds	r7, #88	; 0x58
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	41615252 	.word	0x41615252
 800c538:	61417272 	.word	0x61417272
 800c53c:	20001674 	.word	0x20001674

0800c540 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c54a:	2309      	movs	r3, #9
 800c54c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d01c      	beq.n	800c58e <validate+0x4e>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d018      	beq.n	800c58e <validate+0x4e>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d013      	beq.n	800c58e <validate+0x4e>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	889a      	ldrh	r2, [r3, #4]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	88db      	ldrh	r3, [r3, #6]
 800c570:	429a      	cmp	r2, r3
 800c572:	d10c      	bne.n	800c58e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	4618      	mov	r0, r3
 800c57c:	f7fe fada 	bl	800ab34 <disk_status>
 800c580:	4603      	mov	r3, r0
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	d101      	bne.n	800c58e <validate+0x4e>
			res = FR_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <validate+0x5a>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	e000      	b.n	800c59c <validate+0x5c>
 800c59a:	2300      	movs	r3, #0
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	6013      	str	r3, [r2, #0]
	return res;
 800c5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3710      	adds	r7, #16
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b088      	sub	sp, #32
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	4613      	mov	r3, r2
 800c5b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c5be:	f107 0310 	add.w	r3, r7, #16
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7ff fcd5 	bl	800bf72 <get_ldnumber>
 800c5c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	da01      	bge.n	800c5d4 <f_mount+0x28>
 800c5d0:	230b      	movs	r3, #11
 800c5d2:	e02b      	b.n	800c62c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c5d4:	4a17      	ldr	r2, [pc, #92]	; (800c634 <f_mount+0x88>)
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d005      	beq.n	800c5f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c5e4:	69b8      	ldr	r0, [r7, #24]
 800c5e6:	f7fe fd8b 	bl	800b100 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	490d      	ldr	r1, [pc, #52]	; (800c634 <f_mount+0x88>)
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <f_mount+0x66>
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	d001      	beq.n	800c616 <f_mount+0x6a>
 800c612:	2300      	movs	r3, #0
 800c614:	e00a      	b.n	800c62c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c616:	f107 010c 	add.w	r1, r7, #12
 800c61a:	f107 0308 	add.w	r3, r7, #8
 800c61e:	2200      	movs	r2, #0
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff fd41 	bl	800c0a8 <find_volume>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c62a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3720      	adds	r7, #32
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20001670 	.word	0x20001670

0800c638 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b098      	sub	sp, #96	; 0x60
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	60f8      	str	r0, [r7, #12]
 800c640:	60b9      	str	r1, [r7, #8]
 800c642:	4613      	mov	r3, r2
 800c644:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <f_open+0x18>
 800c64c:	2309      	movs	r3, #9
 800c64e:	e1ad      	b.n	800c9ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c656:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c658:	79fa      	ldrb	r2, [r7, #7]
 800c65a:	f107 0110 	add.w	r1, r7, #16
 800c65e:	f107 0308 	add.w	r3, r7, #8
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff fd20 	bl	800c0a8 <find_volume>
 800c668:	4603      	mov	r3, r0
 800c66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c66e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c672:	2b00      	cmp	r3, #0
 800c674:	f040 8191 	bne.w	800c99a <f_open+0x362>
		dj.obj.fs = fs;
 800c678:	693b      	ldr	r3, [r7, #16]
 800c67a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	4611      	mov	r1, r2
 800c684:	4618      	mov	r0, r3
 800c686:	f7ff fc03 	bl	800be90 <follow_path>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c694:	2b00      	cmp	r3, #0
 800c696:	d11a      	bne.n	800c6ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c698:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c69c:	b25b      	sxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	da03      	bge.n	800c6aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800c6a2:	2306      	movs	r3, #6
 800c6a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6a8:	e011      	b.n	800c6ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6aa:	79fb      	ldrb	r3, [r7, #7]
 800c6ac:	f023 0301 	bic.w	r3, r3, #1
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	bf14      	ite	ne
 800c6b4:	2301      	movne	r3, #1
 800c6b6:	2300      	moveq	r3, #0
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f107 0314 	add.w	r3, r7, #20
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fe fbd4 	bl	800ae70 <chk_lock>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c6ce:	79fb      	ldrb	r3, [r7, #7]
 800c6d0:	f003 031c 	and.w	r3, r3, #28
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d07f      	beq.n	800c7d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d017      	beq.n	800c710 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c6e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6e4:	2b04      	cmp	r3, #4
 800c6e6:	d10e      	bne.n	800c706 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c6e8:	f7fe fc1e 	bl	800af28 <enq_lock>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d006      	beq.n	800c700 <f_open+0xc8>
 800c6f2:	f107 0314 	add.w	r3, r7, #20
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f7ff fb03 	bl	800bd02 <dir_register>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	e000      	b.n	800c702 <f_open+0xca>
 800c700:	2312      	movs	r3, #18
 800c702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	f043 0308 	orr.w	r3, r3, #8
 800c70c:	71fb      	strb	r3, [r7, #7]
 800c70e:	e010      	b.n	800c732 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c710:	7ebb      	ldrb	r3, [r7, #26]
 800c712:	f003 0311 	and.w	r3, r3, #17
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <f_open+0xea>
					res = FR_DENIED;
 800c71a:	2307      	movs	r3, #7
 800c71c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c720:	e007      	b.n	800c732 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c722:	79fb      	ldrb	r3, [r7, #7]
 800c724:	f003 0304 	and.w	r3, r3, #4
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d002      	beq.n	800c732 <f_open+0xfa>
 800c72c:	2308      	movs	r3, #8
 800c72e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c732:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c736:	2b00      	cmp	r3, #0
 800c738:	d168      	bne.n	800c80c <f_open+0x1d4>
 800c73a:	79fb      	ldrb	r3, [r7, #7]
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b00      	cmp	r3, #0
 800c742:	d063      	beq.n	800c80c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c744:	f7fb f8e6 	bl	8007914 <get_fattime>
 800c748:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74c:	330e      	adds	r3, #14
 800c74e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c750:	4618      	mov	r0, r3
 800c752:	f7fe fae3 	bl	800ad1c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c758:	3316      	adds	r3, #22
 800c75a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7fe fadd 	bl	800ad1c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	330b      	adds	r3, #11
 800c766:	2220      	movs	r2, #32
 800c768:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fa32 	bl	800bbda <ld_clust>
 800c776:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c77c:	2200      	movs	r2, #0
 800c77e:	4618      	mov	r0, r3
 800c780:	f7ff fa4a 	bl	800bc18 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c786:	331c      	adds	r3, #28
 800c788:	2100      	movs	r1, #0
 800c78a:	4618      	mov	r0, r3
 800c78c:	f7fe fac6 	bl	800ad1c <st_dword>
					fs->wflag = 1;
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	2201      	movs	r2, #1
 800c794:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d037      	beq.n	800c80c <f_open+0x1d4>
						dw = fs->winsect;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c7a2:	f107 0314 	add.w	r3, r7, #20
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe ff5d 	bl	800b66a <remove_chain>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d126      	bne.n	800c80c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fd04 	bl	800b1d0 <move_window>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7d2:	3a01      	subs	r2, #1
 800c7d4:	60da      	str	r2, [r3, #12]
 800c7d6:	e019      	b.n	800c80c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c7d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d115      	bne.n	800c80c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c7e0:	7ebb      	ldrb	r3, [r7, #26]
 800c7e2:	f003 0310 	and.w	r3, r3, #16
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d003      	beq.n	800c7f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c7ea:	2304      	movs	r3, #4
 800c7ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7f0:	e00c      	b.n	800c80c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c7f2:	79fb      	ldrb	r3, [r7, #7]
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d007      	beq.n	800c80c <f_open+0x1d4>
 800c7fc:	7ebb      	ldrb	r3, [r7, #26]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b00      	cmp	r3, #0
 800c804:	d002      	beq.n	800c80c <f_open+0x1d4>
						res = FR_DENIED;
 800c806:	2307      	movs	r3, #7
 800c808:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c810:	2b00      	cmp	r3, #0
 800c812:	d128      	bne.n	800c866 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c814:	79fb      	ldrb	r3, [r7, #7]
 800c816:	f003 0308 	and.w	r3, r3, #8
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d003      	beq.n	800c826 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c824:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c82e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bf14      	ite	ne
 800c83e:	2301      	movne	r3, #1
 800c840:	2300      	moveq	r3, #0
 800c842:	b2db      	uxtb	r3, r3
 800c844:	461a      	mov	r2, r3
 800c846:	f107 0314 	add.w	r3, r7, #20
 800c84a:	4611      	mov	r1, r2
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe fb8d 	bl	800af6c <inc_lock>
 800c852:	4602      	mov	r2, r0
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <f_open+0x22e>
 800c860:	2302      	movs	r3, #2
 800c862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f040 8095 	bne.w	800c99a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c874:	4611      	mov	r1, r2
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff f9af 	bl	800bbda <ld_clust>
 800c87c:	4602      	mov	r2, r0
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	331c      	adds	r3, #28
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fa0a 	bl	800aca0 <ld_dword>
 800c88c:	4602      	mov	r2, r0
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c898:	693a      	ldr	r2, [r7, #16]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	88da      	ldrh	r2, [r3, #6]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	79fa      	ldrb	r2, [r7, #7]
 800c8aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	3330      	adds	r3, #48	; 0x30
 800c8c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c8c6:	2100      	movs	r1, #0
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fe fa74 	bl	800adb6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c8ce:	79fb      	ldrb	r3, [r7, #7]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d060      	beq.n	800c99a <f_open+0x362>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d05c      	beq.n	800c99a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	895b      	ldrh	r3, [r3, #10]
 800c8ec:	025b      	lsls	r3, r3, #9
 800c8ee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800c8fc:	e016      	b.n	800c92c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c902:	4618      	mov	r0, r3
 800c904:	f7fe fd1f 	bl	800b346 <get_fat>
 800c908:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c90a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d802      	bhi.n	800c916 <f_open+0x2de>
 800c910:	2302      	movs	r3, #2
 800c912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d102      	bne.n	800c924 <f_open+0x2ec>
 800c91e:	2301      	movs	r3, #1
 800c920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	657b      	str	r3, [r7, #84]	; 0x54
 800c92c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c930:	2b00      	cmp	r3, #0
 800c932:	d103      	bne.n	800c93c <f_open+0x304>
 800c934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c938:	429a      	cmp	r2, r3
 800c93a:	d8e0      	bhi.n	800c8fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c940:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c942:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c946:	2b00      	cmp	r3, #0
 800c948:	d127      	bne.n	800c99a <f_open+0x362>
 800c94a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c950:	2b00      	cmp	r3, #0
 800c952:	d022      	beq.n	800c99a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c958:	4618      	mov	r0, r3
 800c95a:	f7fe fcd5 	bl	800b308 <clust2sect>
 800c95e:	6478      	str	r0, [r7, #68]	; 0x44
 800c960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c962:	2b00      	cmp	r3, #0
 800c964:	d103      	bne.n	800c96e <f_open+0x336>
						res = FR_INT_ERR;
 800c966:	2302      	movs	r3, #2
 800c968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c96c:	e015      	b.n	800c99a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c96e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c970:	0a5a      	lsrs	r2, r3, #9
 800c972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c974:	441a      	add	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	7858      	ldrb	r0, [r3, #1]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6a1a      	ldr	r2, [r3, #32]
 800c988:	2301      	movs	r3, #1
 800c98a:	f7fe f913 	bl	800abb4 <disk_read>
 800c98e:	4603      	mov	r3, r0
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <f_open+0x362>
 800c994:	2301      	movs	r3, #1
 800c996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c99a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d002      	beq.n	800c9a8 <f_open+0x370>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c9a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3760      	adds	r7, #96	; 0x60
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08e      	sub	sp, #56	; 0x38
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f107 0214 	add.w	r2, r7, #20
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7ff fdb3 	bl	800c540 <validate>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c9e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d107      	bne.n	800c9f8 <f_read+0x44>
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	7d5b      	ldrb	r3, [r3, #21]
 800c9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <f_read+0x4a>
 800c9f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9fc:	e115      	b.n	800cc2a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	7d1b      	ldrb	r3, [r3, #20]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <f_read+0x5a>
 800ca0a:	2307      	movs	r3, #7
 800ca0c:	e10d      	b.n	800cc2a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68da      	ldr	r2, [r3, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	f240 80fe 	bls.w	800cc20 <f_read+0x26c>
 800ca24:	6a3b      	ldr	r3, [r7, #32]
 800ca26:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ca28:	e0fa      	b.n	800cc20 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	699b      	ldr	r3, [r3, #24]
 800ca2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f040 80c6 	bne.w	800cbc4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	699b      	ldr	r3, [r3, #24]
 800ca3c:	0a5b      	lsrs	r3, r3, #9
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	8952      	ldrh	r2, [r2, #10]
 800ca42:	3a01      	subs	r2, #1
 800ca44:	4013      	ands	r3, r2
 800ca46:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ca48:	69fb      	ldr	r3, [r7, #28]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d12f      	bne.n	800caae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	699b      	ldr	r3, [r3, #24]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d103      	bne.n	800ca5e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	633b      	str	r3, [r7, #48]	; 0x30
 800ca5c:	e013      	b.n	800ca86 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f7fe fef9 	bl	800b864 <clmt_clust>
 800ca72:	6338      	str	r0, [r7, #48]	; 0x30
 800ca74:	e007      	b.n	800ca86 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f7fe fc61 	bl	800b346 <get_fat>
 800ca84:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ca86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d804      	bhi.n	800ca96 <f_read+0xe2>
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	755a      	strb	r2, [r3, #21]
 800ca92:	2302      	movs	r3, #2
 800ca94:	e0c9      	b.n	800cc2a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ca96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca9c:	d104      	bne.n	800caa8 <f_read+0xf4>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2201      	movs	r2, #1
 800caa2:	755a      	strb	r2, [r3, #21]
 800caa4:	2301      	movs	r3, #1
 800caa6:	e0c0      	b.n	800cc2a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	69db      	ldr	r3, [r3, #28]
 800cab4:	4619      	mov	r1, r3
 800cab6:	4610      	mov	r0, r2
 800cab8:	f7fe fc26 	bl	800b308 <clust2sect>
 800cabc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d104      	bne.n	800cace <f_read+0x11a>
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2202      	movs	r2, #2
 800cac8:	755a      	strb	r2, [r3, #21]
 800caca:	2302      	movs	r3, #2
 800cacc:	e0ad      	b.n	800cc2a <f_read+0x276>
			sect += csect;
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	4413      	add	r3, r2
 800cad4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	0a5b      	lsrs	r3, r3, #9
 800cada:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d039      	beq.n	800cb56 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cae2:	69fa      	ldr	r2, [r7, #28]
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	4413      	add	r3, r2
 800cae8:	697a      	ldr	r2, [r7, #20]
 800caea:	8952      	ldrh	r2, [r2, #10]
 800caec:	4293      	cmp	r3, r2
 800caee:	d905      	bls.n	800cafc <f_read+0x148>
					cc = fs->csize - csect;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	895b      	ldrh	r3, [r3, #10]
 800caf4:	461a      	mov	r2, r3
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	7858      	ldrb	r0, [r3, #1]
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb06:	f7fe f855 	bl	800abb4 <disk_read>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d004      	beq.n	800cb1a <f_read+0x166>
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2201      	movs	r2, #1
 800cb14:	755a      	strb	r2, [r3, #21]
 800cb16:	2301      	movs	r3, #1
 800cb18:	e087      	b.n	800cc2a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	7d1b      	ldrb	r3, [r3, #20]
 800cb1e:	b25b      	sxtb	r3, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da14      	bge.n	800cb4e <f_read+0x19a>
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6a1a      	ldr	r2, [r3, #32]
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	1ad3      	subs	r3, r2, r3
 800cb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb2e:	429a      	cmp	r2, r3
 800cb30:	d90d      	bls.n	800cb4e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6a1a      	ldr	r2, [r3, #32]
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	1ad3      	subs	r3, r2, r3
 800cb3a:	025b      	lsls	r3, r3, #9
 800cb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb3e:	18d0      	adds	r0, r2, r3
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	3330      	adds	r3, #48	; 0x30
 800cb44:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f7fe f913 	bl	800ad74 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	025b      	lsls	r3, r3, #9
 800cb52:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cb54:	e050      	b.n	800cbf8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d02e      	beq.n	800cbbe <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	7d1b      	ldrb	r3, [r3, #20]
 800cb64:	b25b      	sxtb	r3, r3
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	da18      	bge.n	800cb9c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	7858      	ldrb	r0, [r3, #1]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6a1a      	ldr	r2, [r3, #32]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	f7fe f83b 	bl	800abf4 <disk_write>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d004      	beq.n	800cb8e <f_read+0x1da>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2201      	movs	r2, #1
 800cb88:	755a      	strb	r2, [r3, #21]
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e04d      	b.n	800cc2a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	7d1b      	ldrb	r3, [r3, #20]
 800cb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb96:	b2da      	uxtb	r2, r3
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	7858      	ldrb	r0, [r3, #1]
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cba6:	2301      	movs	r3, #1
 800cba8:	69ba      	ldr	r2, [r7, #24]
 800cbaa:	f7fe f803 	bl	800abb4 <disk_read>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <f_read+0x20a>
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	755a      	strb	r2, [r3, #21]
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e035      	b.n	800cc2a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	699b      	ldr	r3, [r3, #24]
 800cbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbcc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cbd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d901      	bls.n	800cbde <f_read+0x22a>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	699b      	ldr	r3, [r3, #24]
 800cbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbec:	4413      	add	r3, r2
 800cbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbf4:	f7fe f8be 	bl	800ad74 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cbf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	4413      	add	r3, r2
 800cbfe:	627b      	str	r3, [r7, #36]	; 0x24
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	699a      	ldr	r2, [r3, #24]
 800cc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc06:	441a      	add	r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	619a      	str	r2, [r3, #24]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	441a      	add	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	601a      	str	r2, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	f47f af01 	bne.w	800ca2a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3738      	adds	r7, #56	; 0x38
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b086      	sub	sp, #24
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f107 0208 	add.w	r2, r7, #8
 800cc40:	4611      	mov	r1, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fc7c 	bl	800c540 <validate>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d168      	bne.n	800cd24 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	7d1b      	ldrb	r3, [r3, #20]
 800cc56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d062      	beq.n	800cd24 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	7d1b      	ldrb	r3, [r3, #20]
 800cc62:	b25b      	sxtb	r3, r3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	da15      	bge.n	800cc94 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	7858      	ldrb	r0, [r3, #1]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a1a      	ldr	r2, [r3, #32]
 800cc76:	2301      	movs	r3, #1
 800cc78:	f7fd ffbc 	bl	800abf4 <disk_write>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <f_sync+0x54>
 800cc82:	2301      	movs	r3, #1
 800cc84:	e04f      	b.n	800cd26 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7d1b      	ldrb	r3, [r3, #20]
 800cc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cc94:	f7fa fe3e 	bl	8007914 <get_fattime>
 800cc98:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca0:	4619      	mov	r1, r3
 800cca2:	4610      	mov	r0, r2
 800cca4:	f7fe fa94 	bl	800b1d0 <move_window>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d138      	bne.n	800cd24 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	330b      	adds	r3, #11
 800ccbc:	781a      	ldrb	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	330b      	adds	r3, #11
 800ccc2:	f042 0220 	orr.w	r2, r2, #32
 800ccc6:	b2d2      	uxtb	r2, r2
 800ccc8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6818      	ldr	r0, [r3, #0]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	68f9      	ldr	r1, [r7, #12]
 800ccd6:	f7fe ff9f 	bl	800bc18 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f103 021c 	add.w	r2, r3, #28
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	4619      	mov	r1, r3
 800cce6:	4610      	mov	r0, r2
 800cce8:	f7fe f818 	bl	800ad1c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	3316      	adds	r3, #22
 800ccf0:	6939      	ldr	r1, [r7, #16]
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7fe f812 	bl	800ad1c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	3312      	adds	r3, #18
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7fd fff1 	bl	800ace6 <st_word>
					fs->wflag = 1;
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	2201      	movs	r2, #1
 800cd08:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fe fa8d 	bl	800b22c <sync_fs>
 800cd12:	4603      	mov	r3, r0
 800cd14:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	7d1b      	ldrb	r3, [r3, #20]
 800cd1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cd24:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3718      	adds	r7, #24
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cd2e:	b580      	push	{r7, lr}
 800cd30:	b084      	sub	sp, #16
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ff7b 	bl	800cc32 <f_sync>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cd40:	7bfb      	ldrb	r3, [r7, #15]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d118      	bne.n	800cd78 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f107 0208 	add.w	r2, r7, #8
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7ff fbf6 	bl	800c540 <validate>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10c      	bne.n	800cd78 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	691b      	ldr	r3, [r3, #16]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fe f990 	bl	800b088 <dec_lock>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cd6c:	7bfb      	ldrb	r3, [r7, #15]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d102      	bne.n	800cd78 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3710      	adds	r7, #16
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b090      	sub	sp, #64	; 0x40
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
 800cd8a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f107 0208 	add.w	r2, r7, #8
 800cd92:	4611      	mov	r1, r2
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff fbd3 	bl	800c540 <validate>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cda0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d103      	bne.n	800cdb0 <f_lseek+0x2e>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	7d5b      	ldrb	r3, [r3, #21]
 800cdac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cdb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <f_lseek+0x3c>
 800cdb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdbc:	e1e6      	b.n	800d18c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	f000 80d1 	beq.w	800cf6a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdce:	d15a      	bne.n	800ce86 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	1d1a      	adds	r2, r3, #4
 800cdda:	627a      	str	r2, [r7, #36]	; 0x24
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	617b      	str	r3, [r7, #20]
 800cde0:	2302      	movs	r3, #2
 800cde2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d03a      	beq.n	800ce66 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf2:	613b      	str	r3, [r7, #16]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	3302      	adds	r3, #2
 800cdfc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	3301      	adds	r3, #1
 800ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fa9a 	bl	800b346 <get_fat>
 800ce12:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ce14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d804      	bhi.n	800ce24 <f_lseek+0xa2>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2202      	movs	r2, #2
 800ce1e:	755a      	strb	r2, [r3, #21]
 800ce20:	2302      	movs	r3, #2
 800ce22:	e1b3      	b.n	800d18c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce2a:	d104      	bne.n	800ce36 <f_lseek+0xb4>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2201      	movs	r2, #1
 800ce30:	755a      	strb	r2, [r3, #21]
 800ce32:	2301      	movs	r3, #1
 800ce34:	e1aa      	b.n	800d18c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d0de      	beq.n	800cdfe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ce40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d809      	bhi.n	800ce5c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ce48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4a:	1d1a      	adds	r2, r3, #4
 800ce4c:	627a      	str	r2, [r7, #36]	; 0x24
 800ce4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce54:	1d1a      	adds	r2, r3, #4
 800ce56:	627a      	str	r2, [r7, #36]	; 0x24
 800ce58:	693a      	ldr	r2, [r7, #16]
 800ce5a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	695b      	ldr	r3, [r3, #20]
 800ce60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d3c4      	bcc.n	800cdf0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce6c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ce6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d803      	bhi.n	800ce7e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	2200      	movs	r2, #0
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	e184      	b.n	800d188 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ce7e:	2311      	movs	r3, #17
 800ce80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce84:	e180      	b.n	800d188 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	68db      	ldr	r3, [r3, #12]
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d902      	bls.n	800ce96 <f_lseek+0x114>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f000 8172 	beq.w	800d188 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f7fe fcda 	bl	800b864 <clmt_clust>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	4619      	mov	r1, r3
 800cebe:	4610      	mov	r0, r2
 800cec0:	f7fe fa22 	bl	800b308 <clust2sect>
 800cec4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d104      	bne.n	800ced6 <f_lseek+0x154>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2202      	movs	r2, #2
 800ced0:	755a      	strb	r2, [r3, #21]
 800ced2:	2302      	movs	r3, #2
 800ced4:	e15a      	b.n	800d18c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	0a5b      	lsrs	r3, r3, #9
 800cedc:	68ba      	ldr	r2, [r7, #8]
 800cede:	8952      	ldrh	r2, [r2, #10]
 800cee0:	3a01      	subs	r2, #1
 800cee2:	4013      	ands	r3, r2
 800cee4:	69ba      	ldr	r2, [r7, #24]
 800cee6:	4413      	add	r3, r2
 800cee8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	699b      	ldr	r3, [r3, #24]
 800ceee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 8148 	beq.w	800d188 <f_lseek+0x406>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6a1b      	ldr	r3, [r3, #32]
 800cefc:	69ba      	ldr	r2, [r7, #24]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	f000 8142 	beq.w	800d188 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	7d1b      	ldrb	r3, [r3, #20]
 800cf08:	b25b      	sxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	da18      	bge.n	800cf40 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	7858      	ldrb	r0, [r3, #1]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1a      	ldr	r2, [r3, #32]
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	f7fd fe69 	bl	800abf4 <disk_write>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d004      	beq.n	800cf32 <f_lseek+0x1b0>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	755a      	strb	r2, [r3, #21]
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e12c      	b.n	800d18c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	7d1b      	ldrb	r3, [r3, #20]
 800cf36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	7858      	ldrb	r0, [r3, #1]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	69ba      	ldr	r2, [r7, #24]
 800cf4e:	f7fd fe31 	bl	800abb4 <disk_read>
 800cf52:	4603      	mov	r3, r0
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <f_lseek+0x1e0>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	755a      	strb	r2, [r3, #21]
 800cf5e:	2301      	movs	r3, #1
 800cf60:	e114      	b.n	800d18c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	69ba      	ldr	r2, [r7, #24]
 800cf66:	621a      	str	r2, [r3, #32]
 800cf68:	e10e      	b.n	800d188 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	68db      	ldr	r3, [r3, #12]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d908      	bls.n	800cf86 <f_lseek+0x204>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	7d1b      	ldrb	r3, [r3, #20]
 800cf78:	f003 0302 	and.w	r3, r3, #2
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	699b      	ldr	r3, [r3, #24]
 800cf8a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf94:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	f000 80a7 	beq.w	800d0ec <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	895b      	ldrh	r3, [r3, #10]
 800cfa2:	025b      	lsls	r3, r3, #9
 800cfa4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cfa6:	6a3b      	ldr	r3, [r7, #32]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d01b      	beq.n	800cfe4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	1e5a      	subs	r2, r3, #1
 800cfb0:	69fb      	ldr	r3, [r7, #28]
 800cfb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	1e59      	subs	r1, r3, #1
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d30f      	bcc.n	800cfe4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	1e5a      	subs	r2, r3, #1
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	425b      	negs	r3, r3
 800cfcc:	401a      	ands	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	699b      	ldr	r3, [r3, #24]
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	1ad3      	subs	r3, r2, r3
 800cfda:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cfe2:	e022      	b.n	800d02a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cfea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d119      	bne.n	800d024 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe fb9d 	bl	800b734 <create_chain>
 800cffa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d104      	bne.n	800d00c <f_lseek+0x28a>
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2202      	movs	r2, #2
 800d006:	755a      	strb	r2, [r3, #21]
 800d008:	2302      	movs	r3, #2
 800d00a:	e0bf      	b.n	800d18c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d012:	d104      	bne.n	800d01e <f_lseek+0x29c>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	755a      	strb	r2, [r3, #21]
 800d01a:	2301      	movs	r3, #1
 800d01c:	e0b6      	b.n	800d18c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d022:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d028:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d05d      	beq.n	800d0ec <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d030:	e03a      	b.n	800d0a8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d032:	683a      	ldr	r2, [r7, #0]
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	603b      	str	r3, [r7, #0]
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699a      	ldr	r2, [r3, #24]
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	441a      	add	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7d1b      	ldrb	r3, [r3, #20]
 800d04a:	f003 0302 	and.w	r3, r3, #2
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d00b      	beq.n	800d06a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe fb6c 	bl	800b734 <create_chain>
 800d05c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	2b00      	cmp	r3, #0
 800d062:	d108      	bne.n	800d076 <f_lseek+0x2f4>
							ofs = 0; break;
 800d064:	2300      	movs	r3, #0
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	e022      	b.n	800d0b0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fe f969 	bl	800b346 <get_fat>
 800d074:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07c:	d104      	bne.n	800d088 <f_lseek+0x306>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	755a      	strb	r2, [r3, #21]
 800d084:	2301      	movs	r3, #1
 800d086:	e081      	b.n	800d18c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d904      	bls.n	800d098 <f_lseek+0x316>
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d094:	429a      	cmp	r2, r3
 800d096:	d304      	bcc.n	800d0a2 <f_lseek+0x320>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2202      	movs	r2, #2
 800d09c:	755a      	strb	r2, [r3, #21]
 800d09e:	2302      	movs	r3, #2
 800d0a0:	e074      	b.n	800d18c <f_lseek+0x40a>
					fp->clust = clst;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0a6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d8c0      	bhi.n	800d032 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	699a      	ldr	r2, [r3, #24]
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	441a      	add	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d012      	beq.n	800d0ec <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d0c6:	68bb      	ldr	r3, [r7, #8]
 800d0c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7fe f91c 	bl	800b308 <clust2sect>
 800d0d0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d0d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d104      	bne.n	800d0e2 <f_lseek+0x360>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2202      	movs	r2, #2
 800d0dc:	755a      	strb	r2, [r3, #21]
 800d0de:	2302      	movs	r3, #2
 800d0e0:	e054      	b.n	800d18c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	0a5b      	lsrs	r3, r3, #9
 800d0e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0e8:	4413      	add	r3, r2
 800d0ea:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	699a      	ldr	r2, [r3, #24]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d90a      	bls.n	800d10e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	699a      	ldr	r2, [r3, #24]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	7d1b      	ldrb	r3, [r3, #20]
 800d104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	699b      	ldr	r3, [r3, #24]
 800d112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d116:	2b00      	cmp	r3, #0
 800d118:	d036      	beq.n	800d188 <f_lseek+0x406>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6a1b      	ldr	r3, [r3, #32]
 800d11e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d120:	429a      	cmp	r2, r3
 800d122:	d031      	beq.n	800d188 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	7d1b      	ldrb	r3, [r3, #20]
 800d128:	b25b      	sxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	da18      	bge.n	800d160 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	7858      	ldrb	r0, [r3, #1]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6a1a      	ldr	r2, [r3, #32]
 800d13c:	2301      	movs	r3, #1
 800d13e:	f7fd fd59 	bl	800abf4 <disk_write>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d004      	beq.n	800d152 <f_lseek+0x3d0>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2201      	movs	r2, #1
 800d14c:	755a      	strb	r2, [r3, #21]
 800d14e:	2301      	movs	r3, #1
 800d150:	e01c      	b.n	800d18c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	7d1b      	ldrb	r3, [r3, #20]
 800d156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	7858      	ldrb	r0, [r3, #1]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d16a:	2301      	movs	r3, #1
 800d16c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d16e:	f7fd fd21 	bl	800abb4 <disk_read>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <f_lseek+0x400>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	755a      	strb	r2, [r3, #21]
 800d17e:	2301      	movs	r3, #1
 800d180:	e004      	b.n	800d18c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d186:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d188:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3740      	adds	r7, #64	; 0x40
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d194:	b480      	push	{r7}
 800d196:	b087      	sub	sp, #28
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	4613      	mov	r3, r2
 800d1a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d1aa:	4b1f      	ldr	r3, [pc, #124]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1ac:	7a5b      	ldrb	r3, [r3, #9]
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d131      	bne.n	800d218 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d1b4:	4b1c      	ldr	r3, [pc, #112]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1b6:	7a5b      	ldrb	r3, [r3, #9]
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	4b1a      	ldr	r3, [pc, #104]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1be:	2100      	movs	r1, #0
 800d1c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d1c2:	4b19      	ldr	r3, [pc, #100]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1c4:	7a5b      	ldrb	r3, [r3, #9]
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	4a17      	ldr	r2, [pc, #92]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1ca:	009b      	lsls	r3, r3, #2
 800d1cc:	4413      	add	r3, r2
 800d1ce:	68fa      	ldr	r2, [r7, #12]
 800d1d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d1d2:	4b15      	ldr	r3, [pc, #84]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1d4:	7a5b      	ldrb	r3, [r3, #9]
 800d1d6:	b2db      	uxtb	r3, r3
 800d1d8:	461a      	mov	r2, r3
 800d1da:	4b13      	ldr	r3, [pc, #76]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1dc:	4413      	add	r3, r2
 800d1de:	79fa      	ldrb	r2, [r7, #7]
 800d1e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d1e2:	4b11      	ldr	r3, [pc, #68]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1e4:	7a5b      	ldrb	r3, [r3, #9]
 800d1e6:	b2db      	uxtb	r3, r3
 800d1e8:	1c5a      	adds	r2, r3, #1
 800d1ea:	b2d1      	uxtb	r1, r2
 800d1ec:	4a0e      	ldr	r2, [pc, #56]	; (800d228 <FATFS_LinkDriverEx+0x94>)
 800d1ee:	7251      	strb	r1, [r2, #9]
 800d1f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d1f2:	7dbb      	ldrb	r3, [r7, #22]
 800d1f4:	3330      	adds	r3, #48	; 0x30
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	3301      	adds	r3, #1
 800d200:	223a      	movs	r2, #58	; 0x3a
 800d202:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	3302      	adds	r3, #2
 800d208:	222f      	movs	r2, #47	; 0x2f
 800d20a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	3303      	adds	r3, #3
 800d210:	2200      	movs	r2, #0
 800d212:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d218:	7dfb      	ldrb	r3, [r7, #23]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	20001698 	.word	0x20001698

0800d22c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d236:	2200      	movs	r2, #0
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff ffaa 	bl	800d194 <FATFS_LinkDriverEx>
 800d240:	4603      	mov	r3, r0
}
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
	...

0800d24c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d250:	2201      	movs	r2, #1
 800d252:	490e      	ldr	r1, [pc, #56]	; (800d28c <MX_USB_HOST_Init+0x40>)
 800d254:	480e      	ldr	r0, [pc, #56]	; (800d290 <MX_USB_HOST_Init+0x44>)
 800d256:	f7fc f819 	bl	800928c <USBH_Init>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d260:	f7f3 fede 	bl	8001020 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d264:	490b      	ldr	r1, [pc, #44]	; (800d294 <MX_USB_HOST_Init+0x48>)
 800d266:	480a      	ldr	r0, [pc, #40]	; (800d290 <MX_USB_HOST_Init+0x44>)
 800d268:	f7fc f89e 	bl	80093a8 <USBH_RegisterClass>
 800d26c:	4603      	mov	r3, r0
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d272:	f7f3 fed5 	bl	8001020 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d276:	4806      	ldr	r0, [pc, #24]	; (800d290 <MX_USB_HOST_Init+0x44>)
 800d278:	f7fc f922 	bl	80094c0 <USBH_Start>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d001      	beq.n	800d286 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d282:	f7f3 fecd 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d286:	bf00      	nop
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	0800d2ad 	.word	0x0800d2ad
 800d290:	200016a4 	.word	0x200016a4
 800d294:	2000000c 	.word	0x2000000c

0800d298 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d29c:	4802      	ldr	r0, [pc, #8]	; (800d2a8 <MX_USB_HOST_Process+0x10>)
 800d29e:	f7fc f91f 	bl	80094e0 <USBH_Process>
}
 800d2a2:	bf00      	nop
 800d2a4:	bd80      	pop	{r7, pc}
 800d2a6:	bf00      	nop
 800d2a8:	200016a4 	.word	0x200016a4

0800d2ac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	b083      	sub	sp, #12
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d2b8:	78fb      	ldrb	r3, [r7, #3]
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d819      	bhi.n	800d2f4 <USBH_UserProcess+0x48>
 800d2c0:	a201      	add	r2, pc, #4	; (adr r2, 800d2c8 <USBH_UserProcess+0x1c>)
 800d2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c6:	bf00      	nop
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	0800d2e5 	.word	0x0800d2e5
 800d2d0:	0800d2f5 	.word	0x0800d2f5
 800d2d4:	0800d2ed 	.word	0x0800d2ed
 800d2d8:	0800d2dd 	.word	0x0800d2dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d2dc:	4b09      	ldr	r3, [pc, #36]	; (800d304 <USBH_UserProcess+0x58>)
 800d2de:	2203      	movs	r2, #3
 800d2e0:	701a      	strb	r2, [r3, #0]
  break;
 800d2e2:	e008      	b.n	800d2f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d2e4:	4b07      	ldr	r3, [pc, #28]	; (800d304 <USBH_UserProcess+0x58>)
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	701a      	strb	r2, [r3, #0]
  break;
 800d2ea:	e004      	b.n	800d2f6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d2ec:	4b05      	ldr	r3, [pc, #20]	; (800d304 <USBH_UserProcess+0x58>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	701a      	strb	r2, [r3, #0]
  break;
 800d2f2:	e000      	b.n	800d2f6 <USBH_UserProcess+0x4a>

  default:
  break;
 800d2f4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d2f6:	bf00      	nop
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20001a7c 	.word	0x20001a7c

0800d308 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b08a      	sub	sp, #40	; 0x28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d310:	f107 0314 	add.w	r3, r7, #20
 800d314:	2200      	movs	r2, #0
 800d316:	601a      	str	r2, [r3, #0]
 800d318:	605a      	str	r2, [r3, #4]
 800d31a:	609a      	str	r2, [r3, #8]
 800d31c:	60da      	str	r2, [r3, #12]
 800d31e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d328:	d147      	bne.n	800d3ba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
 800d32e:	4b25      	ldr	r3, [pc, #148]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d332:	4a24      	ldr	r2, [pc, #144]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d334:	f043 0301 	orr.w	r3, r3, #1
 800d338:	6313      	str	r3, [r2, #48]	; 0x30
 800d33a:	4b22      	ldr	r3, [pc, #136]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	613b      	str	r3, [r7, #16]
 800d344:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d346:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d34a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d34c:	2300      	movs	r3, #0
 800d34e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d350:	2300      	movs	r3, #0
 800d352:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d354:	f107 0314 	add.w	r3, r7, #20
 800d358:	4619      	mov	r1, r3
 800d35a:	481b      	ldr	r0, [pc, #108]	; (800d3c8 <HAL_HCD_MspInit+0xc0>)
 800d35c:	f7f4 fee8 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d360:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d366:	2302      	movs	r3, #2
 800d368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d36a:	2300      	movs	r3, #0
 800d36c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d36e:	2303      	movs	r3, #3
 800d370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d372:	230a      	movs	r3, #10
 800d374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d376:	f107 0314 	add.w	r3, r7, #20
 800d37a:	4619      	mov	r1, r3
 800d37c:	4812      	ldr	r0, [pc, #72]	; (800d3c8 <HAL_HCD_MspInit+0xc0>)
 800d37e:	f7f4 fed7 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d382:	4b10      	ldr	r3, [pc, #64]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d386:	4a0f      	ldr	r2, [pc, #60]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d38c:	6353      	str	r3, [r2, #52]	; 0x34
 800d38e:	2300      	movs	r3, #0
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	4b0c      	ldr	r3, [pc, #48]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d396:	4a0b      	ldr	r2, [pc, #44]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d39c:	6453      	str	r3, [r2, #68]	; 0x44
 800d39e:	4b09      	ldr	r3, [pc, #36]	; (800d3c4 <HAL_HCD_MspInit+0xbc>)
 800d3a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2043      	movs	r0, #67	; 0x43
 800d3b0:	f7f4 faa7 	bl	8001902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d3b4:	2043      	movs	r0, #67	; 0x43
 800d3b6:	f7f4 fac0 	bl	800193a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d3ba:	bf00      	nop
 800d3bc:	3728      	adds	r7, #40	; 0x28
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	40023800 	.word	0x40023800
 800d3c8:	40020000 	.word	0x40020000

0800d3cc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fc fc5f 	bl	8009c9e <USBH_LL_IncTimer>
}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fc fc97 	bl	8009d2a <USBH_LL_Connect>
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d412:	4618      	mov	r0, r3
 800d414:	f7fc fca0 	bl	8009d58 <USBH_LL_Disconnect>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	460b      	mov	r3, r1
 800d42a:	70fb      	strb	r3, [r7, #3]
 800d42c:	4613      	mov	r3, r2
 800d42e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d430:	bf00      	nop
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fc fc51 	bl	8009cf2 <USBH_LL_PortEnabled>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d466:	4618      	mov	r0, r3
 800d468:	f7fc fc51 	bl	8009d0e <USBH_LL_PortDisabled>
}
 800d46c:	bf00      	nop
 800d46e:	3708      	adds	r7, #8
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}

0800d474 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d482:	2b01      	cmp	r3, #1
 800d484:	d12a      	bne.n	800d4dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d486:	4a18      	ldr	r2, [pc, #96]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a15      	ldr	r2, [pc, #84]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d492:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d496:	4b14      	ldr	r3, [pc, #80]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d498:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d49c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d49e:	4b12      	ldr	r3, [pc, #72]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4a0:	2208      	movs	r2, #8
 800d4a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d4a4:	4b10      	ldr	r3, [pc, #64]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d4aa:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d4b0:	4b0d      	ldr	r3, [pc, #52]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d4b6:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d4bc:	480a      	ldr	r0, [pc, #40]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4be:	f7f5 f804 	bl	80024ca <HAL_HCD_Init>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d001      	beq.n	800d4cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d4c8:	f7f3 fdaa 	bl	8001020 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d4cc:	4806      	ldr	r0, [pc, #24]	; (800d4e8 <USBH_LL_Init+0x74>)
 800d4ce:	f7f5 fbe8 	bl	8002ca2 <HAL_HCD_GetCurrentFrame>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7fc fbd2 	bl	8009c80 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3708      	adds	r7, #8
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20001a80 	.word	0x20001a80

0800d4ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d502:	4618      	mov	r0, r3
 800d504:	f7f5 fb57 	bl	8002bb6 <HAL_HCD_Start>
 800d508:	4603      	mov	r3, r0
 800d50a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d50c:	7bfb      	ldrb	r3, [r7, #15]
 800d50e:	4618      	mov	r0, r3
 800d510:	f000 f982 	bl	800d818 <USBH_Get_USB_Status>
 800d514:	4603      	mov	r3, r0
 800d516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d518:	7bbb      	ldrb	r3, [r7, #14]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d52a:	2300      	movs	r3, #0
 800d52c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d538:	4618      	mov	r0, r3
 800d53a:	f7f5 fb5f 	bl	8002bfc <HAL_HCD_Stop>
 800d53e:	4603      	mov	r3, r0
 800d540:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d542:	7bfb      	ldrb	r3, [r7, #15]
 800d544:	4618      	mov	r0, r3
 800d546:	f000 f967 	bl	800d818 <USBH_Get_USB_Status>
 800d54a:	4603      	mov	r3, r0
 800d54c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d54e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d560:	2301      	movs	r3, #1
 800d562:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d56a:	4618      	mov	r0, r3
 800d56c:	f7f5 fba7 	bl	8002cbe <HAL_HCD_GetCurrentSpeed>
 800d570:	4603      	mov	r3, r0
 800d572:	2b02      	cmp	r3, #2
 800d574:	d00c      	beq.n	800d590 <USBH_LL_GetSpeed+0x38>
 800d576:	2b02      	cmp	r3, #2
 800d578:	d80d      	bhi.n	800d596 <USBH_LL_GetSpeed+0x3e>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d002      	beq.n	800d584 <USBH_LL_GetSpeed+0x2c>
 800d57e:	2b01      	cmp	r3, #1
 800d580:	d003      	beq.n	800d58a <USBH_LL_GetSpeed+0x32>
 800d582:	e008      	b.n	800d596 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
    break;
 800d588:	e008      	b.n	800d59c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d58a:	2301      	movs	r3, #1
 800d58c:	73fb      	strb	r3, [r7, #15]
    break;
 800d58e:	e005      	b.n	800d59c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d590:	2302      	movs	r3, #2
 800d592:	73fb      	strb	r3, [r7, #15]
    break;
 800d594:	e002      	b.n	800d59c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d596:	2301      	movs	r3, #1
 800d598:	73fb      	strb	r3, [r7, #15]
    break;
 800d59a:	bf00      	nop
  }
  return  speed;
 800d59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7f5 fb3a 	bl	8002c36 <HAL_HCD_ResetPort>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d5c6:	7bfb      	ldrb	r3, [r7, #15]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f000 f925 	bl	800d818 <USBH_Get_USB_Status>
 800d5ce:	4603      	mov	r3, r0
 800d5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d5ee:	78fa      	ldrb	r2, [r7, #3]
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7f5 fb41 	bl	8002c7a <HAL_HCD_HC_GetXferCount>
 800d5f8:	4603      	mov	r3, r0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d602:	b590      	push	{r4, r7, lr}
 800d604:	b089      	sub	sp, #36	; 0x24
 800d606:	af04      	add	r7, sp, #16
 800d608:	6078      	str	r0, [r7, #4]
 800d60a:	4608      	mov	r0, r1
 800d60c:	4611      	mov	r1, r2
 800d60e:	461a      	mov	r2, r3
 800d610:	4603      	mov	r3, r0
 800d612:	70fb      	strb	r3, [r7, #3]
 800d614:	460b      	mov	r3, r1
 800d616:	70bb      	strb	r3, [r7, #2]
 800d618:	4613      	mov	r3, r2
 800d61a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d620:	2300      	movs	r3, #0
 800d622:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d62a:	787c      	ldrb	r4, [r7, #1]
 800d62c:	78ba      	ldrb	r2, [r7, #2]
 800d62e:	78f9      	ldrb	r1, [r7, #3]
 800d630:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d632:	9302      	str	r3, [sp, #8]
 800d634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d638:	9301      	str	r3, [sp, #4]
 800d63a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d63e:	9300      	str	r3, [sp, #0]
 800d640:	4623      	mov	r3, r4
 800d642:	f7f4 ffa4 	bl	800258e <HAL_HCD_HC_Init>
 800d646:	4603      	mov	r3, r0
 800d648:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f8e3 	bl	800d818 <USBH_Get_USB_Status>
 800d652:	4603      	mov	r3, r0
 800d654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d656:	7bbb      	ldrb	r3, [r7, #14]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3714      	adds	r7, #20
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd90      	pop	{r4, r7, pc}

0800d660 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d67a:	78fa      	ldrb	r2, [r7, #3]
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f7f5 f814 	bl	80026ac <HAL_HCD_HC_Halt>
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 f8c4 	bl	800d818 <USBH_Get_USB_Status>
 800d690:	4603      	mov	r3, r0
 800d692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d694:	7bbb      	ldrb	r3, [r7, #14]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d69e:	b590      	push	{r4, r7, lr}
 800d6a0:	b089      	sub	sp, #36	; 0x24
 800d6a2:	af04      	add	r7, sp, #16
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	4608      	mov	r0, r1
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	70fb      	strb	r3, [r7, #3]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70bb      	strb	r3, [r7, #2]
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d6c6:	787c      	ldrb	r4, [r7, #1]
 800d6c8:	78ba      	ldrb	r2, [r7, #2]
 800d6ca:	78f9      	ldrb	r1, [r7, #3]
 800d6cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d6d4:	9302      	str	r3, [sp, #8]
 800d6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d8:	9301      	str	r3, [sp, #4]
 800d6da:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	f7f5 f807 	bl	80026f4 <HAL_HCD_HC_SubmitRequest>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f000 f893 	bl	800d818 <USBH_Get_USB_Status>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd90      	pop	{r4, r7, pc}

0800d700 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d712:	78fa      	ldrb	r2, [r7, #3]
 800d714:	4611      	mov	r1, r2
 800d716:	4618      	mov	r0, r3
 800d718:	f7f5 fa9b 	bl	8002c52 <HAL_HCD_HC_GetURBState>
 800d71c:	4603      	mov	r3, r0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
 800d72e:	460b      	mov	r3, r1
 800d730:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d732:	20c8      	movs	r0, #200	; 0xc8
 800d734:	f7f3 ffe6 	bl	8001704 <HAL_Delay>
  return USBH_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d742:	b480      	push	{r7}
 800d744:	b085      	sub	sp, #20
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	460b      	mov	r3, r1
 800d74c:	70fb      	strb	r3, [r7, #3]
 800d74e:	4613      	mov	r3, r2
 800d750:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d758:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	212c      	movs	r1, #44	; 0x2c
 800d760:	fb01 f303 	mul.w	r3, r1, r3
 800d764:	4413      	add	r3, r2
 800d766:	333b      	adds	r3, #59	; 0x3b
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d009      	beq.n	800d782 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d76e:	78fb      	ldrb	r3, [r7, #3]
 800d770:	68fa      	ldr	r2, [r7, #12]
 800d772:	212c      	movs	r1, #44	; 0x2c
 800d774:	fb01 f303 	mul.w	r3, r1, r3
 800d778:	4413      	add	r3, r2
 800d77a:	3354      	adds	r3, #84	; 0x54
 800d77c:	78ba      	ldrb	r2, [r7, #2]
 800d77e:	701a      	strb	r2, [r3, #0]
 800d780:	e008      	b.n	800d794 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d782:	78fb      	ldrb	r3, [r7, #3]
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	212c      	movs	r1, #44	; 0x2c
 800d788:	fb01 f303 	mul.w	r3, r1, r3
 800d78c:	4413      	add	r3, r2
 800d78e:	3355      	adds	r3, #85	; 0x55
 800d790:	78ba      	ldrb	r2, [r7, #2]
 800d792:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d794:	2300      	movs	r3, #0
}
 800d796:	4618      	mov	r0, r3
 800d798:	3714      	adds	r7, #20
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	b085      	sub	sp, #20
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6078      	str	r0, [r7, #4]
 800d7aa:	460b      	mov	r3, r1
 800d7ac:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7b8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d7ba:	78fb      	ldrb	r3, [r7, #3]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	212c      	movs	r1, #44	; 0x2c
 800d7c0:	fb01 f303 	mul.w	r3, r1, r3
 800d7c4:	4413      	add	r3, r2
 800d7c6:	333b      	adds	r3, #59	; 0x3b
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d009      	beq.n	800d7e2 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d7ce:	78fb      	ldrb	r3, [r7, #3]
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	212c      	movs	r1, #44	; 0x2c
 800d7d4:	fb01 f303 	mul.w	r3, r1, r3
 800d7d8:	4413      	add	r3, r2
 800d7da:	3354      	adds	r3, #84	; 0x54
 800d7dc:	781b      	ldrb	r3, [r3, #0]
 800d7de:	73fb      	strb	r3, [r7, #15]
 800d7e0:	e008      	b.n	800d7f4 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d7e2:	78fb      	ldrb	r3, [r7, #3]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	212c      	movs	r1, #44	; 0x2c
 800d7e8:	fb01 f303 	mul.w	r3, r1, r3
 800d7ec:	4413      	add	r3, r2
 800d7ee:	3355      	adds	r3, #85	; 0x55
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f7f3 ff7a 	bl	8001704 <HAL_Delay>
}
 800d810:	bf00      	nop
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	2b03      	cmp	r3, #3
 800d82a:	d817      	bhi.n	800d85c <USBH_Get_USB_Status+0x44>
 800d82c:	a201      	add	r2, pc, #4	; (adr r2, 800d834 <USBH_Get_USB_Status+0x1c>)
 800d82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d832:	bf00      	nop
 800d834:	0800d845 	.word	0x0800d845
 800d838:	0800d84b 	.word	0x0800d84b
 800d83c:	0800d851 	.word	0x0800d851
 800d840:	0800d857 	.word	0x0800d857
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d844:	2300      	movs	r3, #0
 800d846:	73fb      	strb	r3, [r7, #15]
    break;
 800d848:	e00b      	b.n	800d862 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d84a:	2302      	movs	r3, #2
 800d84c:	73fb      	strb	r3, [r7, #15]
    break;
 800d84e:	e008      	b.n	800d862 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d850:	2301      	movs	r3, #1
 800d852:	73fb      	strb	r3, [r7, #15]
    break;
 800d854:	e005      	b.n	800d862 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d856:	2302      	movs	r3, #2
 800d858:	73fb      	strb	r3, [r7, #15]
    break;
 800d85a:	e002      	b.n	800d862 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d85c:	2302      	movs	r3, #2
 800d85e:	73fb      	strb	r3, [r7, #15]
    break;
 800d860:	bf00      	nop
  }
  return usb_status;
 800d862:	7bfb      	ldrb	r3, [r7, #15]
}
 800d864:	4618      	mov	r0, r3
 800d866:	3714      	adds	r7, #20
 800d868:	46bd      	mov	sp, r7
 800d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86e:	4770      	bx	lr

0800d870 <malloc>:
 800d870:	4b02      	ldr	r3, [pc, #8]	; (800d87c <malloc+0xc>)
 800d872:	4601      	mov	r1, r0
 800d874:	6818      	ldr	r0, [r3, #0]
 800d876:	f000 b82b 	b.w	800d8d0 <_malloc_r>
 800d87a:	bf00      	nop
 800d87c:	20000078 	.word	0x20000078

0800d880 <free>:
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <free+0xc>)
 800d882:	4601      	mov	r1, r0
 800d884:	6818      	ldr	r0, [r3, #0]
 800d886:	f000 b901 	b.w	800da8c <_free_r>
 800d88a:	bf00      	nop
 800d88c:	20000078 	.word	0x20000078

0800d890 <sbrk_aligned>:
 800d890:	b570      	push	{r4, r5, r6, lr}
 800d892:	4e0e      	ldr	r6, [pc, #56]	; (800d8cc <sbrk_aligned+0x3c>)
 800d894:	460c      	mov	r4, r1
 800d896:	6831      	ldr	r1, [r6, #0]
 800d898:	4605      	mov	r5, r0
 800d89a:	b911      	cbnz	r1, 800d8a2 <sbrk_aligned+0x12>
 800d89c:	f000 f8ac 	bl	800d9f8 <_sbrk_r>
 800d8a0:	6030      	str	r0, [r6, #0]
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f000 f8a7 	bl	800d9f8 <_sbrk_r>
 800d8aa:	1c43      	adds	r3, r0, #1
 800d8ac:	d00a      	beq.n	800d8c4 <sbrk_aligned+0x34>
 800d8ae:	1cc4      	adds	r4, r0, #3
 800d8b0:	f024 0403 	bic.w	r4, r4, #3
 800d8b4:	42a0      	cmp	r0, r4
 800d8b6:	d007      	beq.n	800d8c8 <sbrk_aligned+0x38>
 800d8b8:	1a21      	subs	r1, r4, r0
 800d8ba:	4628      	mov	r0, r5
 800d8bc:	f000 f89c 	bl	800d9f8 <_sbrk_r>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d101      	bne.n	800d8c8 <sbrk_aligned+0x38>
 800d8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800d8c8:	4620      	mov	r0, r4
 800d8ca:	bd70      	pop	{r4, r5, r6, pc}
 800d8cc:	20001d88 	.word	0x20001d88

0800d8d0 <_malloc_r>:
 800d8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	1ccd      	adds	r5, r1, #3
 800d8d6:	f025 0503 	bic.w	r5, r5, #3
 800d8da:	3508      	adds	r5, #8
 800d8dc:	2d0c      	cmp	r5, #12
 800d8de:	bf38      	it	cc
 800d8e0:	250c      	movcc	r5, #12
 800d8e2:	2d00      	cmp	r5, #0
 800d8e4:	4607      	mov	r7, r0
 800d8e6:	db01      	blt.n	800d8ec <_malloc_r+0x1c>
 800d8e8:	42a9      	cmp	r1, r5
 800d8ea:	d905      	bls.n	800d8f8 <_malloc_r+0x28>
 800d8ec:	230c      	movs	r3, #12
 800d8ee:	603b      	str	r3, [r7, #0]
 800d8f0:	2600      	movs	r6, #0
 800d8f2:	4630      	mov	r0, r6
 800d8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d9cc <_malloc_r+0xfc>
 800d8fc:	f000 f868 	bl	800d9d0 <__malloc_lock>
 800d900:	f8d8 3000 	ldr.w	r3, [r8]
 800d904:	461c      	mov	r4, r3
 800d906:	bb5c      	cbnz	r4, 800d960 <_malloc_r+0x90>
 800d908:	4629      	mov	r1, r5
 800d90a:	4638      	mov	r0, r7
 800d90c:	f7ff ffc0 	bl	800d890 <sbrk_aligned>
 800d910:	1c43      	adds	r3, r0, #1
 800d912:	4604      	mov	r4, r0
 800d914:	d155      	bne.n	800d9c2 <_malloc_r+0xf2>
 800d916:	f8d8 4000 	ldr.w	r4, [r8]
 800d91a:	4626      	mov	r6, r4
 800d91c:	2e00      	cmp	r6, #0
 800d91e:	d145      	bne.n	800d9ac <_malloc_r+0xdc>
 800d920:	2c00      	cmp	r4, #0
 800d922:	d048      	beq.n	800d9b6 <_malloc_r+0xe6>
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	4631      	mov	r1, r6
 800d928:	4638      	mov	r0, r7
 800d92a:	eb04 0903 	add.w	r9, r4, r3
 800d92e:	f000 f863 	bl	800d9f8 <_sbrk_r>
 800d932:	4581      	cmp	r9, r0
 800d934:	d13f      	bne.n	800d9b6 <_malloc_r+0xe6>
 800d936:	6821      	ldr	r1, [r4, #0]
 800d938:	1a6d      	subs	r5, r5, r1
 800d93a:	4629      	mov	r1, r5
 800d93c:	4638      	mov	r0, r7
 800d93e:	f7ff ffa7 	bl	800d890 <sbrk_aligned>
 800d942:	3001      	adds	r0, #1
 800d944:	d037      	beq.n	800d9b6 <_malloc_r+0xe6>
 800d946:	6823      	ldr	r3, [r4, #0]
 800d948:	442b      	add	r3, r5
 800d94a:	6023      	str	r3, [r4, #0]
 800d94c:	f8d8 3000 	ldr.w	r3, [r8]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d038      	beq.n	800d9c6 <_malloc_r+0xf6>
 800d954:	685a      	ldr	r2, [r3, #4]
 800d956:	42a2      	cmp	r2, r4
 800d958:	d12b      	bne.n	800d9b2 <_malloc_r+0xe2>
 800d95a:	2200      	movs	r2, #0
 800d95c:	605a      	str	r2, [r3, #4]
 800d95e:	e00f      	b.n	800d980 <_malloc_r+0xb0>
 800d960:	6822      	ldr	r2, [r4, #0]
 800d962:	1b52      	subs	r2, r2, r5
 800d964:	d41f      	bmi.n	800d9a6 <_malloc_r+0xd6>
 800d966:	2a0b      	cmp	r2, #11
 800d968:	d917      	bls.n	800d99a <_malloc_r+0xca>
 800d96a:	1961      	adds	r1, r4, r5
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	6025      	str	r5, [r4, #0]
 800d970:	bf18      	it	ne
 800d972:	6059      	strne	r1, [r3, #4]
 800d974:	6863      	ldr	r3, [r4, #4]
 800d976:	bf08      	it	eq
 800d978:	f8c8 1000 	streq.w	r1, [r8]
 800d97c:	5162      	str	r2, [r4, r5]
 800d97e:	604b      	str	r3, [r1, #4]
 800d980:	4638      	mov	r0, r7
 800d982:	f104 060b 	add.w	r6, r4, #11
 800d986:	f000 f829 	bl	800d9dc <__malloc_unlock>
 800d98a:	f026 0607 	bic.w	r6, r6, #7
 800d98e:	1d23      	adds	r3, r4, #4
 800d990:	1af2      	subs	r2, r6, r3
 800d992:	d0ae      	beq.n	800d8f2 <_malloc_r+0x22>
 800d994:	1b9b      	subs	r3, r3, r6
 800d996:	50a3      	str	r3, [r4, r2]
 800d998:	e7ab      	b.n	800d8f2 <_malloc_r+0x22>
 800d99a:	42a3      	cmp	r3, r4
 800d99c:	6862      	ldr	r2, [r4, #4]
 800d99e:	d1dd      	bne.n	800d95c <_malloc_r+0x8c>
 800d9a0:	f8c8 2000 	str.w	r2, [r8]
 800d9a4:	e7ec      	b.n	800d980 <_malloc_r+0xb0>
 800d9a6:	4623      	mov	r3, r4
 800d9a8:	6864      	ldr	r4, [r4, #4]
 800d9aa:	e7ac      	b.n	800d906 <_malloc_r+0x36>
 800d9ac:	4634      	mov	r4, r6
 800d9ae:	6876      	ldr	r6, [r6, #4]
 800d9b0:	e7b4      	b.n	800d91c <_malloc_r+0x4c>
 800d9b2:	4613      	mov	r3, r2
 800d9b4:	e7cc      	b.n	800d950 <_malloc_r+0x80>
 800d9b6:	230c      	movs	r3, #12
 800d9b8:	603b      	str	r3, [r7, #0]
 800d9ba:	4638      	mov	r0, r7
 800d9bc:	f000 f80e 	bl	800d9dc <__malloc_unlock>
 800d9c0:	e797      	b.n	800d8f2 <_malloc_r+0x22>
 800d9c2:	6025      	str	r5, [r4, #0]
 800d9c4:	e7dc      	b.n	800d980 <_malloc_r+0xb0>
 800d9c6:	605b      	str	r3, [r3, #4]
 800d9c8:	deff      	udf	#255	; 0xff
 800d9ca:	bf00      	nop
 800d9cc:	20001d84 	.word	0x20001d84

0800d9d0 <__malloc_lock>:
 800d9d0:	4801      	ldr	r0, [pc, #4]	; (800d9d8 <__malloc_lock+0x8>)
 800d9d2:	f000 b84b 	b.w	800da6c <__retarget_lock_acquire_recursive>
 800d9d6:	bf00      	nop
 800d9d8:	20001ec8 	.word	0x20001ec8

0800d9dc <__malloc_unlock>:
 800d9dc:	4801      	ldr	r0, [pc, #4]	; (800d9e4 <__malloc_unlock+0x8>)
 800d9de:	f000 b846 	b.w	800da6e <__retarget_lock_release_recursive>
 800d9e2:	bf00      	nop
 800d9e4:	20001ec8 	.word	0x20001ec8

0800d9e8 <memset>:
 800d9e8:	4402      	add	r2, r0
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d100      	bne.n	800d9f2 <memset+0xa>
 800d9f0:	4770      	bx	lr
 800d9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800d9f6:	e7f9      	b.n	800d9ec <memset+0x4>

0800d9f8 <_sbrk_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d06      	ldr	r5, [pc, #24]	; (800da14 <_sbrk_r+0x1c>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	602b      	str	r3, [r5, #0]
 800da04:	f7f3 fc7e 	bl	8001304 <_sbrk>
 800da08:	1c43      	adds	r3, r0, #1
 800da0a:	d102      	bne.n	800da12 <_sbrk_r+0x1a>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	b103      	cbz	r3, 800da12 <_sbrk_r+0x1a>
 800da10:	6023      	str	r3, [r4, #0]
 800da12:	bd38      	pop	{r3, r4, r5, pc}
 800da14:	20001ec4 	.word	0x20001ec4

0800da18 <__errno>:
 800da18:	4b01      	ldr	r3, [pc, #4]	; (800da20 <__errno+0x8>)
 800da1a:	6818      	ldr	r0, [r3, #0]
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	20000078 	.word	0x20000078

0800da24 <__libc_init_array>:
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	4d0d      	ldr	r5, [pc, #52]	; (800da5c <__libc_init_array+0x38>)
 800da28:	4c0d      	ldr	r4, [pc, #52]	; (800da60 <__libc_init_array+0x3c>)
 800da2a:	1b64      	subs	r4, r4, r5
 800da2c:	10a4      	asrs	r4, r4, #2
 800da2e:	2600      	movs	r6, #0
 800da30:	42a6      	cmp	r6, r4
 800da32:	d109      	bne.n	800da48 <__libc_init_array+0x24>
 800da34:	4d0b      	ldr	r5, [pc, #44]	; (800da64 <__libc_init_array+0x40>)
 800da36:	4c0c      	ldr	r4, [pc, #48]	; (800da68 <__libc_init_array+0x44>)
 800da38:	f000 f874 	bl	800db24 <_init>
 800da3c:	1b64      	subs	r4, r4, r5
 800da3e:	10a4      	asrs	r4, r4, #2
 800da40:	2600      	movs	r6, #0
 800da42:	42a6      	cmp	r6, r4
 800da44:	d105      	bne.n	800da52 <__libc_init_array+0x2e>
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	f855 3b04 	ldr.w	r3, [r5], #4
 800da4c:	4798      	blx	r3
 800da4e:	3601      	adds	r6, #1
 800da50:	e7ee      	b.n	800da30 <__libc_init_array+0xc>
 800da52:	f855 3b04 	ldr.w	r3, [r5], #4
 800da56:	4798      	blx	r3
 800da58:	3601      	adds	r6, #1
 800da5a:	e7f2      	b.n	800da42 <__libc_init_array+0x1e>
 800da5c:	0800dcb0 	.word	0x0800dcb0
 800da60:	0800dcb0 	.word	0x0800dcb0
 800da64:	0800dcb0 	.word	0x0800dcb0
 800da68:	0800dcb4 	.word	0x0800dcb4

0800da6c <__retarget_lock_acquire_recursive>:
 800da6c:	4770      	bx	lr

0800da6e <__retarget_lock_release_recursive>:
 800da6e:	4770      	bx	lr

0800da70 <memcpy>:
 800da70:	440a      	add	r2, r1
 800da72:	4291      	cmp	r1, r2
 800da74:	f100 33ff 	add.w	r3, r0, #4294967295
 800da78:	d100      	bne.n	800da7c <memcpy+0xc>
 800da7a:	4770      	bx	lr
 800da7c:	b510      	push	{r4, lr}
 800da7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da86:	4291      	cmp	r1, r2
 800da88:	d1f9      	bne.n	800da7e <memcpy+0xe>
 800da8a:	bd10      	pop	{r4, pc}

0800da8c <_free_r>:
 800da8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da8e:	2900      	cmp	r1, #0
 800da90:	d044      	beq.n	800db1c <_free_r+0x90>
 800da92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da96:	9001      	str	r0, [sp, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f1a1 0404 	sub.w	r4, r1, #4
 800da9e:	bfb8      	it	lt
 800daa0:	18e4      	addlt	r4, r4, r3
 800daa2:	f7ff ff95 	bl	800d9d0 <__malloc_lock>
 800daa6:	4a1e      	ldr	r2, [pc, #120]	; (800db20 <_free_r+0x94>)
 800daa8:	9801      	ldr	r0, [sp, #4]
 800daaa:	6813      	ldr	r3, [r2, #0]
 800daac:	b933      	cbnz	r3, 800dabc <_free_r+0x30>
 800daae:	6063      	str	r3, [r4, #4]
 800dab0:	6014      	str	r4, [r2, #0]
 800dab2:	b003      	add	sp, #12
 800dab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dab8:	f7ff bf90 	b.w	800d9dc <__malloc_unlock>
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	d908      	bls.n	800dad2 <_free_r+0x46>
 800dac0:	6825      	ldr	r5, [r4, #0]
 800dac2:	1961      	adds	r1, r4, r5
 800dac4:	428b      	cmp	r3, r1
 800dac6:	bf01      	itttt	eq
 800dac8:	6819      	ldreq	r1, [r3, #0]
 800daca:	685b      	ldreq	r3, [r3, #4]
 800dacc:	1949      	addeq	r1, r1, r5
 800dace:	6021      	streq	r1, [r4, #0]
 800dad0:	e7ed      	b.n	800daae <_free_r+0x22>
 800dad2:	461a      	mov	r2, r3
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	b10b      	cbz	r3, 800dadc <_free_r+0x50>
 800dad8:	42a3      	cmp	r3, r4
 800dada:	d9fa      	bls.n	800dad2 <_free_r+0x46>
 800dadc:	6811      	ldr	r1, [r2, #0]
 800dade:	1855      	adds	r5, r2, r1
 800dae0:	42a5      	cmp	r5, r4
 800dae2:	d10b      	bne.n	800dafc <_free_r+0x70>
 800dae4:	6824      	ldr	r4, [r4, #0]
 800dae6:	4421      	add	r1, r4
 800dae8:	1854      	adds	r4, r2, r1
 800daea:	42a3      	cmp	r3, r4
 800daec:	6011      	str	r1, [r2, #0]
 800daee:	d1e0      	bne.n	800dab2 <_free_r+0x26>
 800daf0:	681c      	ldr	r4, [r3, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	6053      	str	r3, [r2, #4]
 800daf6:	440c      	add	r4, r1
 800daf8:	6014      	str	r4, [r2, #0]
 800dafa:	e7da      	b.n	800dab2 <_free_r+0x26>
 800dafc:	d902      	bls.n	800db04 <_free_r+0x78>
 800dafe:	230c      	movs	r3, #12
 800db00:	6003      	str	r3, [r0, #0]
 800db02:	e7d6      	b.n	800dab2 <_free_r+0x26>
 800db04:	6825      	ldr	r5, [r4, #0]
 800db06:	1961      	adds	r1, r4, r5
 800db08:	428b      	cmp	r3, r1
 800db0a:	bf04      	itt	eq
 800db0c:	6819      	ldreq	r1, [r3, #0]
 800db0e:	685b      	ldreq	r3, [r3, #4]
 800db10:	6063      	str	r3, [r4, #4]
 800db12:	bf04      	itt	eq
 800db14:	1949      	addeq	r1, r1, r5
 800db16:	6021      	streq	r1, [r4, #0]
 800db18:	6054      	str	r4, [r2, #4]
 800db1a:	e7ca      	b.n	800dab2 <_free_r+0x26>
 800db1c:	b003      	add	sp, #12
 800db1e:	bd30      	pop	{r4, r5, pc}
 800db20:	20001d84 	.word	0x20001d84

0800db24 <_init>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr

0800db30 <_fini>:
 800db30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db32:	bf00      	nop
 800db34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db36:	bc08      	pop	{r3}
 800db38:	469e      	mov	lr, r3
 800db3a:	4770      	bx	lr
